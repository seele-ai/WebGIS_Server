<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpMap.UI</name>
    </assembly>
    <members>
        <member name="T:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer">
            <summary>
            Interface for map image generators that can be used with <see cref="T:SharpMap.Forms.MapBox"/>
            </summary>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.Image">
            <summary>
            Gets a value representing the complete rendered map image
            </summary>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.ImageValue">
            <summary>
            Gets the current image value as it is now
            </summary>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.ImageEnvelope">
            <summary>
            Gets the location and extent of the map image.
            </summary>
            <remarks>Implementation should always return a copy of the actual value</remarks>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.IsDisposed">
            <summary>
            Gets a value indicating that this object is disposed
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.Generate">
            <summary>
            Method to generate a new set of images
            </summary>
        </member>
        <member name="T:SharpMap.Forms.ImageGenerator.LayerListImageRenderer">
            <summary>
            A <see cref="T:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer"/> implementation that works on a list
            of layers that are rendered separately.<br/>
            Using this technique, <see cref="P:SharpMap.Map.BackgroundLayer"/> and <see cref="P:SharpMap.Map.VariableLayers"/>
            are no longer needed and the layers in them can go into <see cref="P:SharpMap.Map.Layers"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ImageGenerator.LayerListImageRenderer.#ctor(SharpMap.Forms.MapBox,System.Windows.Forms.ProgressBar)">
            <summary>
            Creates an instance for this class
            </summary>
            <param name="mapBox">The map box</param>
            <param name="progressBar">A progress bar</param>
        </member>
        <member name="M:SharpMap.Forms.ImageGenerator.LayerListImageRenderer.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LayerListImageRenderer.Image">
            <see cref="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.Image"/>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LayerListImageRenderer.ImageValue">
            <see cref="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.ImageValue"/>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LayerListImageRenderer.ImageEnvelope">
            <see cref="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.ImageEnvelope"/>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LayerListImageRenderer.IsDisposed">
            <see cref="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.IsDisposed"/>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LayerListImageRenderer.Map">
            <summary>
            Gets or sets a value indicating the map that is currently rendered.
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ImageGenerator.LayerListImageRenderer.Generate">
            <summary>
            Method to generate a new set of images
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ImageGenerator.LayerListImageRenderer.RenderLayerImage(System.Object)">
            <summary>
            Function to render a layer to an image
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LayerListImageRenderer.RefreshInterval">
            <summary>
            Gets or sets a value indicating the interval that the map is queried for layers that need to be rendered
            </summary>
        </member>
        <member name="T:SharpMap.Forms.ImageGenerator.LegacyMapBoxImageGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ImageGenerator.LegacyMapBoxImageGenerator.#ctor(SharpMap.Forms.MapBox,System.Windows.Forms.ProgressBar)">
            <summary>
            Creates an instance for this class
            </summary>
            <param name="mapBox">The map box</param>
            <param name="progressBar">A progress bar</param>
        </member>
        <member name="M:SharpMap.Forms.ImageGenerator.LegacyMapBoxImageGenerator.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LegacyMapBoxImageGenerator.MapBox">
            <summary>
            Gets access to the map
            </summary>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LegacyMapBoxImageGenerator.Image">
            <inheritdoc cref="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.Image"/>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LegacyMapBoxImageGenerator.ImageValue">
            <inheritdoc cref="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.ImageValue"/>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LegacyMapBoxImageGenerator.IsDisposed">
            <inheritdoc cref="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.IsDisposed"/>
        </member>
        <member name="P:SharpMap.Forms.ImageGenerator.LegacyMapBoxImageGenerator.ImageEnvelope">
            <inheritdoc cref="P:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer.ImageEnvelope"/>
        </member>
        <member name="M:SharpMap.Forms.ImageGenerator.LegacyMapBoxImageGenerator.HandleVariableLayersRequery(System.Object,System.EventArgs)">
            <summary>
            Handles need to requery of variable layers
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Forms.ImageGenerator.LegacyMapBoxImageGenerator.Generate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Forms.MapBox">
            <summary>
            MapBox Class - MapBox control for Windows forms
            </summary>
            <remarks>
            The ExtendedMapImage control adds more than basic functionality to a Windows Form, such as dynamic pan, widow zoom and data query.
            </remarks>
        </member>
        <member name="F:SharpMap.Forms.MapBox.PrecisionTolerance">
            <summary>
            A tolerance value
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox._mapImageGeneratorFunction">
            <summary>
            The map image generation function to use when creating new <see cref="T:SharpMap.Forms.MapBox"/> instances
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.MapImageGeneratorFunction">
            <summary>
            Gets or sets the map image generation function to assign when creating new MapBox instances.
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapBox.LegacyMapImageGenerator(SharpMap.Forms.MapBox,System.Windows.Forms.ProgressBar)">
            <summary>
            Creates a <see cref="T:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer"/> that mimics legacy image generation for <see cref="T:SharpMap.Forms.MapBox"/> control.
            </summary>
            <param name="mapBox">The map control</param>
            <param name="progressBar">The progress bar</param>
            <returns>An image generator for <see cref="T:SharpMap.Forms.MapBox"/> control</returns>
        </member>
        <member name="M:SharpMap.Forms.MapBox.LayerListImageGenerator(SharpMap.Forms.MapBox,System.Windows.Forms.ProgressBar)">
            <summary>
            Creates a <see cref="T:SharpMap.Forms.ImageGenerator.IMapBoxImageRenderer"/> for <see cref="T:SharpMap.Forms.MapBox"/> control that works on a list of layers.
            </summary>
            <param name="mapBox">The map control</param>
            <param name="progressBar">The progress bar</param>
            <returns>An image generator for <see cref="T:SharpMap.Forms.MapBox"/> control</returns>
        </member>
        <member name="T:SharpMap.Forms.MapBox.PreviewModes">
            <summary>
            Preview modes
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.PreviewModes.Best">
            <summary>
            Best preview mode
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.PreviewModes.Fast">
            <summary>
            Fast preview mode
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.XPosition">
            <summary>
            Horizontal alignment enumeration
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.YPosition">
            <summary>
            Vertical alignment enumeration
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.Tools">
            <summary>
            Map tools enumeration
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.Pan">
            <summary>
            Pan
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.ZoomIn">
            <summary>
            Zoom in
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.ZoomOut">
            <summary>
            Zoom out
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.QueryBox">
            <summary>
            Query bounding boxes for intersection
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.Query">
            <summary>
            Query tool
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.QueryPoint">
            <summary>
            Attempt true intersection query on geometry
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.QueryGeometry">
            <summary>
            Attempt true intersection query on geometry
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.ZoomWindow">
            <summary>
            Zoom window tool
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.DrawPoint">
            <summary>
            Define Point on Map
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.DrawLine">
            <summary>
            Define Line on Map
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.DrawPolygon">
            <summary>
            Define Polygon on Map
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.None">
            <summary>
            No active tool
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.Tools.Custom">
            <summary>
            Custom tool, implementing <see cref="T:SharpMap.Forms.Tools.IMapTool"/>
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.MapQueryType">
            <summary>
            Enumeration of map query types
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.MapQueryType.LayerByIndex">
            <summary>
            Layer set in QueryLayerIndex is the only layers Queried  (Default)
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.MapQueryType.AllLayers">
            <summary>
            All layers are queried
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.MapQueryType.VisibleLayers">
            <summary>
            All visible layers are queried
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapBox.MapQueryType.TopMostLayer">
            <summary>
            Visible layers are queried from Top and down until a layer with an intersecting feature is found 
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.MouseEventHandler">
            <summary>
            MouseEventtype fired from the MapImage control
            </summary>
            <param name="worldPos"></param>
            <param name="imagePos"></param>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MouseMove">
            <summary>
            Fires when mouse moves over the map
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MouseDown">
            <summary>
            Fires when map received a mouseclick
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MouseUp">
            <summary>
            Fires when mouse is released
            </summary>		
        </member>
        <member name="E:SharpMap.Forms.MapBox.MouseDrag">
            <summary>
            Fired when mouse is dragging
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MapRefreshed">
            <summary>
            Fired when the map has been refreshed
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MapChanging">
            <summary>
            Fired when the map is about to change
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MapChanged">
            <summary>
            Fired when the map has been changed
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.MapZoomHandler">
            <summary>
            Eventtype fired when the zoom was or are being changed
            </summary>
            <param name="zoom"></param>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MapZoomChanged">
            <summary>
            Fired when the zoom value has changed
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MapZooming">
            <summary>
            Fired when the map is being zoomed
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.MapQueryHandler">
            <summary>
            Eventtype fired when the map is queried
            </summary>
            <param name="data"></param>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MapQueried">
            <summary>
            Fired when the map is queried
            
            Will be fired one time for each layer selected for query depending on QueryLayerIndex and QuerySettings
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MapQueryStarted">
            <summary>
            Fired when Map is Queried before the first MapQueried event is fired for that query
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MapQueryDone">
            <summary>
            Fired when Map is Queried after the last MapQueried event is fired for that query
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.MapCenterChangedHandler">
            <summary>
            Eventtype fired when the center has changed
            </summary>
            <param name="center"></param>
        </member>
        <member name="E:SharpMap.Forms.MapBox.MapCenterChanged">
            <summary>
            Fired when the center of the map has changed
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.ActiveToolChangingHandler">
            <summary>
            Eventtype fired befor the active map tool change
            </summary>
            <param name="toolPre">pre-tool</param>
            <param name="toolNew">new tool</param>
            <param name="cea">a cancel indicator</param>
        </member>
        <member name="E:SharpMap.Forms.MapBox.ActiveToolChanging">
            <summary>
            Fired befor the active map tool change
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.ActiveToolChangedHandler">
            <summary>
            Eventtype fired when the map tool is changed
            </summary>
            <param name="tool"></param>
        </member>
        <member name="E:SharpMap.Forms.MapBox.ActiveToolChanged">
            <summary>
            Fired when the active map tool has changed
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapBox.GeometryDefinedHandler">
            <summary>
            Eventtype fired when a new geometry has been defined
            </summary>
            <param name="geometry">New Geometry</param>
        </member>
        <member name="E:SharpMap.Forms.MapBox.GeometryDefined">
            <summary>
            Fired when a new polygon has been defined
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapBox.RandomizeLayerColors(SharpMap.Layers.VectorLayer)">
            <summary>
            Assigns a random color to a vector layers style
            </summary>
            <param name="layer"></param>
        </member>
        <member name="P:SharpMap.Forms.MapBox.ImageRendererName">
            <summary>
            Gets a value indicating the name of the Image generator
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.ImageRenderer">
            <summary>
            Gets a value indicating the image renderer for this MapBox
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.ShowProgressUpdate">
            <summary>
            Gets or sets a value on whether to report progress of map generation
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.PanOnClick">
            <summary>
            Gets or sets whether the "go-to-cursor-on-click" feature is enabled or not (even if enabled it works only if the active tool is Pan)
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.TakeFocusOnHover">
            <summary>
            Sets whether the mapcontrol should automatically grab focus when mouse is hovering the control
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.ZoomToPointer">
            <summary>
            Sets whether the mouse wheel should zoom to the pointer location
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.SetToolsNoneWhileRedrawing">
            <summary>
            Sets ActiveTool to None (and changing cursor) while redrawing the map
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.QueryGrowFactor">
            <summary>
            Gets or sets the number of pixels by which a bounding box around the query point should be "grown" prior to perform the query
            </summary>
            <remarks>Does not apply when querying against boxes.</remarks>
        </member>
        <member name="P:SharpMap.Forms.MapBox.SelectionBackColor">
            <summary>
            Gets or sets the value of the back color for the selection rectangle
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.SelectionForeColor">
            <summary>
            Gets or sets the value of the border color for the selection rectangle
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.Image">
            <summary>
            Gets the current map image
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.WheelZoomMagnitude">
            <summary>
            Gets or sets the amount which a single movement of the mouse wheel zooms by.
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.PreviewMode">
            <summary>
            Gets or sets the mode used to create preview image while panning or zooming.
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.FineZoomFactor">
            <summary>
            Gets or sets a value indicating the amount which the WheelZoomMagnitude is divided by 
            when the Control key is pressed. A number greater than 1 decreases 
            the zoom, and less than 1 increases it. A negative number reverses it.
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.EnableShiftButtonDragRectangleZoom">
            <summary>
            Gets or sets a value that enables shortcut to rectangle-zoom by holding down shift-button and drag rectangle
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.Map">
            <summary>
            Gets or sets the map reference
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.QueryLayerIndex">
            <summary>
            Gets or sets the index of the active query layer 
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.MapQueryMode">
            <summary>
            Gets or sets the mapquerying mode
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.ActiveTool">
            <summary>
            Sets the active map tool
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnActiveToolChanging(SharpMap.Forms.MapBox.Tools,SharpMap.Forms.MapBox.Tools,System.ComponentModel.CancelEventArgs)">
            <summary>
            Event invoker for the <see cref="E:SharpMap.Forms.MapBox.ActiveToolChanging"/>
            </summary>
            <param name="toolPre">pre-tool</param>
            <param name="toolNew">new tool</param>
            <param name="cea">a cancel indicator</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnActiveToolChanged(SharpMap.Forms.MapBox.Tools)">
            <summary>
            Event invoker for the <see cref="E:SharpMap.Forms.MapBox.ActiveToolChanged"/> event
            </summary>
            <param name="activeTool">The tool</param>
        </member>
        <member name="P:SharpMap.Forms.MapBox.CustomTool">
            <summary>
            Gets or sets a value indicating the currently active custom tool
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapBox.#ctor">
            <summary>
            Initializes a new map
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnSizeChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Forms.MapBox.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
            <param name="disposing">A parameter indicating that this method is called from either a call to <see cref="M:System.IDisposable.Dispose"/> (<c>true</c>)
            or the finalizer (<c>false</c>)</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.HandleMapBoxLostFocus(System.Object,System.EventArgs)">
            <summary>
            Handles LostFocus event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.Refresh">
            <summary>
            Refreshes the map
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMouseHover(System.EventArgs)">
            <summary>
            Invokes the <see cref="E:System.Windows.Forms.Control.MouseHover"/>-event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event arguments.</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes the <see cref="E:System.Windows.Forms.Control.MouseWheel"/>-event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event arguments.</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes the <see cref="E:System.Windows.Forms.Control.MouseDown"/>-event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event arguments.</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.CheckEnableHover(System.Drawing.Point)">
            <summary>
            Private method to check if we need to reenable the <see cref="E:System.Windows.Forms.Control.MouseHover"/> event.
            </summary>
            <param name="position">The current position of the cursor</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes the <see cref="E:System.Windows.Forms.Control.MouseMove"/>-event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event arguments.</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Invokes the <see cref="E:System.Windows.Forms.Control.KeyDown"/>-event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event arguments.</param>
        </member>
        <member name="P:SharpMap.Forms.MapBox.Dragging">
            <summary>
            Gets a value indicating that the map is currently being dragged.
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapBox.MapLocker">
            <summary>
            A sync object for the <see cref="P:SharpMap.Forms.MapBox.Map"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMapChanging(System.ComponentModel.CancelEventArgs)">
            <summary>
            Invokes the <see cref="E:SharpMap.Forms.MapBox.MapChanging"/>-event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event arguments.</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMapChanged(System.EventArgs)">
            <summary>
            Invokes the <see cref="E:SharpMap.Forms.MapBox.MapChanged"/>-event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event arguments.</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMapRefreshed(System.EventArgs)">
            <summary>
            Event invoker for the <see cref="E:SharpMap.Forms.MapBox.MapRefreshed"/> event
            </summary>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMapZoomChanged(System.Double)">
            <summary>
            Invokes the <see cref="E:SharpMap.Forms.MapBox.MapZoomChanged"/> event.
            </summary>
            <param name="zoom"></param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMapCenterChanged(GeoAPI.Geometries.Coordinate)">
            <summary>
            Invokes the <see cref="E:SharpMap.Forms.MapBox.MapCenterChanged"/> event.
            </summary>
            <param name="center"></param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Invokes the <see cref="E:System.Windows.Forms.Control.Paint"/>-event.
            </summary>
            <param name="pe">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event arguments.</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes the <see cref="E:System.Windows.Forms.Control.MouseUp"/>-event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event arguments.</param>
        </member>
        <member name="M:SharpMap.Forms.MapBox.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)"/>
        </member>
        <member name="T:SharpMap.Forms.MapBox.MouseWheelGrabber">
            <summary>
            MouseWheelGrabber is a MessageFilter that enables mousewheelcapture on mapcontrol even if the control does 
            not have focus as long as the mouse is positioned over the control
            </summary>
        </member>
        <member name="T:SharpMap.Forms.ClipboardMetafileHelper">
            <summary>
            Utility class to copy map as enhanced metafile to clipboard
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ClipboardMetafileHelper.PutEnhMetafileOnClipboard(System.IntPtr,System.Drawing.Imaging.Metafile)">
            <summary>
            Puts the metafile to the clipboard
            </summary>
            <param name="hWnd">The handle</param>
            <param name="mf">The metafie</param>
            <remarks>Metafile mf is set to a state that is not valid inside this function.</remarks>
            <returns><see langword="true"/> if operation was successfull</returns>
        </member>
        <member name="T:SharpMap.Forms.MiniMapControl">
            <summary>
            This control displays a minimap of the whole extension of a map, and let the user drag the viewport.
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MiniMapControl.HitResult">
            <summary>
            Enumeration of possible hit results
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MiniMapControl.HitResult.None">
            <summary>
            Not hit anything at all
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MiniMapControl.HitResult.InsideFrame">
            <summary>
            Hit inside the frame
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MiniMapControl.HitResult.SizeNW">
            <summary>
            Hit resize north-west corner
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MiniMapControl.HitResult.SizeNE">
            <summary>
            Hit resize north-east corner
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MiniMapControl.HitResult.SizeSW">
            <summary>
            Hit resize south-west corner
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MiniMapControl.HitResult.SizeSE">
            <summary>
            Hit resize south-east corner
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MiniMapControl.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.IsRenderingThread">
            <summary>
            Gets a value indicating if the current thread is rendering the map.
            </summary>
            <remarks>A layer could use this value to customize the rendering into the minimap.</remarks>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.ResizeInterval">
            <summary>
            Gets or sets a value indicating the interval between two MapControl.Resize events
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.FrameHalo">
            <summary>
            Gets or sets a value indicating if the viewport frame should have a halo
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.FrameHaloColor">
            <summary>
            Gets or sets a value indicating the color of the the viewport frame halo
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.FramePenAlignment">
            <summary>
            Gets or sets a value indicating the pen alignment used when drawing the frame
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.FramePenDashStyle">
            <summary>
            Gets or sets a value indicating the pen alignment used when drawing the frame
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.MapControl">
            <summary>
            Gets or sets a value indicating the <see cref="T:SharpMap.Forms.MapBox"/> control linked to the mini map.
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.BorderStyle">
            <summary>
            Gets or sets a value indicating the border style
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.FramePenColor">
            <summary>
            Gets or sets a value indicating the color of the pen that draws the frame
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.FrameBrushColor">
            <summary>
            Gets or sets a value indicating the color of the brush that fills the frame
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.FramePenWidth">
            <summary>
            Gets or sets a value indicating the width of the pen that draws the frame
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.Opacity">
            <summary>
            Gets or sets a value indicating the opacity of the brush used to fill the frame
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MiniMapControl.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a value that determines what the provided location hits
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Forms.MiniMapControl.Refresh">
            <inheritdoc cref="M:System.Windows.Forms.Control.Refresh"/>
        </member>
        <member name="P:SharpMap.Forms.MiniMapControl.CreateParams">
            <inheritdoc cref="P:System.Windows.Forms.Control.CreateParams"/>
        </member>
        <member name="M:SharpMap.Forms.MiniMapControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharpMap.Forms.MiniMapControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>
        </member>
        <member name="M:SharpMap.Forms.MiniMapControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>
        </member>
        <member name="M:SharpMap.Forms.MiniMapControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>
        </member>
        <member name="M:SharpMap.Forms.MiniMapControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>
        </member>
        <member name="T:SharpMap.Forms.ToolBar.MapDigitizeGeometriesToolStrip">
            <summary>
            Map tool strip that contains geometry edit controls
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapDigitizeGeometriesToolStrip.#ctor">
            <summary>
            Creates an instance of this control
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapDigitizeGeometriesToolStrip.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of this control
            </summary>
            <param name="container">A container</param>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapDigitizeGeometriesToolStrip.InitializeComponent">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapDigitizeGeometriesToolStrip.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapDigitizeGeometriesToolStrip.OnMapControlChangingInternal(System.ComponentModel.CancelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapDigitizeGeometriesToolStrip.OnMapControlChangedInternal(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:SharpMap.Forms.ToolBar.MapDigitizeGeometriesToolStrip.GeometryDefinedHandler">
            <summary>
            A handler that is invoked when a new geometry was defined.
            </summary>
        </member>
        <member name="T:SharpMap.Forms.ToolBar.MapQueryToolStrip">
            <summary>
            A tool strip for enabling querying on the map
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapQueryToolStrip.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapQueryToolStrip.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="container">A container to add components to</param>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapQueryToolStrip.InitializeComponent">
            <summary>
            Method to initialize the tool strip
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapQueryToolStrip.OnMapControlChangingInternal(System.ComponentModel.CancelEventArgs)">
            <inheritdoc cref="M:SharpMap.Forms.MapToolStrip.OnMapControlChangingInternal(System.ComponentModel.CancelEventArgs)"/>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapQueryToolStrip.OnMapControlChangedInternal(System.EventArgs)">
            <inheritdoc cref="M:SharpMap.Forms.MapToolStrip.OnMapControlChangedInternal(System.EventArgs)"/>
        </member>
        <member name="T:SharpMap.Forms.ToolBar.MapVariableLayerToolStrip">
            <summary>
            A pre-configured tool strip for the handling of Map's VariableLayers collection
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapVariableLayerToolStrip.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapVariableLayerToolStrip.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="container">A container for components</param>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapVariableLayerToolStrip.InitializeComponent">
            <summary>
            Initializes this tool strip
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapVariableLayerToolStrip.Dispose(System.Boolean)">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapVariableLayerToolStrip.OnMapControlChangingInternal(System.ComponentModel.CancelEventArgs)">
            <inheritdoc cref="M:SharpMap.Forms.ToolBar.MapVariableLayerToolStrip.OnMapControlChangingInternal(System.ComponentModel.CancelEventArgs)"/>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapVariableLayerToolStrip.OnMapControlChangedInternal(System.EventArgs)">
            <inheritdoc cref="M:SharpMap.Forms.ToolBar.MapVariableLayerToolStrip.OnMapControlChangedInternal(System.EventArgs)"/>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapZoomToolStrip.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapZoomToolStrip.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapZoomToolStrip.InitializeComponent">
            <summary>
            Initializes this component
            </summary>
        </member>
        <member name="T:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack">
            <summary>
            An implementation of zoom previous/zoom next like *** MapControl
            </summary>
        </member>
        <member name="F:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack._storeExtentsUser">
            <summary>
            Value indicating if zoom changes that have been invoked by user interaction should be saved or not
            </summary>
        </member>
        <member name="F:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack._storeExtentsInternal">
            <summary>
            Value indicating if zoom changes that have been invoked by this class should be stored or not
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack.#ctor(SharpMap.Forms.MapBox)">
            <summary>
            Creates an instance of this class. <br/>
            No extents will be stored until .StoreExtents = true
            </summary>
            <param name="mapBox">The MapBox control</param>
        </member>
        <member name="P:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack.StoreExtents">
            <summary>
            If true extents will be stored, starting with the current;
            if false no extents will be stored (paused).
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack.Clear">
            <summary>
            Erases the extents stack
            </summary>
        </member>
        <member name="P:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack.CanZoomPrevious">
            <summary>
            true if previous zoom is available
            </summary>
        </member>
        <member name="P:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack.CanZoomNext">
            <summary>
            true if 'next' zoom is available
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack.ZoomPrevious">
            <summary>
            Execute a zoom previous
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack.ZoomNext">
            <summary>
            Execute a zoom next
            </summary>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapZoomToolStrip.ZoomExtentStack.Add(GeoAPI.Geometries.Envelope)">
            <summary>
            Adds the given extent to the stack
            </summary>
            <param name="newExtent">the extent to be stored</param>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapZoomToolStrip.OnMapControlChangedInternal(System.EventArgs)">
            <inheritdoc cref="M:SharpMap.Forms.MapToolStrip.OnMapControlChangedInternal(System.EventArgs)"/>
        </member>
        <member name="M:SharpMap.Forms.ToolBar.MapZoomToolStrip.OnCreateControl">
            <inheritdoc cref="M:System.Windows.Forms.Control.OnCreateControl"/>
        </member>
        <member name="T:SharpMap.Forms.MapToolStrip">
            <summary>
            Map tool
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapToolStrip.MapControlChanged">
            <summary>
            Event raised when the corresponding map control has changed.
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapToolStrip.MapControlChanging">
            <summary>
            Event raised when the corresponding map control is about to change
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapToolStrip.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapToolStrip.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapToolStrip.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="container">A container for components</param>
        </member>
        <member name="P:SharpMap.Forms.MapToolStrip.MapControl">
            <summary>
            Gets or sets the control whose properties are currently being managed.
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapToolStrip.OnMapControlChanging(System.ComponentModel.CancelEventArgs)">
            <summary>
            Event invoker for the <see cref="E:SharpMap.Forms.MapToolStrip.MapControlChanging"/> event.
            Calls <see cref="M:SharpMap.Forms.MapToolStrip.OnMapControlChangingInternal(System.ComponentModel.CancelEventArgs)"/>, too, if
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is <c>false</c> after handling of event.
            </summary>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:SharpMap.Forms.MapToolStrip.OnMapControlChangingInternal(System.ComponentModel.CancelEventArgs)">
            <summary>
            Overrideable function to release a map control from this tool-strip, if possible.
            </summary>
            <param name="e">The event arguments. If removing MapControl is not possible <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> must be set to <c>true</c>.</param>
        </member>
        <member name="M:SharpMap.Forms.MapToolStrip.OnMapControlChanged(System.EventArgs)">
            <summary>
            Event invoker for the <see cref="E:SharpMap.Forms.MapToolStrip.MapControlChanged"/> event.
            Calls <see cref="M:SharpMap.Forms.MapToolStrip.OnMapControlChangedInternal(System.EventArgs)"/>, too.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Forms.MapToolStrip.OnMapControlChangedInternal(System.EventArgs)">
            <summary>
            Overrideable function to connect a map control to this tool-strip.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:SharpMap.Forms.MapToolStrip.TrySetActiveTool(System.Windows.Forms.ToolStripButton,SharpMap.Forms.MapBox.Tools)">
            <summary>
            Method to set the active map tool from a button
            </summary>
            <param name="btn">A button</param>
            <param name="associtatedTool">The associated tool</param>
        </member>
        <member name="T:SharpMap.Forms.Tools.IMapTool">
            <summary>
            Interface for custom map tools
            </summary>
        </member>
        <member name="P:SharpMap.Forms.Tools.IMapTool.Map">
            <summary>
            Gets or sets a value indicating the map the tool is to be applied to
            </summary>
        </member>
        <member name="P:SharpMap.Forms.Tools.IMapTool.Name">
            <summary>
            Gets the tools name
            </summary>
        </member>
        <member name="P:SharpMap.Forms.Tools.IMapTool.Description">
            <summary>
            Gets a value describing the purpose of this tool
            </summary>
        </member>
        <member name="P:SharpMap.Forms.Tools.IMapTool.Enabled">
            <summary>
            Gets or sets a value indicating that this tool is enabled
            </summary>
        </member>
        <member name="E:SharpMap.Forms.Tools.IMapTool.EnabledChanged">
            <summary>
            Event that is raised when the <see cref="P:SharpMap.Forms.Tools.IMapTool.Enabled"/> value has changed
            </summary>
        </member>
        <member name="P:SharpMap.Forms.Tools.IMapTool.Cursor">
            <summary>
            Gets or sets a value indicating how the cursor is supposed to look when this tool is active
            </summary>
        </member>
        <member name="E:SharpMap.Forms.Tools.IMapTool.CursorChanged">
            <summary>
            Event raised when the curser for this tool has changed
            </summary>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoMouseHover(GeoAPI.Geometries.Coordinate)">
            <summary>
            Function to perform some action on mouse hover
            </summary>
            <param name="mapPosition">The position at which the mouse hovers</param>
            <returns><value>true</value> if the action was handled and <b>false</b> other action should be taken</returns>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoMouseEnter">
            <summary>
            Function to perform some action when the mouse enters the map
            </summary>
            <returns><value>true</value> if the action was handled and <b>false</b> other action should be taken</returns>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoMouseLeave">
            <summary>
            Function to perform some action when the mouse leaves the map
            </summary>
            <returns><value>true</value> if the action was handled and <b>false</b> other action should be taken</returns>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoMouseDoubleClick(GeoAPI.Geometries.Coordinate,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Function to perform some action when the map was double clicked at a certain position
            </summary>
            <param name="mapPosition">The position at which the mouse hovers</param>
            <param name="mouseEventArgs">The mouse event arguments</param>
            <returns><value>true</value> if the action was handled and <b>false</b> other action should be taken</returns>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoMouseDown(GeoAPI.Geometries.Coordinate,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Function to perform some action when a mouse button was "downed" on the map
            </summary>
            <param name="mapPosition">The position at which the mouse button was downed</param>
            <param name="mouseEventArgs">The mouse event arguments</param>
            <returns><value>true</value> if the action was handled and <b>false</b> other action should be taken</returns>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoMouseMove(GeoAPI.Geometries.Coordinate,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Function to perform some action when a mouse button was moved on the map
            </summary>
            <param name="mapPosition">The position to which the mouse moved</param>
            <param name="mouseEventArgs">The mouse event arguments</param>
            <returns><value>true</value> if the action was handled and <b>false</b> other action should be taken</returns>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoMouseUp(GeoAPI.Geometries.Coordinate,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Function to perform some action when a mouse button was "uped" on the map
            </summary>
            <param name="mapPosition">The position at which the mouse hovers</param>
            <param name="mouseEventArgs">The mouse event arguments</param>
            <returns><value>true</value> if the action was handled and <b>false</b> other action should be taken</returns>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoMouseWheel(GeoAPI.Geometries.Coordinate,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Function to perform some action when a mouse wheel was scrolled on the map
            </summary>
            <param name="mapPosition">The position at which the mouse hovers</param>
            <param name="mouseEventArgs">The mouse event arguments</param>
            <returns><value>true</value> if the action was handled and <b>false</b> other action should be taken</returns>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Some drawing operation of the tool
            </summary>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoKeyDown(GeoAPI.Geometries.Coordinate,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Function to perform some action when a key was "downed" on the map
            </summary>
            <param name="mapPosition">The position at which the mouse hovers</param>
            <param name="keyEventArgs">The key event arguments</param>
            <returns><value>true</value> if the action was handled and <b>false</b> other action should be taken</returns>
        </member>
        <member name="M:SharpMap.Forms.Tools.IMapTool.DoKeyUp(GeoAPI.Geometries.Coordinate,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Function to perform some action when a key was "uped" on the map
            </summary>
            <param name="mapPosition">The position at which the mouse hovers</param>
            <param name="keyEventArgs">The key event arguments</param>
            <returns><value>true</value> if the action was handled and <b>false</b> other action should be taken</returns>
        </member>
        <member name="T:SharpMap.Forms.Tools.MapTool">
            <summary>
            Abstract base class for <see cref="T:SharpMap.Forms.Tools.IMapTool"/> implementations
            </summary>
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of this class assigning the 
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="P:SharpMap.Forms.Tools.MapTool.Map">
            <inheritdoc />
        </member>
        <member name="P:SharpMap.Forms.Tools.MapTool.Name">
            <inheritdoc />
        </member>
        <member name="P:SharpMap.Forms.Tools.MapTool.Description">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.Cancel">
            <summary>
            Method stub to cancel this tool
            </summary>
        </member>
        <member name="E:SharpMap.Forms.Tools.MapTool.EnabledChanged">
            <summary>
            Event that is raised when the <see cref="P:SharpMap.Forms.Tools.MapTool.Enabled"/> value has changed
            </summary>
        </member>
        <member name="P:SharpMap.Forms.Tools.MapTool.Enabled">
            <summary>
            Gets or sets a value indicating that this tool is enabled
            </summary>
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.OnEnabledChanged(System.EventArgs)">
            <summary>
            Event invoker for the <see cref="E:SharpMap.Forms.Tools.MapTool.EnabledChanged"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SharpMap.Forms.Tools.MapTool.Cursor">
            <summary>
            Gets the cursor used for map operation
            </summary>
        </member>
        <member name="E:SharpMap.Forms.Tools.MapTool.CursorChanged">
            <summary>
            Event raised when the cursor has changed
            </summary>
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.OnCursorChanged(System.EventArgs)">
            <summary>
            Event invoker for the <see cref="E:SharpMap.Forms.Tools.MapTool.CursorChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoMouseHover(GeoAPI.Geometries.Coordinate)">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoMouseEnter">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoMouseDoubleClick(GeoAPI.Geometries.Coordinate,System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoMouseDown(GeoAPI.Geometries.Coordinate,System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoMouseMove(GeoAPI.Geometries.Coordinate,System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoMouseUp(GeoAPI.Geometries.Coordinate,System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoMouseWheel(GeoAPI.Geometries.Coordinate,System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoKeyDown(GeoAPI.Geometries.Coordinate,System.Windows.Forms.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:SharpMap.Forms.Tools.MapTool.DoKeyUp(GeoAPI.Geometries.Coordinate,System.Windows.Forms.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:SharpMap.Forms.WktGeometryCreator">
            <summary>
            A geometry editor for WKT Text
            </summary>
        </member>
        <member name="M:SharpMap.Forms.WktGeometryCreator.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Forms.WktGeometryCreator.Geometry">
            <summary>
            Gets or sets a value indicating the current geometry
            </summary>
        </member>
        <member name="P:SharpMap.Forms.WktGeometryCreator.SRID">
            <summary>
            Gets a value indicating the spatial reference id of the geometry created
            </summary>
        </member>
        <member name="F:SharpMap.Forms.WktGeometryCreator.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharpMap.Forms.WktGeometryCreator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharpMap.Forms.WktGeometryCreator.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharpMap.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:SharpMap.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:SharpMap.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
    </members>
</doc>
