<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpMap</name>
    </assembly>
    <members>
        <member name="T:SharpMap.Base.IDisposableEx">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpMap.Base.IDisposableEx.IsDisposed">
            <summary>
            Gets whether this object was already disposed
            </summary>
        </member>
        <member name="T:SharpMap.Base.DisposableObject">
            <summary>
            Disposable object template
            </summary>
            <remarks>
            This template was taken from phil haack's blog (
            <see href="http://haacked.com/archive/2005/11/18/ACloserLookAtDisposePattern.aspx"/>) and further enhanced
            </remarks>
        </member>
        <member name="M:SharpMap.Base.DisposableObject.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SharpMap.Base.DisposableObject.Dispose">
            <summary>
            Executes specific tasks that are concerned with freeing or initializing resources.
            </summary>
        </member>
        <member name="M:SharpMap.Base.DisposableObject.ReleaseUnmanagedResources">
            <summary>
            Releases unmanaged resources
            </summary>
        </member>
        <member name="M:SharpMap.Base.DisposableObject.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Base.DisposableObject.CheckDisposed">
            <summary>
            Method to check if this object has already been disposed
            </summary>
        </member>
        <member name="P:SharpMap.Base.DisposableObject.IsDisposed">
            <summary>
            Gets whether this object is disposed
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.GeometryFromWKB">
            <summary>
             Converts Well-known Binary representations to a <see cref="T:GeoAPI.Geometries.IGeometry"/> instance.
            </summary>
            <remarks>
            <para>The Well-known Binary Representation for <see cref="T:GeoAPI.Geometries.IGeometry"/> (WKBGeometry) provides a portable 
            representation of a <see cref="T:GeoAPI.Geometries.IGeometry"/> value as a contiguous stream of bytes. It permits <see cref="T:GeoAPI.Geometries.IGeometry"/> 
            values to be exchanged between an ODBC client and an SQL database in binary form.</para>
            <para>The Well-known Binary Representation for <see cref="T:GeoAPI.Geometries.IGeometry"/> is obtained by serializing a <see cref="T:GeoAPI.Geometries.IGeometry"/>
            instance as a sequence of numeric types drawn from the set {Unsigned Integer, Double} and
            then serializing each numeric type as a sequence of bytes using one of two well defined,
            standard, binary representations for numeric types (NDR, XDR). The specific binary encoding
            (NDR or XDR) used for a geometry byte stream is described by a one byte tag that precedes
            the serialized bytes. The only difference between the two encodings of geometry is one of
            byte order, the XDR encoding is Big Endian, the NDR encoding is Little Endian.</para>
            </remarks> 
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryFromWKB.Parse(System.Byte[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.IGeometry"/> from the supplied byte[] containing the Well-known Binary representation.
            </summary>
            <param name="bytes">byte[] containing the Well-known Binary representation.</param>
            <param name="factory">The factory to create the result geometry</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IGeometry"/> bases on the supplied Well-known Binary representation.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryFromWKB.Parse(System.IO.BinaryReader,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.IGeometry"/> based on the Well-known binary representation.
            </summary>
            <param name="reader">A <see cref="T:System.IO.BinaryReader">BinaryReader</see> used to read the Well-known binary representation.</param>
            <param name="factory">The factory to create the result geometry</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IGeometry"/> based on the Well-known binary representation.</returns>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.GeometryToWKB">
            <summary>
            Converts a <see cref="T:GeoAPI.Geometries.IGeometry"/> instance to a Well-known Binary string representation.
            </summary>
            <remarks>
            <para>The Well-known Binary Representation for <see cref="T:GeoAPI.Geometries.IGeometry"/> (WKBGeometry) provides a portable 
            representation of a <see cref="T:GeoAPI.Geometries.IGeometry"/> value as a contiguous stream of bytes. It permits <see cref="T:GeoAPI.Geometries.IGeometry"/> 
            values to be exchanged between an ODBC client and an SQL database in binary form.</para>
            <para>The Well-known Binary Representation for <see cref="T:GeoAPI.Geometries.IGeometry"/> is obtained by serializing a <see cref="T:GeoAPI.Geometries.IGeometry"/>
            instance as a sequence of numeric types drawn from the set {Unsigned Integer, Double} and
            then serializing each numeric type as a sequence of bytes using one of two well defined,
            standard, binary representations for numeric types (NDR, XDR). The specific binary encoding
            (NDR or XDR) used for a geometry byte stream is described by a one byte tag that precedes
            the serialized bytes. The only difference between the two encodings of geometry is one of
            byte order, the XDR encoding is Big Endian, the NDR encoding is Little Endian.</para>
            </remarks> 
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Writes a geometry to a byte array using little endian byte encoding
            </summary>
            <param name="g">The geometry to write</param>
            <returns>WKB representation of the geometry</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.Write(GeoAPI.Geometries.IGeometry,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a geometry to a byte array using the specified encoding.
            </summary>
            <param name="g">The geometry to write</param>
            <param name="wkbByteOrder">Byte order</param>
            <returns>WKB representation of the geometry</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteUInt32(System.UInt32,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes an unsigned integer to the binarywriter using the specified encoding
            </summary>
            <param name="value">Value to write</param>
            <param name="writer">Binary Writer</param>
            <param name="byteOrder">byteorder</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteDouble(System.Double,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a double to the binarywriter using the specified encoding
            </summary>
            <param name="value">Value to write</param>
            <param name="writer">Binary Writer</param>
            <param name="byteOrder">byteorder</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteType(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes the type number for this geometry.
            </summary>
            <param name="geometry">The geometry to determine the type of.</param>
            <param name="bWriter">Binary Writer</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteGeometry(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes the geometry to the binary writer.
            </summary>
            <param name="geometry">The geometry to be written.</param>
            <param name="bWriter"></param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WritePoint(GeoAPI.Geometries.Coordinate,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a point.
            </summary>
            <param name="point">The point to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WritePoint(GeoAPI.Geometries.IPoint,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a point.
            </summary>
            <param name="point">The point to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteLineString(GeoAPI.Geometries.ILineString,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a linestring.
            </summary>
            <param name="ls">The linestring to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WritePolygon(GeoAPI.Geometries.IPolygon,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a polygon.
            </summary>
            <param name="poly">The polygon to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiPoint(GeoAPI.Geometries.IMultiPoint,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a multipoint.
            </summary>
            <param name="mp">The multipoint to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiLineString(GeoAPI.Geometries.IMultiLineString,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a multilinestring.
            </summary>
            <param name="mls">The multilinestring to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiPolygon(GeoAPI.Geometries.IMultiPolygon,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a multipolygon.
            </summary>
            <param name="mp">The mulitpolygon to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteGeometryCollection(GeoAPI.Geometries.IGeometryCollection,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a geometrycollection.
            </summary>
            <param name="gc">The geometrycollection to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.WkbByteOrder">
            <summary>
            Specifies the specific binary encoding (NDR or XDR) used for a geometry byte stream
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownBinary.WkbByteOrder.Xdr">
            <summary>
            XDR (Big Endian) Encoding of Numeric Types
            </summary>
            <remarks>
            <para>The XDR representation of an Unsigned Integer is Big Endian (most significant byte first).</para>
            <para>The XDR representation of a Double is Big Endian (sign bit is first byte).</para>
            </remarks>
        </member>
        <member name="F:SharpMap.Converters.WellKnownBinary.WkbByteOrder.Ndr">
            <summary>
            NDR (Little Endian) Encoding of Numeric Types
            </summary>
            <remarks>
            <para>The NDR representation of an Unsigned Integer is Little Endian (least significant byte first).</para>
            <para>The NDR representation of a Double is Little Endian (sign bit is last byte).</para>
            </remarks>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.WKBGeometryType">
            <summary>
            Enumeration to determine geometrytype in Well-known Binary
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.GeometryFromWKT">
            <summary>
             Converts a Well-known Text representation to a <see cref="T:GeoAPI.Geometries.IGeometry"/> instance.
            </summary>
            <remarks>
            <para>The Well-Known Text (WKT) representation of Geometry is designed to exchange geometry data in ASCII form.</para>
            Examples of WKT representations of geometry objects are:
            <list type="table">
            <listheader><term>Geometry </term><description>WKT Representation</description></listheader>
            <item><term>A Point</term>
            <description>POINT(15 20)<br/> Note that point coordinates are specified with no separating comma.</description></item>
            <item><term>A LineString with four points:</term>
            <description>LINESTRING(0 0, 10 10, 20 25, 50 60)</description></item>
            <item><term>A Polygon with one exterior ring and one interior ring:</term>
            <description>POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))</description></item>
            <item><term>A MultiPoint with three Point values:</term>
            <description>MULTIPOINT(0 0, 20 20, 60 60)</description></item>
            <item><term>A MultiLineString with two LineString values:</term>
            <description>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</description></item>
            <item><term>A MultiPolygon with two Polygon values:</term>
            <description>MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))</description></item>
            <item><term>A GeometryCollection consisting of two Point values and one LineString:</term>
            <description>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.Parse(System.String)">
            <summary>
            Converts a Well-known text representation to a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="wellKnownText">A <see cref="T:GeoAPI.Geometries.IGeometry"/> tagged text string ( see the OpenGIS Simple Features Specification.</param>
            <returns>Returns a <see cref="T:GeoAPI.Geometries.IGeometry"/> specified by wellKnownText.  Throws an exception if there is a parsing problem.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.Parse(System.IO.TextReader)">
            <summary>
            Converts a Well-known Text representation to a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="reader">A Reader which will return a Geometry Tagged Text
            string (see the OpenGIS Simple Features Specification)</param>
            <returns>Returns a <see cref="T:GeoAPI.Geometries.IGeometry"/> read from StreamReader. 
            An exception will be thrown if there is a parsing problem.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetCoordinates(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next array of Coordinates in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text format.  The
            next element returned by the stream should be "(" (the beginning of "(x1 y1, x2 y2, ..., xn yn)" or
            "EMPTY".</param>
            <returns>The next array of Coordinates in the stream, or an empty array of "EMPTY" is the
            next element returned by the stream.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextNumber(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next number in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known text format.  The next token
            must be a number.</param>
            <returns>Returns the next number in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not a number.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextEmptyOrOpener(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next "EMPTY" or "(" in the stream as uppercase text.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be "EMPTY" or "(".</param>
            <returns>the next "EMPTY" or "(" in the stream as uppercase
            text.</returns>
            <remarks>
            ParseException is thrown if the next token is not "EMPTY" or "(".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextCloserOrComma(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next ")" or "," in the stream.
            </summary>
            <param name="tokenizer">tokenizer over a stream of text in Well-known Text
            format. The next token must be ")" or ",".</param>
            <returns>Returns the next ")" or "," in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not ")" or ",".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextCloser(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next ")" in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be ")".</param>
            <returns>Returns the next ")" in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not ")".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextWord(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next word in the stream as uppercase text.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be a word.</param>
            <returns>Returns the next word in the stream as uppercase text.</returns>
            <remarks>
            Exception is thrown if the next token is not a word.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadGeometryTaggedText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Geometry using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Geometry Tagged Text&gt;.</param>
            <returns>Returns a Geometry specified by the next token in the stream.</returns>
            <remarks>
            Exception is thrown if the coordinates used to create a Polygon
            shell and holes do not form closed linestrings, or if an unexpected
            token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiPolygonText(SharpMap.Converters.WellKnownText.WktStreamTokenizer,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.IMultiPolygon"/> using the next token in the stream.
            </summary>
            <param name="tokenizer">tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a MultiPolygon.</param>
            <param name="factory">The factory to create the result geometry</param>
            <returns>a <code>MultiPolygon</code> specified by the next token in the 
            stream, or if if the coordinates used to create the <see cref="T:GeoAPI.Geometries.IPolygon"/>
            shells and holes do not form closed linestrings.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadPolygonText(SharpMap.Converters.WellKnownText.WktStreamTokenizer,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a Polygon using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
             format. The next tokens must form a &lt;Polygon Text&gt;.</param>
            <param name="factory">The factory to create the result geometry</param>
            <returns>Returns a Polygon specified by the next token
             in the stream</returns>
             <remarks>
             ParseException is thrown if the coordinates used to create the Polygon
             shell and holes do not form closed linestrings, or if an unexpected
             token is encountered.
             </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadPointText(SharpMap.Converters.WellKnownText.WktStreamTokenizer,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a Point using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Point Text&gt;.</param>
            <param name="factory">The factory to create the result geometry</param>
            <returns>Returns a Point specified by the next token in
            the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiPointText(SharpMap.Converters.WellKnownText.WktStreamTokenizer,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a Point using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Point Text&gt;.</param>
            <param name="factory">The factory to create the result geometry</param>
            <returns>Returns a Point specified by the next token in
            the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiLineStringText(SharpMap.Converters.WellKnownText.WktStreamTokenizer,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.IMultiLineString"/> using the next token in the stream. 
            </summary>
            <param name="tokenizer">tokenizer over a stream of text in Well-known Text format. The next tokens must form a MultiLineString Text</param>
            <param name="factory">The factory to create the result geometry</param>
            <returns>a <see cref="T:NetTopologySuite.Geometries.MultiLineString"/> specified by the next token in the stream</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadLineStringText(SharpMap.Converters.WellKnownText.WktStreamTokenizer,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a LineString using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text format.  The next
              tokens must form a LineString Text.</param>
            <param name="factory">The factory to create the result geometry</param>
            <returns>Returns a LineString specified by the next token in the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadGeometryCollectionText(SharpMap.Converters.WellKnownText.WktStreamTokenizer,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <see cref="T:NetTopologySuite.Geometries.GeometryCollection"/> using the next token in the stream.
            </summary>
            <param name="tokenizer"> Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a GeometryCollection Text.</param>
            <param name="factory">The factory to create the result geometry</param>
            <returns>
            A <see cref="T:NetTopologySuite.Geometries.GeometryCollection"/> specified by the next token in the stream.</returns>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.GeometryToWKT">
            <summary>
            Outputs the textual representation of a <see cref="T:GeoAPI.Geometries.IGeometry"/> instance.
            </summary>
            <remarks>
            <para>The Well-Known Text (WKT) representation of Geometry is designed to exchange geometry data in ASCII form.</para>
            Examples of WKT representations of geometry objects are:
            <list type="table">
            <listheader><term>Geometry </term><description>WKT Representation</description></listheader>
            <item><term>A Point</term>
            <description>POINT(15 20)<br/> Note that point coordinates are specified with no separating comma.</description></item>
            <item><term>A LineString with four points:</term>
            <description>LINESTRING(0 0, 10 10, 20 25, 50 60)</description></item>
            <item><term>A Polygon with one exterior ring and one interior ring:</term>
            <description>POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))</description></item>
            <item><term>A MultiPoint with three Point values:</term>
            <description>MULTIPOINT(0 0, 20 20, 60 60)</description></item>
            <item><term>A MultiLineString with two LineString values:</term>
            <description>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</description></item>
            <item><term>A MultiPolygon with two Polygon values:</term>
            <description>MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))</description></item>
            <item><term>A GeometryCollection consisting of two Point values and one LineString:</term>
            <description>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Converts a Geometry to its Well-known Text representation.
            </summary>
            <param name="geometry">A Geometry to write.</param>
            <returns>A &lt;Geometry Tagged Text&gt; string (see the OpenGIS Simple
             Features Specification)</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.Write(GeoAPI.Geometries.IGeometry,System.IO.StringWriter)">
            <summary>
            Converts a Geometry to its Well-known Text representation.
            </summary>
            <param name="geometry">A geometry to process.</param>
            <param name="writer">Stream to write out the geometry's text representation.</param>
            <remarks>
            Geometry is written to the output stream as &lt;Geometry Tagged Text&gt; string (see the OpenGIS
            Simple Features Specification).
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryTaggedText(GeoAPI.Geometries.IGeometry,System.IO.StringWriter)">
            <summary>
            Converts a Geometry to &lt;Geometry Tagged Text &gt; format, then Appends it to the writer.
            </summary>
            <param name="geometry">The Geometry to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPointTaggedText(GeoAPI.Geometries.IPoint,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to &lt;Point Tagged Text&gt; format,
            then Appends it to the writer.
            </summary>
            <param name="coordinate">the <code>Coordinate</code> to process</param>
            <param name="writer">the output writer to Append to</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendLineStringTaggedText(GeoAPI.Geometries.ILineString,System.IO.StringWriter)">
            <summary>
            Converts a LineString to LineString tagged text format, 
            </summary>
            <param name="lineString">The LineString to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPolygonTaggedText(GeoAPI.Geometries.IPolygon,System.IO.StringWriter)">
            <summary>
             Converts a Polygon to &lt;Polygon Tagged Text&gt; format,
             then Appends it to the writer.
            </summary>
            <param name="polygon">Th Polygon to process.</param>
            <param name="writer">The stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPointTaggedText(GeoAPI.Geometries.IMultiPoint,System.IO.StringWriter)">
            <summary>
            Converts a MultiPoint to &lt;MultiPoint Tagged Text&gt;
            format, then Appends it to the writer.
            </summary>
            <param name="multipoint">The MultiPoint to process.</param>
            <param name="writer">The output writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiLineStringTaggedText(GeoAPI.Geometries.IMultiLineString,System.IO.StringWriter)">
            <summary>
            Converts a MultiLineString to &lt;MultiLineString Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="multiLineString">The MultiLineString to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPolygonTaggedText(GeoAPI.Geometries.IMultiPolygon,System.IO.StringWriter)">
            <summary>
            Converts a MultiPolygon to &lt;MultiPolygon Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="multiPolygon">The MultiPolygon to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryCollectionTaggedText(GeoAPI.Geometries.IGeometryCollection,System.IO.StringWriter)">
            <summary>
            Converts a GeometryCollection to &lt;GeometryCollection Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="geometryCollection">The GeometryCollection to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPointText(GeoAPI.Geometries.IPoint,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to Point Text format then Appends it to the writer.
            </summary>
            <param name="coordinate">The Coordinate to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendCoordinate(GeoAPI.Geometries.Coordinate,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to &lt;Point&gt; format, then Appends
            it to the writer. 
            </summary>
            <param name="coordinate">The Coordinate to process.</param>
            <param name="writer">The output writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.WriteNumber(System.Double)">
            <summary>
            Converts a double to a string, not in scientific notation.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>The double as a string, not in scientific notation.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendLineStringText(GeoAPI.Geometries.ILineString,System.IO.StringWriter)">
            <summary>
            Converts a LineString to &lt;LineString Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="lineString">The LineString to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPolygonText(GeoAPI.Geometries.IPolygon,System.IO.StringWriter)">
            <summary>
            Converts a Polygon to &lt;Polygon Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="polygon">The Polygon to process.</param>
            <param name="writer"></param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPointText(GeoAPI.Geometries.IMultiPoint,System.IO.StringWriter)">
            <summary>
            Converts a MultiPoint to &lt;MultiPoint Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="multiPoint">The MultiPoint to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiLineStringText(GeoAPI.Geometries.IMultiLineString,System.IO.StringWriter)">
            <summary>
            Converts a MultiLineString to &lt;MultiLineString Text&gt;
            format, then Appends it to the writer.
            </summary>
            <param name="multiLineString">The MultiLineString to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPolygonText(GeoAPI.Geometries.IMultiPolygon,System.IO.StringWriter)">
            <summary>
            Converts a MultiPolygon to &lt;MultiPolygon Text&gt; format, then Appends to it to the writer.
            </summary>
            <param name="multiPolygon">The MultiPolygon to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryCollectionText(GeoAPI.Geometries.IGeometryCollection,System.IO.StringWriter)">
            <summary>
            Converts a GeometryCollection to &lt;GeometryCollection Text &gt; format, then Appends it to the writer.
            </summary>
            <param name="geometryCollection">The GeometryCollection to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.SpatialReference">
            <summary>
            Converts spatial reference IDs to a Well-Known Text representation.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.SpatialReference.SridToWkt(System.Int32)">
            <summary>
            Converts a Spatial Reference ID to a Well-known Text representation
            </summary>
            <param name="srid">Spatial Reference ID</param>
            <returns>Well-known text</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.SpatialReference.SridToProj4(System.Int32)">
            <summary>
            Converts a Spatial Reference ID to a Well-known Text representation
            </summary>
            <param name="srid">Spatial Reference ID</param>
            <returns>Well-known text</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.SpatialReference.GetAllReferenceSystems">
            <summary>
            Returns an IEnumerable with all the SRID/WKT pairs known. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.IO.StreamTokenizer">
            <summary>
            The StreamTokenizer class takes an input stream and parses it into "tokens", allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment style
            </summary>
            <remarks>
            This is a crude c# implementation of Java's <a href="http://java.sun.com/products/jdk/1.2/docs/api/java/io/StreamTokenizer.html">StreamTokenizer</a> class.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamTokenizer class.
            </summary>
            <param name="reader">A TextReader with some text to read.</param>
            <param name="ignoreWhitespace">Flag indicating whether whitespace should be ignored.</param>
        </member>
        <member name="P:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.LineNumber">
            <summary>
            The current line number of the stream being read.
            </summary>
        </member>
        <member name="P:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.Column">
            <summary>
            The current column number of the stream being read.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetNumericValue">
            <summary>
            If the current token is a number, this field contains the value of that number.
            </summary>
            <remarks>
            If the current token is a number, this field contains the value of that number. The current token is a number when the value of the ttype field is TT_NUMBER.
            </remarks>
            <exception cref="T:System.FormatException">Current token is not a number in a valid format.</exception>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetStringValue">
            <summary>
            If the current token is a word token, this field contains a string giving the characters of the word token.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetTokenType">
            <summary>
            Gets the token type of the current token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextToken(System.Boolean)">
            <summary>
            Returns the next token.
            </summary>
            <param name="ignoreWhitespace">Determines is whitespace is ignored. True if whitespace is to be ignored.</param>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextToken">
            <summary>
            Returns the next token.
            </summary>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetType(System.Char)">
            <summary>
            Determines a characters type (e.g. number, symbols, character).
            </summary>
            <param name="character">The character to determine.</param>
            <returns>The TokenType the character is.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextNonWhitespaceToken">
            <summary>
            Returns next token that is not whitespace.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.TokenType">
            <summary>
            Represents the type of token created by the StreamTokenizer class.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Word">
            <summary>
            Indicates that the token is a word.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Number">
            <summary>
            Indicates that the token is a number. 
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Eol">
            <summary>
            Indicates that the end of line has been read. The field can only have this value if the eolIsSignificant method has been called with the argument true. 
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Eof">
            <summary>
            Indicates that the end of the input stream has been reached.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Whitespace">
            <summary>
            Indicates that the token is white space (space, tab, newline).
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Symbol">
            <summary>
            Characters that are not whitespace, numbers, etc...
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.WktStreamTokenizer">
            <summary>
            Reads a stream of Well Known Text (wkt) string and returns a stream of tokens.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the WktStreamTokenizer class.
            </summary>
            <remarks>The WktStreamTokenizer class aids in reading WKT streams.</remarks>
            <param name="reader">A TextReader that contains </param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadToken(System.String)">
            <summary>
            Reads a token and checks it is what is expected.
            </summary>
            <param name="expectedToken">The expected token.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadDoubleQuotedWord">
            <summary>
            Reads a string inside double quotes.
            </summary>
            <remarks>
            White space inside quotes is preserved.
            </remarks>
            <returns>The string inside the double quotes.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadAuthority(System.String@,System.Int64@)">
            <summary>
            Reads the authority and authority code.
            </summary>
            <param name="authority">String to place the authority in.</param>
            <param name="authorityCode">String to place the authority code in.</param>
        </member>
        <member name="T:SharpMap.CoordinateSystems.AxisOrderRegistry">
            <summary>
            A registry for the axis order of coordinate systems as defined in EPSG 8.4 dataset
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AxisOrderRegistry.Item(System.String)">
            <summary>
            Gets the axis order for *all* EPSG defined coordinate reference systems with an srid less than 32768
            </summary>
            <param name="identifier">The identifier</param>
            <returns>The axis order</returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.CoordinateSystemExtensions">
            <summary>
            Extension methods to get hold of coordinate systems
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemExtensions.GetCoordinateSystem(SharpMap.Map)">
            <summary>
            Gets a coordinate system for the map based on the <see cref="P:SharpMap.Map.SRID"/> property
            </summary>
            <param name="self">The map</param>
            <returns>A coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemExtensions.GetCoordinateSystem(SharpMap.Layers.ILayer)">
            <summary>
            Gets a coordinate system for the map based on the <see cref="P:SharpMap.Layers.ILayer.SRID"/> property
            </summary>
            <param name="self">The layer</param>
            <returns>A coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemExtensions.GetCoordinateSystem(SharpMap.Data.Providers.IProvider)">
            <summary>
            Gets a coordinate system for the map based on the <see cref="P:SharpMap.Data.Providers.IBaseProvider.SRID"/> property
            </summary>
            <param name="self">The provider</param>
            <returns>A coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemExtensions.GetCoordinateSystem(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets a coordinate system for the map based on the <see cref="P:GeoAPI.Geometries.IGeometry.SRID"/> property
            </summary>
            <param name="self">The layer</param>
            <returns>A coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemExtensions.GetFactory(SharpMap.Map)">
            <summary>
            Method to get a <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> for the specified <paramref name="self">map</paramref>
            </summary>
            <param name="self">The map</param>
            <returns>A geometry factory</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemExtensions.GetFactory(SharpMap.Layers.ILayer)">
            <summary>
            Method to get a <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> for the specified <paramref name="self">layer</paramref>
            </summary>
            <param name="self">The layer</param>
            <returns>A geometry factory</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemExtensions.GetFactory(SharpMap.Data.Providers.IProvider)">
            <summary>
            Method to get a <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> for the specified <paramref name="self">provider</paramref>
            </summary>
            <param name="self">The provider</param>
            <returns>A geometry factory</returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.CoordinateSystemServices">
            <summary>
            A coordinate system services class
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.#ctor(GeoAPI.CoordinateSystems.ICoordinateSystemFactory,GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory)">
            <summary>
            Creates an instance of this class using the provided <paramref name="coordinateSystemFactory"/>, 
            <paramref name="coordinateTransformationFactory"/> and enumeration of 
            </summary>
            <param name="coordinateSystemFactory">The factory to use for creating a coordinate system.</param>
            <param name="coordinateTransformationFactory">The factory to use for creating a coordinate transformation.</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.#ctor(GeoAPI.CoordinateSystems.ICoordinateSystemFactory,GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.String}})">
            <summary>
            Creates an instance of this class using the provided <paramref name="coordinateSystemFactory"/>, 
            <paramref name="coordinateTransformationFactory"/> and enumeration of 
            </summary>
            <param name="coordinateSystemFactory">The factory to use for creating a coordinate system.</param>
            <param name="coordinateTransformationFactory">The factory to use for creating a coordinate transformation.</param>
            <param name="enumerable">An enumeration if spatial reference ids and coordinate system definition strings pairs</param>
        </member>
        <member name="P:SharpMap.CoordinateSystems.CoordinateSystemServices.IsReadOnly">
            <summary>
            Gets a value indicating that this coordinate system repository is readonly
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.CreateCoordinateSystem(System.String)">
            <summary>
            Method to create a coordinate system based on the <paramref name="wellKnownText"/> coordinate system definition.
            </summary>
            <param name="wellKnownText"></param>
            <returns>A coordinate system, <value>null</value> if no coordinate system could be created.</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.RemoveCoordinateSystem(System.Int32)">
            <summary>
            Method to remove a coordinate system form the service by its <paramref name="srid"/> identifier
            </summary>
            <param name="srid">The identifier of the coordinate system to remove</param>
            <returns><value>true</value> if the coordinate system was removed successfully, otherwise <value>false</value></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.GetCoordinateSystem(System.Int32)">
            <summary>
            Returns the coordinate system by <paramref name="srid"/> identifier
            </summary>
            <param name="srid">The initialization for the coordinate system</param>
            <returns>
            The coordinate system.
            </returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.GetCoordinateSystem(System.String,System.Int64)">
            <summary>
            Returns the coordinate system by <paramref name="authority"/> and <paramref name="code"/>.
            </summary>
            <param name="authority">The authority for the coordinate system</param><param name="code">The code assigned to the coordinate system by <paramref name="authority"/>.</param>
            <returns>
            The coordinate system.
            </returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.GetSRID(System.String,System.Int64)">
            <summary>
            Method to get the identifier, by which this coordinate system can be accessed.
            </summary>
            <param name="authority">The authority name</param><param name="authorityCode">The code assigned by <paramref name="authority"/></param>
            <returns>
            The identifier or 
            <value>
            null
            </value>
            </returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.CreateTransformation(System.Int32,System.Int32)">
            <summary>
            Method to create a coordinate tranformation between two spatial reference systems, defined by their identifiers
            </summary>
            <remarks>
            This is a convenience function for <see cref="M:GeoAPI.ICoordinateSystemServices.CreateTransformation(GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.ICoordinateSystem)"/>.
            </remarks>
            <param name="sourceSrid">The identifier for the source spatial reference system.</param><param name="targetSrid">The identifier for the target spatial reference system.</param>
            <returns>
            A coordinate transformation, 
            <value>
            null
            </value>
             if no transformation could be created.
            </returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.CreateTransformation(GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Method to create a coordinate tranformation between two spatial reference systems
            </summary>
            <param name="source">The source spatial reference system.</param><param name="target">The target spatial reference system.</param>
            <returns>
            A coordinate transformation, 
            <value>
            null
            </value>
             if no transformation could be created.
            </returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.Clear">
            <summary>
            Method to remove all coordinate systems from the service
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.CoordinateSystemServices.Count">
            <summary>
            Gets a value indicating the number of unique coordinate systems in the repository
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.AddCoordinateSystems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.String}})">
            <summary>
            Method to add an enumeration of spatial reference id and coordinate system definition pairs to the repository.
            </summary>
            <param name="coordinateSystems">An enumeration of spatial reference id and coordinate system definition pairs.</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.AddCoordinateSystem(System.Int32,GeoAPI.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Method to add <paramref name="coordinateSystem"/> to the service and register it with the <paramref name="srid"/> value.
            </summary>
            <param name="srid">The identifier for the <paramref name="coordinateSystem"/> in the store.</param>
            <param name="coordinateSystem">The coordinate system.</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemServices.FromSpatialRefSys(GeoAPI.CoordinateSystems.ICoordinateSystemFactory,GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory)">
            <summary>
            Creates a CoordinateSystemServices built with all the values coming from the SpatialRefSys.xml
            </summary>
            <param name="coordinateSystemFactory">A coordinate system factory</param>
            <param name="coordinateTransformationFactory">A coordinate transformation factory</param>
            <returns>A coordinate system services instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown, if either <paramref name="coordinateSystemFactory"/> or <paramref name="coordinateTransformationFactory"/> is null.</exception>
        </member>
        <member name="T:SharpMap.Data.FeatureDataSet">
            <summary>
            Represents an in-memory cache of spatial data. The FeatureDataSet is an extension of System.Data.DataSet
            </summary>
            <remarks>Serialization is achieved using the approach described in http://support.microsoft.com/kb/829740/en-us
            </remarks>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.#ctor">
            <summary>
            Initializes a new instance of the FeatureDataSet class.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the FeatureDataSet class.
            </summary>
            <param name="info">serialization info</param>
            <param name="context">streaming context</param>
        </member>
        <member name="P:SharpMap.Data.FeatureDataSet.Tables">
            <summary>
            Gets the collection of tables contained in the FeatureDataSet
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.Clone">
            <summary>
            Copies the structure of the FeatureDataSet, including all FeatureDataTable schemas, relations, and constraints. Does not copy any data. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRowChangeEventHandler">
            <summary>
            Represents the method that will handle the RowChanging, RowChanged, RowDeleting, and RowDeleted events of a FeatureDataTable. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SharpMap.Data.FeatureDataTable">
            <summary>
            Represents one feature table of in-memory spatial data. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.#ctor">
            <summary>
            Initializes a new instance of the FeatureDataTable class with no arguments.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of this class from serialization
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the FeatureDataTable class with the specified table name.
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.Count">
            <summary>
            Gets the number of rows in the table
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.Item(System.Int32)">
            <summary>
            Gets the feature data row at the specified index
            </summary>
            <param name="index">row index</param>
            <returns>FeatureDataRow</returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.GetEnumerator">
            <summary>
            Returns an enumerator for enumerating the rows of the FeatureDataTable
            </summary>
            <returns></returns>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowChanged">
            <summary>
            Occurs after a FeatureDataRow has been changed successfully. 
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowChanging">
            <summary>
            Occurs when a FeatureDataRow is changing. 
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowDeleted">
            <summary>
            Occurs after a row in the table has been deleted.
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowDeleting">
            <summary>
            Occurs before a row in the table is about to be deleted.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.AddRow(SharpMap.Data.FeatureDataRow)">
            <summary>
            Adds a row to the FeatureDataTable
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Clone">
            <summary>
            Clones the structure of the FeatureDataTable, including all FeatureDataTable schemas and constraints. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.CreateInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.NewRow">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table, based on a datarow builder
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.GetRowType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowChanged event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowChanging event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowDeleted event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowDeleting event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.RemoveRow(SharpMap.Data.FeatureDataRow)">
            <summary>
            Removes the row from the table
            </summary>
            <param name="row">Row to remove</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that holds the serialized data associated with the <see cref="T:System.Data.DataTable"/>.</param><param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DataTable"/>.</param><exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="T:SharpMap.Data.FeatureTableCollection">
            <summary>
            Represents the collection of tables for the FeatureDataSet.
            It is a proxy to the <see cref="P:System.Data.DataSet.Tables"/> object. 
            It filters out those <see cref="T:System.Data.DataTable"/> 
            that are <see cref="T:SharpMap.Data.FeatureDataTable"/>s.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureTableCollection.GetEnumerator">
            <iheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:SharpMap.Data.FeatureTableCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpMap.Data.FeatureTableCollection.Add(SharpMap.Data.FeatureDataTable)">
            <summary>
            Method to add a <see cref="T:SharpMap.Data.FeatureDataTable"/> to this set.
            </summary>
            <remarks>If <paramref name="item"/> belongs to a different <see cref="T:SharpMap.Data.FeatureDataSet"/>,
            this method attempts to remove it from that. If that is not possible, <paramref name="item"/> 
            is copied (<see cref="M:System.Data.DataTable.Copy"/>) and the copy is then added.
            </remarks>
            <param name="item">The feature data table to add</param>
        </member>
        <member name="M:SharpMap.Data.FeatureTableCollection.AddRange(System.Collections.Generic.IEnumerable{SharpMap.Data.FeatureDataTable})">
            <summary>
            Method to add a range of <see cref="T:SharpMap.Data.FeatureDataTable"/>s to the (Feature)DataTableCollection.
            </summary>
            <param name="items">The tables to add</param>
        </member>
        <member name="M:SharpMap.Data.FeatureTableCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:SharpMap.Data.FeatureTableCollection.Contains(SharpMap.Data.FeatureDataTable)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureTableCollection.CopyTo(SharpMap.Data.FeatureDataTable[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:SharpMap.Data.FeatureTableCollection.Remove(SharpMap.Data.FeatureDataTable)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:SharpMap.Data.FeatureTableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the feature data table at the provided index
            </summary>
            <param name="index">The index of the table to remove</param>
            <returns><c>true</c> if the table was successfully removed</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:SharpMap.Data.FeatureTableCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:SharpMap.Data.FeatureTableCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:SharpMap.Data.FeatureTableCollection.Item(System.Int32)">
            <summary>
            An indexer to the feature data tables in this set
            </summary>
            <param name="index">The index of the feature data table to get</param>
            <returns>The feature data table at index <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown, if the index is not in the valid range.</exception>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRow">
            <summary>
            Represents a row of data in a FeatureDataTable.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.#ctor(System.Data.DataRowBuilder)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="rb">The row builder</param>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRow.Geometry">
            <summary>
            The geometry of the current feature
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.IsFeatureGeometryNull">
            <summary>
            Returns true of the geometry is null
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.SetFeatureGeometryNull">
            <summary>
            Sets the geometry column to null
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRowChangeEventArgs">
            <summary>
            Occurs after a FeatureDataRow has been changed successfully.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRowChangeEventArgs.#ctor(SharpMap.Data.FeatureDataRow,System.Data.DataRowAction)">
            <summary>
            Initializes a new instance of the FeatureDataRowChangeEventArgs class.
            </summary>
            <param name="row"></param>
            <param name="action"></param>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRowChangeEventArgs.Row">
            <summary>
            Gets the row upon which an action has occurred.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRowChangeEventArgs.Action">
            <summary>
            Gets the action that has occurred on a FeatureDataRow.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.BaseProvider">
            <summary>
            Abstract base provider that handles geometry factory based on SRID
            </summary>
        </member>
        <member name="E:SharpMap.Data.Providers.BaseProvider.SridChanged">
            <summary>
            Event raised when <see cref="P:SharpMap.Data.Providers.BaseProvider.SRID"/> has changed
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.BaseProvider.Factory">
            <summary>
            Gets or sets the factory to create geometries.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.#ctor">
            <summary>
            Creates an instance of this class. The <see cref="P:SharpMap.Data.Providers.BaseProvider.ConnectionID"/> is set to <see cref="F:System.String.Empty"/>,
            the spatial reference id to <c>0</c> and an appropriate factory is chosen.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.#ctor(System.Int32)">
            <summary>
            Creates an instance of this class. The <see cref="P:SharpMap.Data.Providers.BaseProvider.ConnectionID"/> is set to <see cref="F:System.String.Empty"/>,
            the spatial reference id to <paramref name="srid"/> and an appropriate factory is chosen.
            </summary>
            <param name="srid">The spatial reference id</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.ReleaseManagedResources">
            <summary>
            Releases all managed resources
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.BaseProvider.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            <para>The ConnectionID should be unique to the datasource (for instance the filename or the
            connectionstring), and is meant to be used for connection pooling.</para>
            <para>If connection pooling doesn't apply to this datasource, the ConnectionID should return String.Empty</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.BaseProvider.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.BaseProvider.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.OnSridChanged(System.EventArgs)">
            <summary>
            Handler method to handle changes of <see cref="P:SharpMap.Data.Providers.BaseProvider.SRID"/>.
            </summary>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the features within the specified <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="bbox"></param>
            <returns>Features within the specified <see cref="T:GeoAPI.Geometries.Envelope"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns all objects whose <see cref="T:GeoAPI.Geometries.Envelope"/> intersects 'bbox'.
            </summary>
            <remarks>
            This method is usually much faster than the QueryFeatures method, because intersection tests
            are performed on objects simplified by their <see cref="T:GeoAPI.Geometries.Envelope"/>, and using the Spatial Index
            </remarks>
            <param name="bbox">Box that objects should intersect</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.OnBeginExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry)">
            <summary>
            Method to perform preparatory things for executing an intersection query against the data source
            </summary>
            <param name="geom">The geometry to use as filter.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.OnExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Method to perform the intersection query against the data source
            </summary>
            <param name="geom">The geometry to use as filter</param>
            <param name="ds">The feature data set to store the results in</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.OnEndExecuteIntersectionQuery">
            <summary>
            Method to do cleanup work after having performed the intersection query against the data source
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.GetFeatureCount">
            <summary>
            Function to return the total number of features in the dataset
            </summary>
            <returns>The number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.GetFeature(System.UInt32)">
            <summary>
            Function to return a <see cref="T:SharpMap.Data.FeatureDataRow"/> based on <paramref name="rowId">RowID</paramref>
            </summary>
            <param name="rowId">The unique identifier of the row</param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.GetExtents">
            <summary>
            Function to return the <see cref="T:GeoAPI.Geometries.Envelope"/> of dataset
            </summary>
            <returns>The extent of the dataset</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider.CloneTableStructure(SharpMap.Data.FeatureDataTable)">
            <summary>
            Method to clone the feature data tables schema.
            </summary>
            <param name="baseTable">The feature data table</param>
            <returns>An empty feature data table, having the same schema as <paramref name="baseTable"/></returns>
        </member>
        <member name="T:SharpMap.Data.Providers.BaseProvider`1">
            <summary>
            Abstract base provider that handles geometry factory based on SRID
            </summary>
        </member>
        <member name="E:SharpMap.Data.Providers.BaseProvider`1.SridChanged">
            <summary>
            Event raised when <see cref="P:SharpMap.Data.Providers.BaseProvider`1.SRID"/> has changed
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.BaseProvider`1.Factory">
            <summary>
            Gets or sets the factory to create geometries.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.#ctor">
            <summary>
            Creates an instance of this class. The <see cref="P:SharpMap.Data.Providers.BaseProvider`1.ConnectionID"/> is set to <see cref="F:System.String.Empty"/>,
            the spatial reference id to <c>0</c> and an appropriate factory is chosen.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of this class. The <see cref="P:SharpMap.Data.Providers.BaseProvider`1.ConnectionID"/> is set to <see cref="F:System.String.Empty"/>,
            the spatial reference id to <paramref name="srid"/> and an appropriate factory is chosen.
            </summary>
            <param name="srid">The spatial reference id</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.ReleaseManagedResources">
            <summary>
            Releases all managed resources
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.BaseProvider`1.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            <para>The ConnectionID should be unique to the datasource (for instance the filename or the
            connectionstring), and is meant to be used for connection pooling.</para>
            <para>If connection pooling doesn't apply to this datasource, the ConnectionID should return String.Empty</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.BaseProvider`1.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.BaseProvider`1.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.OnSridChanged(System.EventArgs)">
            <summary>
            Handler method to handle changes of <see cref="P:SharpMap.Data.Providers.BaseProvider`1.SRID"/>.
            </summary>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the features within the specified <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="bbox"></param>
            <returns>Features within the specified <see cref="T:GeoAPI.Geometries.Envelope"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns all objects whose <see cref="T:GeoAPI.Geometries.Envelope"/> intersects 'bbox'.
            </summary>
            <remarks>
            This method is usually much faster than the QueryFeatures method, because intersection tests
            are performed on objects simplified by their <see cref="T:GeoAPI.Geometries.Envelope"/>, and using the Spatial Index
            </remarks>
            <param name="bbox">Box that objects should intersect</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.GetGeometryByID(`0)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.OnBeginExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry)">
            <summary>
            Method to perform preparatory things for executing an intersection query against the data source
            </summary>
            <param name="geom">The geometry to use as filter.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.OnExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Method to perform the intersection query against the data source
            </summary>
            <param name="geom">The geometry to use as filter</param>
            <param name="ds">The feature data set to store the results in</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.OnEndExecuteIntersectionQuery">
            <summary>
            Method to do cleanup work after having performed the intersection query against the data source
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.GetFeatureCount">
            <summary>
            Function to return the total number of features in the dataset
            </summary>
            <returns>The number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.GetFeature(`0)">
            <summary>
            Function to return a <see cref="T:SharpMap.Data.FeatureDataRow"/> based on <paramref name="rowId">RowID</paramref>
            </summary>
            <param name="rowId">The unique identifier of the row</param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.GetExtents">
            <summary>
            Function to return the <see cref="T:GeoAPI.Geometries.Envelope"/> of dataset
            </summary>
            <returns>The extent of the dataset</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.BaseProvider`1.CloneTableStructure(SharpMap.Data.FeatureDataTable)">
            <summary>
            Method to clone the feature data tables schema.
            </summary>
            <param name="baseTable">The feature data table</param>
            <returns>An empty feature data table, having the same schema as <paramref name="baseTable"/></returns>
        </member>
        <member name="T:SharpMap.Data.Providers.SharpMapFeatureColumn">
            <summary>
            Feature column class
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumn.#ctor">
            <summary>
            Default constructor, forcing <seealso cref="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Display"/> to be <value>true</value> by default
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Column">
            <summary>
            Gets or sets the name of the column to get from the table
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Ordinal">
            <summary>
            Gets or sets the ordinal (index)
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SharpMapFeatureColumn.As">
            <summary>
            Gets or sets the name the <see cref="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Column"/> should have in the output<br/>
            If this is <c>null</c> or <c>string.Empty</c>, <see cref="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Column"/> remains unchanged.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Display">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Function">
            <summary>
            The name of the function to apply to <see cref="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Column"/>
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SharpMapFeatureColumn.FunctionParameters">
            <summary>
            The additional parameters
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SharpMapFeatureColumn.GroupBy">
            <summary>
            Gets or sets whether this column should appear in the group by section
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SharpMapFeatureColumn.OrderBy">
            <summary>
            Gets or sets the order applied to the <see cref="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Column"/>
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Constraint">
            <summary>
            A constraint for the column
            </summary>
            <remarks>
            The constraint must be rhs of the column name, since it is added
            <code><see cref="M:SharpMap.Data.Providers.SpatialDbUtility.DecorateEntity(System.String)"/>(<see cref="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Column"/>) + <see cref="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Constraint"/></code>
            <para/>
            If a <see cref="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Function"/> is applied to <see cref="P:SharpMap.Data.Providers.SharpMapFeatureColumn.Column"/> that is included.
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.SharpMapFeatureColumn.DbType">
            <summary>
            Gets or sets the type used in database
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.SharpMapFeatureColumns">
            <summary>
            Collection of <see cref="T:SharpMap.Data.Providers.SharpMapFeatureColumn"/>s used to create the SQL statement
            </summary>
        </member>
        <member name="E:SharpMap.Data.Providers.SharpMapFeatureColumns.FeatureColumnsChanged">
            <summary>
            Event raised when the Feature column
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.#ctor(SharpMap.Data.Providers.SpatialDbProvider,SharpMap.Data.Providers.SpatialDbUtility)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="provider">The provider</param>
            <param name="dbUtility">The db utility object</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.InsertItem(System.Int32,SharpMap.Data.Providers.SharpMapFeatureColumn)">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.SetItem(System.Int32,SharpMap.Data.Providers.SharpMapFeatureColumn)">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetSelectClause">
            <summary>
            Gets the main select clause
            </summary>
            <returns>The plain select clause without any constraints or order clauses</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetSelectClause(System.String)">
            <summary>
            Gets the main select clause
            </summary>
            <param name="from">The from clause to use (if it is not schema.table)</param>
            <returns>The plain select clause without any constraints or order clauses</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetSelectColumnClause(System.Data.Common.DbCommand,SharpMap.Data.Providers.SharpMapFeatureColumn)">
            <summary>
            Gets a select clause for querying a column (mainly the geometry column is our focus)
            </summary>
            <param name="command">The command object</param>
            <param name="column">The column</param>
            <returns>The sql string to select the column</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetSelectColumnClause(System.Data.Common.DbCommand,SharpMap.Data.Providers.SharpMapFeatureColumn,System.UInt32)">
            <summary>
            Gets a select clause for querying a column (mainly the geometry column is our focus)
            </summary>
            <param name="command">The command object</param>
            <param name="column">The column</param>
            <param name="oid">The (optional) object id constraint</param>
            <returns>The sql string to select the column</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetSelectColumnClause(System.Data.Common.DbCommand,SharpMap.Data.Providers.SharpMapFeatureColumn,System.String)">
            <summary>
            Gets a select clause for querying a column (mainly the geometry column is our focus)
            </summary>
            <param name="command">The command object</param>
            <param name="column">The column</param>
            <param name="spatialWhere">The (optional) spatial constraint</param>
            <returns>The sql string to select the column</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetSelectColumnClause(System.Data.Common.DbCommand,SharpMap.Data.Providers.SharpMapFeatureColumn,System.UInt32,System.String)">
            <summary>
            Gets a select clause for querying a column (mainly the geometry column is our focus)
            </summary>
            <param name="command">The command object</param>
            <param name="column">The column</param>
            <param name="oid">The (optional) object id constraint</param>
            <param name="spatialWhere">The (optional) spatial constraint</param>
            <returns>The sql string to select the column</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetWhereClause">
            <summary>
            Gets the where clause
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetWhereClause(System.String)">
            <summary>
            Gets the where clause
            </summary>
            <param name="spatialWhere">An optional spatial constraint</param>
            <returns>The </returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetOrderByClause">
            <summary>
            Gets the SQL ORDER BY clause.
            </summary>
            <returns>The order by</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetGroupByClause">
            <summary>
            Gets the SQL GROUP BY clause
            </summary>
            <returns>The group by clause</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetGeometryColumn">
            <summary>
            Gets the geometry column
            </summary>
            <returns>The geometry column.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SharpMapFeatureColumns.GetGeometryColumn(System.Boolean)">
            <summary>
            Gets the geometry column
            </summary>
            <param name="usAs">Uses AS</param>
            <returns>The geometry column.</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.SpatialDbProvider">
            <summary>
            Abstract provider for spatially enabled databases
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.DbUtility">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Data.Providers.SpatialDbUtility"/> class. 
            </summary>
            <remarks>This property can only be set once to a non-<value>null</value> value.</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.From">
            <summary>
            Gets the SQL-FROM statement
            </summary>
        </member>
        <member name="E:SharpMap.Data.Providers.SpatialDbProvider.SchemaChanged">
            <summary>
            Event raised when the database schema for this provider has changed;
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnSchemaChanged(System.EventArgs)">
            <summary>
            Method called when the <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.Schema"/> has been changed. This invokes the
            <see cref="E:SharpMap.Data.Providers.SpatialDbProvider.SchemaChanged"/> event.
            </summary>
            <param name="e">The arguments associated with the event</param>
        </member>
        <member name="E:SharpMap.Data.Providers.SpatialDbProvider.TableChanged">
            <summary>
            Event raised when the table for this provider has changed;
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnTableChanged(System.EventArgs)">
            <summary>
            Method called when the <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.Table"/> has been changed. This invokes the
            <see cref="E:SharpMap.Data.Providers.SpatialDbProvider.TableChanged"/> event.
            </summary>
            <param name="e">The arguments associated with the event</param>
        </member>
        <member name="E:SharpMap.Data.Providers.SpatialDbProvider.OidColumnChanged">
            <summary>
            Event raised when the object id (oid) column for this provider has changed;
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnOidColumnChanged(System.EventArgs)">
            <summary>
            Method called when the <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.ObjectIdColumn"/> has been changed. This invokes the
            <see cref="E:SharpMap.Data.Providers.SpatialDbProvider.OidColumnChanged"/> event.
            </summary>
            <param name="e">The arguments associated with the event</param>
        </member>
        <member name="E:SharpMap.Data.Providers.SpatialDbProvider.GeometryColumnChanged">
            <summary>
            Event raised when the geometry column for this provider has changed;
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnGeometryColumnChanged(System.EventArgs)">
            <summary>
            Method called when the <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.GeometryColumn"/> has been changed. This invokes the
            <see cref="E:SharpMap.Data.Providers.SpatialDbProvider.GeometryColumnChanged"/> event.
            </summary>
            <param name="e">The arguments associated with the event</param>
        </member>
        <member name="E:SharpMap.Data.Providers.SpatialDbProvider.DefinitionQueryChanged">
            <summary>
            Event raised when the feature columns string for this provider has changed;
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnDefinitionQueryChanged(System.EventArgs)">
            <summary>
            Method called when the <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.DefinitionQuery"/> has been changed. This invokes the
            <see cref="E:SharpMap.Data.Providers.SpatialDbProvider.DefinitionQueryChanged"/> event.
            </summary>
            <param name="e">The arguments associated with the event</param>
        </member>
        <member name="E:SharpMap.Data.Providers.SpatialDbProvider.FeatureColumnsChanged">
            <summary>
            Event raised when the <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.FeatureColumns"/> string for this provider has changed;
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnFeatureColumnsChanged(System.Object,System.EventArgs)">
            <summary>
            Method that handles when the <see cref="E:SharpMap.Data.Providers.SharpMapFeatureColumns.FeatureColumnsChanged"/> event. This invokes the
            <see cref="E:SharpMap.Data.Providers.SpatialDbProvider.FeatureColumnsChanged"/> event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The arguments associated with the event</param>
        </member>
        <member name="E:SharpMap.Data.Providers.SpatialDbProvider.TargetSridChanged">
            <summary>
            Event raised when the <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.TargetSRID"/> for this provider has changed;
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnTargetSridChanged(System.EventArgs)">
            <summary>
            Method called when the <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.TargetSRID"/> has been changed. This invokes the
            <see cref="E:SharpMap.Data.Providers.SpatialDbProvider.TargetSridChanged"/> event.
            </summary>
            <param name="e">The arguments associated with the event</param>
        </member>
        <member name="E:SharpMap.Data.Providers.SpatialDbProvider.AreaOfInterestChanged">
            <summary>
            Event raised when <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.AreaOfInterest"/> for this provider has changed
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnAreaOfInterestChanged(System.EventArgs)">
            <summary>
            Method called when the <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.AreaOfInterest"/> has been changed. This invokes the
            <see cref="E:SharpMap.Data.Providers.SpatialDbProvider.AreaOfInterestChanged"/> event.
            </summary>
            <param name="e">The arguments associated with the event</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.#ctor(SharpMap.Data.Providers.SpatialDbUtility,System.String,System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="spatialDbUtility">The spatial db utility class</param>
            <param name="connectionString">The connection string</param>
            <param name="table">The table name</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.#ctor(SharpMap.Data.Providers.SpatialDbUtility,System.String,System.String,System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="spatialDbUtility">The spatial db utility class</param>
            <param name="connectionString">The connection string</param>
            <param name="schema">The name of the schema</param>
            <param name="table">The table name</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.#ctor(SharpMap.Data.Providers.SpatialDbUtility,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="spatialDbUtility">The spatial db utility class</param>
            <param name="connectionString">The connection string</param>
            <param name="schema">The name of the schema</param>
            <param name="table">The table name</param>
            <param name="oidColumn">The object ID column</param>
            <param name="geometryColumn">The geometry column</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.ReleaseManagedResources">
            <summary>
            Releases all managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.CreateOpenDbConnection">
            <summary>
            Convenience function to create and open a connection to the database backend.
            </summary>
            <returns>An open connection to the database backend.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.CreateDataAdapter">
            <summary>
            Convenience function to create a data adapter.
            </summary>
            <returns>An open connection to the database backend.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.Initialize">
            <summary>
            Function to initialize the provider
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.InitializeInternal">
            <summary>
            Method to initialize the spatial provider
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.Schema">
            <summary>
            Gets or sets the name of the database schema
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.Table">
            <summary>
            Gets or sets the name oft the database table
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.ObjectIdColumn">
            <summary>
            Gets or sets the name oft the object id (oid) column
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.GeometryColumn">
            <summary>
            Gets or sets the name oft the geometry column
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.FeatureColumns">
            <summary>
            Gets or sets the name oft the geometry column
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.DefinitionQuery">
            <summary>
            Gets or sets the definition query
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.OrderQuery">
            <summary>
            Columns or T-SQL expressions for sorting (ORDER BY clause)
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.GeometryExpression">
            <summary>
            Expression template for geometry column evaluation.
            </summary>
            <example>
            You could, for instance, simplify your geometries before they're displayed.
            Simplification helps to speed the rendering of big geometries.
            Here's a sample code to simplify geometries using 100 meters of threshold.
            <code>
            datasource.GeometryExpression = "ST.Simplify({0}, 100)";
            </code>
            Also you could draw a 20 meters buffer around those little points:
            <code>
            datasource.GeometryExpression = "ST.Buffer({0}, 20)";
            </code>
            </example>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.AreaOfInterest">
            <summary>
            Gets or sets the area of interest. Setting this property
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.TargetSRID">
            <summary>
            Gets or sets the target SRID. Setting this helps to avoid using on-the-fly reprojection
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.NeedsTransform">
            <summary>
            Gets whether the provider needs to use the transform function
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetExtents">
            <summary>
            <see cref="T:GeoAPI.Geometries.Envelope"/> of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetExtentsInternal">
            <summary>
            Function to determine the extents of the datasource
            </summary>
            <returns>The extents</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetFeatureCountInternal">
            <summary>
            Method to get the number of features in the datasource
            </summary>
            <returns>The number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetFeature(System.UInt32)">
            <summary>
            Returns a <see cref="T:SharpMap.Data.FeatureDataRow"/> based on a RowID
            </summary>
            <param name="rowId">The id of the row</param>
            <returns>The feature data row</returns>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbProvider.Name">
            <summary>
            Gets a name describing the provider. This name is made up of <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.Schema"/>, <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.Table"/> and <see cref="P:SharpMap.Data.Providers.SpatialDbProvider.GeometryColumn"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.CreateNewTable">
            <summary>
            Function to create a new, empty <see cref="T:SharpMap.Data.FeatureDataTable"/>
            </summary>
            <returns>A feature data table</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.CreateNewTable(System.Boolean)">
            <summary>
            Function to create a new, empty <see cref="T:SharpMap.Data.FeatureDataTable"/>
            </summary>
            <param name="force">Value indicating that a new feature data table should be created, no matter what.</param>
            <returns>A feature data table</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetFeatureInternal(System.UInt32)">
            <summary>
            Function to get a specific feature from the database.
            </summary>
            <param name="oid">The object id</param>
            <returns>A feature data row</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetGeometryByID(System.UInt32)">
            <summary>
            Function to get a specific feature's geometry from the database.
            </summary>
            <param name="oid">The object id</param>
            <returns>A geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetGeometryByIDInternal(System.UInt32)">
            <summary>
            Function to get a specific feature's geometry from the database.
            </summary>
            <param name="oid">The object id</param>
            <returns>A geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the geometries of features that lie within the specified <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="bbox">The bounding box</param>
            <returns>Geometries within the specified <see cref="T:GeoAPI.Geometries.Envelope"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetGeometriesInViewInternal(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the geometries of features that lie within the specified <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="bbox">The bounding box</param>
            <returns>Geometries within the specified <see cref="T:GeoAPI.Geometries.Envelope"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetSpatialWhere(GeoAPI.Geometries.Envelope,System.Data.Common.DbCommand)">
            <summary>
            Function to generate a spatial where clause for the intersection queries.
            </summary>
            <param name="bbox">The bounding box</param>
            <param name="command">The command object, that is supposed to execute the query.</param>
            <returns>The spatial component of a SQL where clause</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetSpatialWhere(GeoAPI.Geometries.IGeometry,System.Data.Common.DbCommand)">
            <summary>
            Function to generate a spatial where clause for the intersection queries.
            </summary>
            <param name="bbox">The geometry</param>
            <param name="command">The command object, that is supposed to execute the query.</param>
            <returns>The spatial component of a SQL where clause</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the object of features that lie within the specified <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="bbox">The bounding box</param>
            <returns>A collection of object ids</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetObjectIDsInViewInternal(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the object ids of features that lie within the specified <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="bbox">The bounding box</param>
            <returns>A collection of object ids</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.ExecuteIntersectionQueryInternal(System.Object,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="spatialWhere">Geometry to intersect with</param>
            <param name="fds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetFrom(GeoAPI.Geometries.Envelope,System.Data.Common.DbCommand)">
            <summary>
            Method to generate a SQL-From statement for a bounding box query
            </summary>
            <param name="envelope">The envelope to query</param>
            <param name="command">The command object that is supposed to perform the query</param>
            <returns>A SQL From statement string</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.GetFrom(GeoAPI.Geometries.IGeometry,System.Data.Common.DbCommand)">
            <summary>
            Method to generate a SQL-From statement for a geometry query
            </summary>
            <param name="geometry">The envelope to query</param>
            <param name="command">The command object that is supposed to perform the query</param>
            <returns>A SQL From statement string</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnBeginExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry)">
            <summary>
            Method to perform preparatory things for executing an intersection query against the data source
            </summary>
            <param name="geom">The geometry to use as filter.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.ExecuteIntersectionQueryInternal(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Method to perform the actual intersection query against a bounding box
            </summary>
            <param name="box">The bounding box</param>
            <param name="ds">The feature data set to store the results in.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnBeginExecuteIntersectionQueryInternal(GeoAPI.Geometries.IGeometry)">
            <summary>
            Method to perform preparatory things for executing an intersection query against the data source
            </summary>
            <param name="geom">The geometry to use as filter.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Method to perform the intersection query against the data source
            </summary>
            <param name="geom">The geometry to use as filter</param>
            <param name="ds">The feature data set to store the results in</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbProvider.OnSridChanged(System.EventArgs)">
            <summary>
            Handler method to handle changes of <see cref="P:SharpMap.Data.Providers.BaseProvider.SRID"/>.
            </summary>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="T:SharpMap.Data.Providers.SpatialDbUtility">
            <summary>
            Database entity decorator object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.#ctor">
            <summary>
            Creates an instance of this class using the default decorator strings
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of this class using the provided decorator strings
            </summary>
            <param name="entityDecoratorFormat">The format string to decorate database entities</param>
            <param name="literalDecoratorFormat">The format string to decorate literals (strings)</param>
            <param name="parameterDecoratorFormat">The format string to decorate parameters</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.#ctor(System.String,System.String,System.String,GeoAPI.IO.IBinaryGeometryReader,GeoAPI.IO.IBinaryGeometryWriter)">
            <summary>
            Creates an instance of this class using the provided decorator strings
            </summary>
            <param name="entityDecoratorFormat">The format string to decorate database entities</param>
            <param name="literalDecoratorFormat">The format string to decorate literals (strings)</param>
            <param name="parameterDecoratorFormat">The format string to decorate parameters</param>
            <param name="reader"> </param>
            <param name="writer"> </param>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbUtility.EntityDecoratorFormat">
            <summary>
            Gets the database entity decorator format.
            <para/>
            For e.g. PostgreSQL that would be "\"{0}\"", so that a table named smTable would be decorated to "smTable"
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbUtility.LiteralDecoratorFormat">
            <summary>
            Gets the database literal (string) decorator
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbUtility.ParameterDecoratorFormat">
            <summary>
            Gets the database parameter decorator
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.DecorateEntity(System.String)">
            <summary>
            Function to decorate a database entity
            </summary>
            <param name="entity">The name of the entity</param>
            <returns>The decorated database entity</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.DecorateEntityConstraintWithParameter(System.Data.Common.DbCommand,SharpMap.Data.Providers.SharpMapFeatureColumn,System.String,System.Object[])">
            <summary>
            Decorates a constraint with parameters
            </summary>
            <param name="command">The command object to add the parameters to.</param>
            <param name="entity">The entity</param>
            <param name="constraint"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.DecorateTable(System.String,System.String)">
            <summary>
            Decorates the table name
            </summary>
            <returns>The decorated table name</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.DecorateTable(System.String,System.String,System.String)">
            <summary>
            Decorates the table name
            </summary>
            <returns>The decorated table name</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.DecorateColumn(System.String)">
            <summary>
            Decorates a column name, optionally with a prefix
            </summary>
            <param name="columnName">The column name</param>
            <returns>The decorated column name</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.DecorateColumn(System.String,System.String)">
            <summary>
            Decorates a column name, optionally with a prefix
            </summary>
            <param name="columnName">The column name</param>
            <param name="prefix">The (optional) prefix</param>
            <returns>The decorated column name</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.DecorateAs(System.String)">
            <summary>
            Renames an already decorated entity using the SQL AS statement
            </summary>
            <param name="decoratedEntity">The decorated entity</param>
            <returns>The decorated entity</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.DecorateAs(System.String,System.String)">
            <summary>
            Renames an already decorated entity using the SQL AS statement
            </summary>
            <param name="decoratedEntity">The decorated entity</param>
            <param name="asSuffix">The suffix</param>
            <returns>The decorated entity</returns>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbUtility.SetSridDecoratorFormat">
            <summary>
            Decorator for the function to assign a specific SRID value to a geometry
            </summary>
            <remarks>
            The format must have
            <list type="bullet">
            <item>a placeholder for the geometry ({0})</item>
            <item>a placeholder for the srid ({1})</item>
            </list>
            <example language="C#">
            //e.g. Postgis
            this.SetSridDecoratorFormat = "ST_SetSrid({0}, {1})";
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbUtility.TransformDecoratorFormat">
            <summary>
            Decorator for the format to transform a geometry to a specified
            </summary>
            <remarks>
            The format must have
            <list type="bullet">
            <item>a placeholder for the geometry ({0})</item>
            <item>a placeholder for the target srid ({1})</item>
            </list>
            <example language="C#">
            //e.g. Postgis
            this.TransformDecoratorFormat = "ST_Transform({0}, {1})";
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbUtility.ToGeometryDecoratorFormat">
            <summary>
            Decorator for the transformation of the geometry data, in case the
            <see cref="P:SharpMap.Data.Providers.SpatialDbUtility.Writer"/> produces a specific format (e.g. WKB) that does
            not match the backend's format.
            </summary>
            <remarks>
            The format must have
            <list type="bullet">
            <item>a placeholder for the geometry ({0})</item>
            </list>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbUtility.ToEnvelopeDecoratorFormat">
            <summary>
            Decorator for the transformation of the envelope data, in case the
            <see cref="P:SharpMap.Data.Providers.SpatialDbUtility.Reader"/> expects a specific format (e.g. WKB).
            </summary>
            <remarks>
            The format must have
            <list type="bullet">
            <item>a placeholder for the envelope ({0})</item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.SpatialDbUtility.ToDbType(System.Object,System.Data.DbType)">
            <summary>
            Converts <paramref name="obj"/> to the type required for the database
            </summary>
            <param name="obj">The object</param>
            <param name="type">The required type</param>
            <returns>The converted <paramref name="obj"/></returns>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbUtility.FromGeometryDecoratorFormat">
            <summary>
            Decorator for the transformation of the geometry data, in case the
            <see cref="P:SharpMap.Data.Providers.SpatialDbUtility.Reader"/> can only read a format (e.g. WKB) that does
            not match the backend's format.
            </summary>
            <remarks>
            The format must have
            <list type="bullet">
            <item>a placeholder for the geometry ({0})</item>
            </list>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbUtility.Reader">
            <summary>
            Reader for geometry data
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SpatialDbUtility.Writer">
            <summary>
            Writer for geometry
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.DbaseReader">
            <summary>
            Straight forward Dbase file reader
            </summary>
            <remarks>
            NOTE: This implementation assumes that the record 
            index starts with <b>0</b> (Zero) instead of 1.
            </remarks>
        </member>
        <member name="E:SharpMap.Data.Providers.DbaseReader.IncludeOidChanged">
            <summary>
            Event raised when the <see cref="P:SharpMap.Data.Providers.DbaseReader.IncludeOid"/> property has changed
            </summary>
        </member>
        <member name="E:SharpMap.Data.Providers.DbaseReader.EncodingChanged">
            <summary>
            Event raised when the <see cref="P:SharpMap.Data.Providers.DbaseReader.Encoding"/> property has changed
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="filename">The shapefile to open</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file is not present.</exception>
        </member>
        <member name="P:SharpMap.Data.Providers.DbaseReader.IsOpen">
            <summary>
            Gets a value indicating whether the Stream to the Dbase file is open or not.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.Open">
            <summary>
            Opens the dbase stream
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.Close">
            <summary>
            Closes the dbase file stream
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.Dispose">
            <summary>
            Method to perform cleanup work for unmanaged resources
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.CreateDbfIndex``1(System.Int32)">
            <summary>
            Indexes a DBF column in a binary tree [NOT COMPLETE]
            </summary>
            <typeparam name="T">datatype to be indexed</typeparam>
            <param name="columnId">Column to index</param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.Providers.DbaseReader.LastUpdate">
            <summary>
            Gets the date this file was last updated.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.RecordDeleted(System.UInt32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <returns></returns>
            <exception cref="T:System.ApplicationException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:SharpMap.Data.Providers.DbaseReader.CurrentRecordOid">
            <summary>
            Gets or sets the current object id
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the DBase file.
            </summary>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="P:SharpMap.Data.Providers.DbaseReader.IncludeOid">
            <summary>
            Gets or sets a value indicating whether the object's id should be included in attribute data or not. <para>The default value is <c>false</c></para>
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.OnIncludeOidChanged(System.EventArgs)">
            <summary>
            Event invoker for <see cref="E:SharpMap.Data.Providers.DbaseReader.IncludeOidChanged"/> event.
            </summary>
            <remarks>When overridden, make sure to call <c>base.OnIncludeOidChanged</c> in order to make sure that subscribers are notified.</remarks>
            <param name="e">The event's arguments</param>
        </member>
        <member name="P:SharpMap.Data.Providers.DbaseReader.NewTable">
            <summary>
            Gets an empty table that matches the dbase structure
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbaseReader.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding"/> used for parsing strings from the DBase DBF file.
            </summary>
            <remarks>
            If the encoding type isn't set, the dbase driver will try to determine the correct <see cref="T:System.Text.Encoding"/>.
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.OnEncodingChanged(System.EventArgs)">
            <summary>
            Event invoker for <see cref="E:SharpMap.Data.Providers.DbaseReader.EncodingChanged"/> event.
            </summary>
            <remarks>When overridden, make sure to call <c>base.OnEncodingChanged</c> in order to make sure that subscribers are notified.</remarks>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.GetFeature(System.UInt32,SharpMap.Data.FeatureDataTable)">
            <summary>
            Gets the feature at the specified Object ID
            </summary>
            <param name="oid">the object Id</param>
            <param name="table">the table to add the feature to</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.GetValues(System.UInt32)">
            <summary>
            Gets all attribute values for data record <paramref name="oid"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Data.Providers.DbPoint">
            <summary>
            The DbPoint provider is used for rendering point data from an ADO.NET compatible data source.
            </summary>
            <remarks>
            <para>The data source will need to have two double-type columns, xColumn and yColumn that contains the coordinates of the point,
            and an integer-type column containing a unique identifier for each row.</para>
            <para>To get good performance, make sure you have applied indexes on ID, xColumn and yColumns in your data source table.</para>
            <example>
            Adding a SQLite data source to a layer:
            <code lang="C#">
            Layers.VectorLayer myLayer = new Layers.VectorLayer("My layer");
            string connStr = @"Data Source=MyDatabaseFile.sqlite";
            myLayer.DataSource = new Data.Providers.DbPoint(System.Data.SQLite.SQLiteFactory.Instance, connStr, "myTable", "OidColumn", "X", "Y");
            </code>
            </example>
            <example>
            Adding a SQL Server datasource to a layer:
            <code lang="C#">
            Layers.VectorLayer myLayer = new Layers.VectorLayer("My layer");
            string connStr = @"Data Source=(local);Initial Catalog=MyDatabase;Integrated Security=True;";
            myLayer.DataSource = new Data.Providers.DbPoint(System.Data.SqlClient.SqlClientFactory.Instance, connStr, "myTable", "OidColumn", "X", "Y");
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.DbPoint.#ctor(System.Data.Common.DbProviderFactory,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DbPoint provider
            </summary>
            <param name="providerFactory">The ADO.NET database provider factory</param>
            <param name="connectionString">The connection string</param>
            <param name="tableName">The name of the table</param>
            <param name="oidColumnName">The name of the object id column</param>
            <param name="xColumn">The name of the x-ordinates column</param>
            <param name="yColumn">The name of the y-ordinates column</param>
        </member>
        <member name="P:SharpMap.Data.Providers.DbPoint.Table">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbPoint.ObjectIdColumn">
            <summary>
            Name of column that contains the Object ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbPoint.XColumn">
            <summary>
            Name of column that contains X coordinate
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbPoint.YColumn">
            <summary>
            Name of column that contains Y coordinate
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbPoint.ConnectionString">
            <summary>
            Gets or sets a value indicating the connection string
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbPoint.DbProvider">
            <summary>
            The <see cref="T:System.Data.Common.DbProviderFactory"/> used to create connections, commands etc.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbPoint.DefinitionQuery">
            <summary>
            Definition query used for limiting the data set
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbPoint.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns geometries within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbPoint.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbPoint.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbPoint.GetSpatialConstraint(GeoAPI.Geometries.Envelope)">
            <summary>
            Function to limit the points to the <paramref name="bbox"/>.
            </summary>
            <param name="bbox">The spatial predicate bounding box</param>
            <returns>A SQL string limiting the resultset based on an Envelope constraint.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbPoint.GetDefinitionQueryConstraint(System.Boolean)">
            <summary>
            Function to limit the features based on <see cref="P:SharpMap.Data.Providers.DbPoint.DefinitionQuery"/>
            </summary>
            <param name="addAnd">Defines if " AND " should be appended.</param>
            <returns>A SQL string limiting the resultset, if desired.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbPoint.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all features with the view box
            </summary>
            <param name="bbox">view box</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.DbPoint.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>Total number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbPoint.GetFeature(System.UInt32)">
            <summary>
            Returns a datarow based on a RowID
            </summary>
            <param name="rowId"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbPoint.GetExtents">
            <summary>
            Function to return the <see cref="T:GeoAPI.Geometries.Envelope"/> of dataset
            </summary>
            <returns>The extent of the dataset</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.DbTwoPointLine">
            <summary>
            The DbTwoPointLine provider is used for rendering line data from an ADO.NET compatible data source.
            </summary>
            <remarks>
            <para>The data source will need to have two double-type columns, xColumn and yColumn that contains the coordinates of the point,
            and an integer-type column containing a unique identifier for each row.</para>
            <para>To get good performance, make sure you have applied indexes on ID, xColumn and yColumns in your data source table.</para>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.#ctor(System.Data.Common.DbProviderFactory,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DbTwoPointLine provider
            </summary>
            <param name="provider">The ADO.NET database provider factory</param>
            <param name="connectionString">The connection string</param>
            <param name="tableName">The name of the table</param>
            <param name="oidColumnName">The name of the object id column</param>
            <param name="xColumnBegin">The name of the x-ordinates column of the beginning of the line</param>
            <param name="yColumnBegin">The name of the y-ordinates column of the beginning of the line</param>
            <param name="xColumnEnd">The name of the x-ordinates column of the end of the line</param>
            <param name="yColumnEnd">The name of the y-ordinates column of the end of the line</param>
        </member>
        <member name="P:SharpMap.Data.Providers.DbTwoPointLine.Table">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbTwoPointLine.ObjectIdColumn">
            <summary>
            Name of column that contains the Object ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbTwoPointLine.XColumnBegin">
            <summary>
            Name of column that contains X coordinate start
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbTwoPointLine.YColumnBegin">
            <summary>
            Name of column that contains Y coordinate start
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbTwoPointLine.XColumnEnd">
            <summary>
            Name of column that contains X coordinate start
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbTwoPointLine.YColumnEnd">
            <summary>
            Name of column that contains Y coordinate start
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbTwoPointLine.ConnectionString">
            <summary>
            Gets or sets a value indicating the connection string
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbTwoPointLine.EntityDecorator">
            <summary>
            Gets or sets an entity decorator.
            </summary>
            <remarks>
            For Access this would e.g. be &quot;[{0}]&quot;, for SQLite, Postgres or SqlServer &quot;\&quot;{0}\&quot;&quot;
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.DbTwoPointLine.DbProvider">
            <summary>
            The <see cref="T:System.Data.Common.DbProviderFactory"/> used to create connections, commands etc.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbTwoPointLine.DefinitionQuery">
            <summary>
            Definition query used for limiting data set
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns geometries within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.GetSpatialConstraint(GeoAPI.Geometries.Envelope)">
            <summary>
            Function to limit the points to the <paramref name="bbox"/>.
            </summary>
            <param name="bbox">The spatial predicate bounding box</param>
            <returns>A SQL string limiting the result set based on an Envelope constraint.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.GetMaxSql(System.String,System.String)">
            <summary>
            Function to build a Max function to return the maximum value of two column entities
            </summary>
            <param name="entity1">The first column entity</param>
            <param name="entity2">The second column entity</param>
            <returns>An SQL CASE string to mimic <see cref="M:System.Math.Max(System.Double,System.Double)"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.GetMinSql(System.String,System.String)">
            <summary>
            Function to build a Min function to return the maximum value of two column entities
            </summary>
            <param name="entity1">The first column entity</param>
            <param name="entity2">The second column entity</param>
            <returns>An SQL CASE string to mimic <see cref="M:System.Math.Min(System.Double,System.Double)"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.ToEntity(System.String)">
            <summary>
            Function to properly decorate a database entity e.g. (table-, query- or column name)
            </summary>
            <param name="name">The name or the database entity</param>
            <returns>The decorated entity</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.GetDefinitionQueryConstraint(System.Boolean)">
            <summary>
            Function to limit the features based on <see cref="P:SharpMap.Data.Providers.DbTwoPointLine.DefinitionQuery"/>
            </summary>
            <param name="addAnd">Defines if " AND " should be appended.</param>
            <returns>A SQL string limiting the resultset, if desired.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all features with the view box
            </summary>
            <param name="bbox">view box</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>Total number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.GetFeature(System.UInt32)">
            <summary>
            Returns a datarow based on a RowID
            </summary>
            <param name="rowId"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbTwoPointLine.GetExtents">
            <summary>
            Function to return the <see cref="T:GeoAPI.Geometries.Envelope"/> of dataset
            </summary>
            <returns>The extent of the dataset</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.FilterProvider">
            <summary>
            Abstract class for providers which support the FilterMethod Delegate
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.FilterProvider.FilterMethod">
            <summary>
            Filter Delegate Method
            </summary>
            <remarks>
            The FilterMethod delegate is used for applying a method that filters data from the dataset.
            The method should return 'true' if the feature should be included and false if not.
            <para>See the <see cref="P:SharpMap.Data.Providers.FilterProvider.FilterDelegate"/> property for more info</para>
            </remarks>
            <seealso cref="P:SharpMap.Data.Providers.FilterProvider.FilterDelegate"/>
            <param name="dr"><see cref="T:SharpMap.Data.FeatureDataRow"/> to test on</param>
            <returns>true if this feature should be included, false if it should be filtered</returns>
        </member>
        <member name="P:SharpMap.Data.Providers.FilterProvider.FilterDelegate">
            <summary>
            Filter Delegate Method for limiting the datasource
            </summary>
            <remarks>
            <example>
            Using an anonymous method for filtering all features where the NAME column starts with S:
            <code lang="C#">
            myShapeDataSource.FilterDelegate = new SharpMap.Data.Providers.ShapeFile.FilterMethod(delegate(SharpMap.Data.FeatureDataRow row) { return (!row["NAME"].ToString().StartsWith("S")); });
            </code>
            </example>
            <example>
            Declaring a delegate method for filtering (multi)polygon-features whose area is larger than 5.
            <code>
            myShapeDataSource.FilterDelegate = CountryFilter;
            [...]
            public static bool CountryFilter(SharpMap.Data.FeatureDataRow row)
            {
            	if(row.Geometry.GetType()==typeof(GeoAPI.Geometries.IPolygon))
            		return ((row.Geometry as GeoAPI.Geometries.IPolygon).Area>5);
            	if (row.Geometry.GetType() == typeof(GeoAPI.Geometries.IMultiPolygon))
            		return ((row.Geometry as GeoAPI.Geometries.IMultiPolygon).Area > 5);
            	else return true;
            }
            </code>
            </example>
            </remarks>
            <seealso cref="T:SharpMap.Data.Providers.FilterProvider.FilterMethod"/>
        </member>
        <member name="T:SharpMap.Data.Providers.GeometryFeatureProvider">
            <summary>
            Datasource for storing a limited set of geometries.
            </summary>
            <remarks>
            <para>The GeometryProvider doesn’t utilize performance optimizations of spatial indexing,
            and thus is primarily meant for rendering a limited set of Geometries.</para>
            <para>A common use of the GeometryProvider is for highlighting a set of selected features.</para>
            <example>
            The following example gets data within a BoundingBox of another datasource and adds it to the map.
            <code lang="C#">
            List&#60;Geometry&#62; geometries = myMap.Layers[0].DataSource.GetGeometriesInView(myBox);
            VectorLayer laySelected = new VectorLayer("Selected Features");
            laySelected.DataSource = new GeometryFeatureProvider(geometries);
            laySelected.Style.Outline = new Pen(Color.Magenta, 3f);
            laySelected.Style.EnableOutline = true;
            myMap.Layers.Add(laySelected);
            </code>
            </example>
            <example>
            Adding points of interest to the map. This is useful for vehicle tracking etc.
            <code lang="C#">
            GeoAPI.Geometries.IGeometryFactory gf = new NetTopologySuite.Geometries.GeometryFactory();
            List&#60;GeoAPI.Geometries.IGeometry&#62; geometries = new List&#60;GeoAPI.Geometries.IGeometry&#62;();
            //Add two points
            geometries.Add(gf.CreatePoint(23.345,64.325));
            geometries.Add(gf.CreatePoint(23.879,64.194));
            SharpMap.Layers.VectorLayer layerVehicles = new SharpMap.Layers.VectorLayer("Vehicles");
            layerVehicles.DataSource = new SharpMap.Data.Providers.GeometryFeatureProvider(geometries);
            layerVehicles.Style.Symbol = Bitmap.FromFile(@"C:\data\car.gif");
            myMap.Layers.Add(layerVehicles);
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="geometries">Set of geometries that this datasource should contain</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.#ctor(SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="features">Features to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="geometry">Geometry to be in this datasource</param>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryFeatureProvider.Features">
            <summary>
            Access to underlying <see cref="T:SharpMap.Data.FeatureDataTable"/>
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns features within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns all objects whose boundingbox intersects 'bbox'.
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Add datatable to dataset and populate with intersecting features (perform bounding box intersect followed by geom intersect)
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Add datatable to dataset and populate with interesecting features
            </summary>
            <param name="box"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetFeature(System.UInt32)">
            <summary>
            Gets a specific feature from the data source by its <paramref name="rowId"/>
            </summary>
            <param name="rowId">The row index or OID (if primary key enabled) of the feature</param>
            <returns>A feature data row</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryFeatureProvider.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            The ConnectionID is meant for Connection Pooling which doesn't apply to this datasource. Instead
            <c>String.Empty</c> is returned.
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryFeatureProvider.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryFeatureProvider.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.GeometryProvider">
            <summary>
            Datasource for storing a limited set of geometries.
            </summary>
            <remarks>
            <para>The GeometryProvider doesn’t utilize performance optimizations of spatial indexing,
            and thus is primarily meant for rendering a limited set of Geometries.</para>
            <para>A common use of the GeometryProvider is for highlighting a set of selected features.</para>
            <example>
            The following example gets data within a BoundingBox of another datasource and adds it to the map.
            <code lang="C#">
            List&#60;Geometry&#62; geometries = myMap.Layers[0].DataSource.GetGeometriesInView(myBox);
            VectorLayer laySelected = new VectorLayer("Selected Features");
            laySelected.DataSource = new GeometryProvider(geometries);
            laySelected.Style.Outline = new Pen(Color.Magenta, 3f);
            laySelected.Style.EnableOutline = true;
            myMap.Layers.Add(laySelected);
            </code>
            </example>
            <example>
            Adding points of interest to the map. This is useful for vehicle tracking etc.
            <code lang="C#">
            GeoAPI.Geometries.IGeometryFactory gf = new NetTopologySuite.Geometries.GeometryFactory();
            List&#60;GeoAPI.Geometries.IGeometry&#62; geometries = new List&#60;GeoAPI.Geometries.IGeometry&#62;();
            //Add two points
            geometries.Add(new gf.CreatePoint(23.345,64.325));
            geometries.Add(new gf.CreatePoint(23.879,64.194));
            SharpMap.Layers.VectorLayer layerVehicles = new SharpMap.Layers.VectorLayer("Vehicles");
            layerVehicles.DataSource = new SharpMap.Data.Providers.GeometryProvider(geometries);
            layerVehicles.Style.Symbol = Bitmap.FromFile(@"C:\data\car.gif");
            myMap.Layers.Add(layerVehicles);
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.Geometries">
            <summary>
            Gets or sets the geometries this datasource contains
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="geometries">Set of geometries that this datasource should contain</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(SharpMap.Data.FeatureDataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="feature">Feature to be in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="features">Features to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="geometry">Geometry to be in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="wellKnownBinaryGeometry"><see cref="T:GeoAPI.Geometries.IGeometry"/> as Well-known Binary to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="wellKnownTextGeometry"><see cref="T:GeoAPI.Geometries.IGeometry"/> as Well-known Text to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns features within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns all objects whose boundingbox intersects 'bbox'.
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.OnExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="box"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetFeature(System.UInt32)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="rowId"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.ReleaseManagedResources">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.IProvider">
            <summary>
            Interface for data providers that have an uint key
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.IGuidProvider">
            <summary>
            Interface for data provider implementations with a <see cref="T:System.Guid"/> as unique identifier
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.IProvider`1">
            <summary>
            Interface for data providers
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider`1.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns all objects whose <see cref="T:GeoAPI.Geometries.Envelope"/> intersects 'bbox'.
            </summary>
            <remarks>
            This method is usually much faster than the QueryFeatures method, because intersection tests
            are performed on objects simplified by their <see cref="T:GeoAPI.Geometries.Envelope"/>, and using the Spatial Index
            </remarks>
            <param name="bbox">Box that objects should intersect</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider`1.GetGeometryByID(`0)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider`1.GetFeature(`0)">
            <summary>
            Returns a <see cref="T:SharpMap.Data.FeatureDataRow"/> based on a RowID
            </summary>
            <param name="rowId">The id of the row.</param>
            <returns>datarow</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.IBaseProvider">
            <summary>
            Base interface for providers
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.IBaseProvider.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            <para>The ConnectionID should be unique to the datasource (for instance the filename or the
            connectionstring), and is meant to be used for connection pooling.</para>
            <para>If connection pooling doesn't apply to this datasource, the ConnectionID should return String.Empty</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.IBaseProvider.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.IBaseProvider.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.IBaseProvider.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the features within the specified <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="bbox"></param>
            <returns>Features within the specified <see cref="T:GeoAPI.Geometries.Envelope"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IBaseProvider.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.IBaseProvider.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.IBaseProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IBaseProvider.GetExtents">
            <summary>
            <see cref="T:GeoAPI.Geometries.Envelope"/> of dataset
            </summary>
            <returns>The 2d extent of the layer</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IBaseProvider.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.IBaseProvider.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.IProviderConfiguration">
            <summary>
            Interface for all classes that create a provider
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.IProviderConfiguration.Create">
            <summary>
            Create the provider provider
            </summary>
            <returns>The created provider</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeFileProviderConfiguration">
            <summary>
            Shapefile provider configuration class
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFileProviderConfiguration.Filename">
            <summary>
            Gets or sets the filename of the ShapeFile
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFileProviderConfiguration.UseFilebasedIndex">
            <summary>
            Gets or sets a value indicating whether a spatial index should be reused
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFileProviderConfiguration.UseMemoryCache">
            <summary>
            Gets or sets a value if the shapefile should be used as a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile"/>
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFileProviderConfiguration.SpatialIndexCreationOption">
            <summary>
            Gets or sets a value indicating how to create 
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileProviderConfiguration.Create">
            <summary>
            Creates a Shapefile provider
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Data.Providers.SqlServer2008Configuration">
            <summary>
            Configuration class for SqlServer 2008 providers
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008Configuration.ConnectionString">
            <summary>
            Gets or sets the connection string for the database
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008Configuration.SchemaName">
            <summary>
            Gets or sets the schema name
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008Configuration.TableName">
            <summary>
            Gets or sets the TableName
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008Configuration.ObjectIdColumnName">
            <summary>
            Gets or sets the ObjectIdColumn
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008Configuration.GeometryColumnName">
            <summary>
            Gets or sets the Geometry column name
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008Configuration.SpatialObjectType">
            <summary>
            Gets or sets the spatial object type
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008Configuration.UseSpatialIndexForEnvelope">
            <summary>
            Gets or sets a value indicating whether or not to use the spatial index
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008Configuration.SRID">
            <summary>
            Gets or sets a value indicating the spatial reference id
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008Configuration.ExtentsMode">
            <summary>
            Gets or sets the way the spatial extent of the data source is evaluated
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008Configuration.Create">
            <summary>
            Create the provider provider
            </summary>
            <returns>The created provider</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.MsSql">
            <summary>
            Microsoft SQL data provider
            </summary>
            <remarks>
            <para>
            The SQL data table MUST contain five data columns: A binary or image column (a Geometry Column) for storing WKB formatted geometries, 
            and four real values holding the boundingbox of the geometry. These must be named: Envelope_MinX, Envelope_MinY, Envelope_MaxX and Envelope_MaxY.
            Any extra columns will be returns as feature data.
            </para>
            <para>For creating a valid MS SQL datatable for SharpMap, see <see cref="M:SharpMap.Data.Providers.MsSql.CreateDataTable(SharpMap.Data.Providers.IProvider,System.String,System.String)"/> 
            for creating and uploading a datasource to MS SQL Server.</para>
            <example>
            Adding a datasource to a layer:
            <code lang="C#">
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            string ConnStr = @"Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|GeoDatabase.mdf;Integrated Security=True;User Instance=True";
            myLayer.DataSource = new SharpMap.Data.Providers.MsSql(ConnStr, "myTable");
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.Factory">
            <summary>
            Gets or sets the geometry factory used to create geometries
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new connection to MS Sql Server
            </summary>
            <param name="ConnectionStr">Connectionstring</param>
            <param name="tablename">Name of data table</param>
            <param name="geometryColumnName">Name of geometry column</param>
            /// <param name="OID_ColumnName">Name of column with unique identifier</param>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.ConnectionString">
            <summary>
            Connectionstring
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.Table">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.GeometryColumn">
            <summary>
            Name of geometry column
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.ObjectIdColumn">
            <summary>
            Name of column that contains the Object ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.DefinitionQuery">
            <summary>
            Definition query used for limiting dataset
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.Columns">
            <summary>
            Gets a collection of columns in the dataset
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns geometries within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the features that intersects with 'geom' [NOT IMPLEMENTED]
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.SRID">
            <summary>
            Spacial Reference ID
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetFeature(System.UInt32)">
            <summary>
            Returns a datarow based on a RowID
            </summary>
            <param name="rowId"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all features with the view box
            </summary>
            <param name="bbox">view box</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.CreateDataTable(SharpMap.Data.Providers.IProvider,System.String,System.String)">
            <summary>
            Creates a new table in a Microsoft SQL Server database and copies rows from an existing datasource.
            </summary>
            <remarks>
            <para>The datatable created will contain six extra columns besides the attribute data: "OID" (Object ID row), 
            "WKB_Geometry" (Geometry stored as WKB), and Envelope_MinX, Envelope_MinY, Envelope_MaxX, Envelope_MaxY
            for geometry bounding box.</para>
            <para>
            <example>
            Upload a ShapeFile to a database:
            <code>
            public void CreateDatabase(string shapeFile)
            {
            	if (!System.IO.File.Exists(shapeFile))
            	{
            		MessageBox.Show("File not found");
            		return;
            	}
            	ShapeFile shp = new ShapeFile(shapeFile, false);
            	//Create tablename from filename
            	string tablename = shapeFile.Substring(shapeFile.LastIndexOf('\\') + 1,
            		shapeFile.LastIndexOf('.') - shapeFile.LastIndexOf('\\') - 1);
            	//Create connectionstring
            	string connstr = @"Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|GeoDatabase.mdf;Integrated Security=True;User Instance=True";
            	int count = SharpMap.Data.Providers.MsSql.CreateDataTable(shp, tablename, connstr);
            	MessageBox.Show("Uploaded " + count.ToString() + " features to datatable '" + tablename + "'");
            }
            </code>
            </example>
            </para>
            </remarks>
            <param name="datasource">Datasource to upload</param>
            <param name="tablename">Name of table to create (existing table will be overwritten!)</param>
            <param name="connstr">Connection string to database</param>
            <returns>Number or rows inserted, -1 if failed and 0 if table created but no rows inserted.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Type2SqlType(System.Type)">
            <summary>
            Returns the name of the SqlServer datatype based on a .NET datatype
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Data.Providers.MsSqlSpatial">
            <summary>
            Microsoft SQL Server 2005 / MsSqlSpatial dataprovider
            </summary>
            <example>
            Adding a datasource to a layer:
            <code lang="C#">
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            string ConnStr = @"Data Source=localhost\sqlexpress;Initial Catalog=myGisDb;Integrated Security=SSPI;";
            myLayer.DataSource = new SharpMap.Data.Providers.MsSqlSpatial(ConnStr, "myTable", "myId");
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new connection to MsSqlSpatial
            </summary>
            <param name="connectionString">Connectionstring</param>
            <param name="tableName">Name of data table</param>
            <param name="geometryColumnName">Name of geometry column</param>
            /// <param name="identifierColumnName">Name of column with unique identifier</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.CreateSpatialDbUtility">
            <summary>
            Creates a new <see cref="T:SharpMap.Data.Providers.SpatialDbUtility"/> to handle database backends specifics
            </summary>
            <returns>A <see cref="T:SharpMap.Data.Providers.SpatialDbUtility"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new connection to MsSqlSpatial
            </summary>
            <param name="connectionString">Connectionstring</param>
            <param name="tableName">Name of data table</param>
            <param name="identifierColumnName">Name of column with unique identifier</param>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.Columns">
            <summary>
            Gets a collection of columns in the dataset
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.CreateOpenDbConnection">
            <summary>
            Convenience function to create and open a connection to the database backend.
            </summary>
            <returns>An open connection to the database backend.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.CreateDataAdapter">
            <summary>
            Convenience function to create a data adapter.
            </summary>
            <returns>An open connection to the database backend.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetObjectIDsInViewInternal(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the object of features that lie within the specified <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="bbox">The bounding box</param>
            <returns>A collection of object ids</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetExtentsInternal">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetGeometryColumn">
            <summary>
            Queries the MsSqlSpatial database to get the name of the Geometry Column. This is used if the columnname isn't specified in the constructor
            </summary>
            <remarks></remarks>
            <returns>Name of column containing geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetSpatialWhere(GeoAPI.Geometries.Envelope,System.Data.Common.DbCommand)">
            <summary>
            Function to generate a spatial where clause for the intersection queries.
            </summary>
            <param name="bbox">The bounding box</param>
            <param name="command">The command object, that is supposed to execute the query.</param>
            <returns>The spatial component of a SQL where clause</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetSpatialWhere(GeoAPI.Geometries.IGeometry,System.Data.Common.DbCommand)">
            <summary>
            Function to generate a spatial where clause for the intersection queries.
            </summary>
            <param name="bbox">The geometry</param>
            <param name="command">The command object, that is supposed to execute the query.</param>
            <returns>The spatial component of a SQL where clause</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.OleDbPoint">
            <summary>
            The OleDbPoint provider is used for rendering point data from an OleDb compatible data source.
            </summary>
            <remarks>
            <para>The data source will need to have two double-type columns, xColumn and yColumn that contains the coordinates of the point,
            and an integer-type column containing a unique identifier for each row.</para>
            <para>To get good performance, make sure you have applied indexes on ID, xColumn and yColumns in your data source table.</para>
            </remarks>
        </member>
        <member name="F:SharpMap.Data.Providers.OleDbPoint.OleDbFactory">
            <summary>
            The OleDb provider factory
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.#cctor">
            <summary>
            Static constructor to get a value for <see cref="F:SharpMap.Data.Providers.OleDbPoint.OleDbFactory"/>
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the OleDbPoint provider
            </summary>
            <param name="connectionString">The connection string</param>
            <param name="tableName">The name of the table</param>
            <param name="oidColumnName">The name of the object id column</param>
            <param name="xColumn">The name of the x-ordinates column</param>
            <param name="yColumn">The name of the y-ordinates column</param>
        </member>
        <member name="T:SharpMap.Data.Providers.Pooling.Connector">
            <summary>
            The Connector class implements the logic for the Connection 
            Objects to access the physical connection to the data source, and 
            isolate the application developer from connection pooling 
            internals.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector.InstanceCounter">
            <summary>Instance Counting</summary>
            <remarks>!!! for debugging only</remarks>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector._ShareCount">
            <summary>Counts the numbers of Connections that share
            this Connector. Used in Release() to decide whether this
            connector is to be moved to the PooledConnectors list.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector._Shared">
            <summary>Buffer for the public Shared property</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector.InUse">
            <summary>True if the physical connection is in used 
            by a Connection Object. That is, if the connector is
            not contained in the PooledConnectors List.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector.Pooled">
            <summary>Buffer for the public Pooled property</summary>
            <remarks>Pooled will be ignored if Shared is set!</remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.Connector.#ctor(SharpMap.Data.Providers.IProvider,System.Boolean)">
            <summary>
            Constructor, initializes the Connector object.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.Pooling.Connector.Shared">
            <summary>Controls the physical connection sharing.</summary>
            <remarks>Can only be set via ConnectorPool.Request().</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.Pooling.Connector.ShareCount">
            <summary>Share count, read only</summary>
            <remarks>!!! for debugging only</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.Pooling.Connector.Provider">
            <summary>
            Used to connect to the data source. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.Connector.Open">
            <summary>
            Opens the physical connection to the server.
            </summary>
            <remarks>Usually called by the RequestConnector
            Method of the connection pool manager.</remarks>
        </member>
        <member name="T:SharpMap.Data.Providers.Pooling.ConnectorPool">
            <summary>
            The ConnectorPool class implements the functionality for 
            the administration of the connectors. Controls pooling and
            sharing of connectors.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.ConnectorPool.ConnectorPoolManager">
            <summary>Unique static instance of the connector pool manager.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.ConnectorPool.PooledConnectors">
            <summary>List of unused, pooled connectors available to the next RequestConnector() call.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.ConnectorPool.SharedConnectors">
            <summary>List of shared, in use connectors.</summary>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.ConnectorPool.#ctor">
            <summary>
            Default constructor, creates a new connector pool object.
            Should only be used once in an application, since more 
            than one connector pool does not make much sense..
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.ConnectorPool.RequestConnector(SharpMap.Data.Providers.IProvider,System.Boolean)">
            <summary>
            Searches the shared and pooled connector lists for a
            matching connector object or creates a new one.
            </summary>
            <param name="provider">Provider requested to connect to the database server</param>
            <param name="Shared">Allows multiple connections on a single connector. </param>
            <returns>A pooled connector object.</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.PreparedGeometryProvider">
            <summary>
            Abstract base provider that provides <see cref="T:GeoAPI.Geometries.Prepared.IPreparedGeometry"/> for faster accurate topology evaluation
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.PreparedGeometryProvider.PreparedGeometry">
            <summary>
            Gets or sets a value indicating the <see cref="T:GeoAPI.Geometries.Prepared.IPreparedGeometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.PreparedGeometryProvider.#ctor">
            <summary>
            Creates an instance of this class. <see cref="P:SharpMap.Data.Providers.BaseProvider.SRID"/> is set to <value>0</value>.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.PreparedGeometryProvider.#ctor(System.Int32)">
            <summary>
            Creates an instance of this class. <see cref="P:SharpMap.Data.Providers.BaseProvider.SRID"/> is set to <paramref name="srid"/>.
            </summary>
            <param name="srid">The spatial reference id</param>
        </member>
        <member name="M:SharpMap.Data.Providers.PreparedGeometryProvider.ReleaseManagedResources">
            <summary>
            Releases all managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.PreparedGeometryProvider.OnBeginExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry)">
            <summary>
            Method to perform preparatory things for executing an intersection query against the data source
            </summary>
            <param name="geom">The geometry to use as filter.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.PreparedGeometryProvider.OnExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Method to perform the intersection query against the data source
            </summary>
            <param name="geom">The geometry to use as filter</param>
            <param name="ds">The feature data set to store the results in</param>
        </member>
        <member name="M:SharpMap.Data.Providers.PreparedGeometryProvider.OnEndExecuteIntersectionQuery">
            <summary>
            Method to do cleanup work after having performed the intersection query against the data source
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeFile">
            <summary>
            Shapefile dataprovider
            </summary>
            <remarks>
            <para>The ShapeFile provider is used for accessing ESRI ShapeFiles. The ShapeFile should at least contain the
            [filename].shp, [filename].idx, and if feature-data is to be used, also [filename].dbf file.</para>
            <para>The first time the ShapeFile is accessed, SharpMap will automatically create a spatial index
            of the shp-file, and save it as [filename].shp.sidx. If you change or update the contents of the .shp file,
            delete the .sidx file to force SharpMap to rebuilt it. In web applications, the index will automatically
            be cached to memory for faster access, so to reload the index, you will need to restart the web application
            as well.</para>
            <para>
            M values in a shapefile are ignored by SharpMap.
            </para>
            </remarks>
            <example>
            Adding a datasource to a layer:
            <code lang="C#">
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            myLayer.DataSource = new SharpMap.Data.Providers.ShapeFile(@"C:\data\MyShapeData.shp");
            </code>
            </example>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeFile._tree">
            <summary>
            Tree used for fast query of data
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.#ctor(System.String)">
            <summary>
            Initializes a ShapeFile DataProvider without a file-based spatial index.
            </summary>
            <param name="filename">Path to shape file</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a ShapeFile DataProvider.
            </summary>
            <remarks>
            <para>If FileBasedIndex is true, the spatial index will be read from a local copy. If it doesn't exist,
            it will be generated and saved to [filename] + '.sidx'.</para>
            <para>Using a file-based index is especially recommended for ASP.NET applications which will speed up
            start-up time when the cache has been emptied.
            </para>
            </remarks>
            <param name="filename">Path to shape file</param>
            <param name="fileBasedIndex">Use file-based spatial index</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a ShapeFile DataProvider.
            </summary>
            <remarks>
            <para>If FileBasedIndex is true, the spatial index will be read from a local copy. If it doesn't exist,
            it will be generated and saved to [filename] + '.sidx'.</para>
            <para>Using a file-based index is especially recommended for ASP.NET applications which will speed up
            start-up time when the cache has been emptied.
            </para>
            </remarks>
            <param name="filename">Path to shape file</param>
            <param name="fileBasedIndex">Use file-based spatial index</param>
            <param name="useMemoryCache">Use the memory cache. BEWARE in case of large shapefiles</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.#ctor(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a ShapeFile DataProvider.
            </summary>
            <remarks>
            <para>If FileBasedIndex is true, the spatial index will be read from a local copy. If it doesn't exist,
            it will be generated and saved to [filename] + '.sidx'.</para>
            <para>Using a file-based index is especially recommended for ASP.NET applications which will speed up
            start-up time when the cache has been emptied.
            </para>
            </remarks>
            <param name="filename">Path to shape file</param>
            <param name="fileBasedIndex">Use file-based spatial index</param>
            <param name="useMemoryCache">Use the memory cache. BEWARE in case of large shapefiles</param>
            <param name="srid">The spatial reference id</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.CleanInternalCache(System.Collections.ObjectModel.Collection{System.UInt32})">
            <summary>
            Cleans the internal memory cached, expurging the objects that are not in the viewarea anymore
            </summary>
            <param name="objectlist">OID of the objects in the current viewarea</param>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.MemoryCacheLimit">
            <summary>
            Gets or sets a value indicating how many features are allowed for memory cache approach
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.CoordinateSystem">
            <summary>
            Gets or sets the coordinate system of the ShapeFile. If a shapefile has 
            a corresponding [filename].prj file containing a Well-Known Text 
            description of the coordinate system this will automatically be read.
            If this is not the case, the coordinate system will default to null.
            </summary>
            <exception cref="T:System.ApplicationException">An exception is thrown if the coordinate system is read from file.</exception>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.ShapeType">
            <summary>
            Gets the <see cref="T:SharpMap.Data.Providers.ShapeType">shape geometry type</see> in this shapefile.
            </summary>
            <remarks>
            The property isn't set until the first time the datasource has been opened,
            and will throw an exception if this property has been called since initialization. 
            <para>All the non-Null shapes in a shapefile are required to be of the same shape
            type.</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.Filename">
            <summary>
            Gets or sets the filename of the shapefile
            </summary>
            <remarks>If the filename changes, indexes will be rebuilt</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.Encoding">
            <summary>
            Gets or sets the encoding used for parsing strings from the DBase DBF file.
            </summary>
            <remarks>
            The DBase default encoding is <see cref="P:System.Text.Encoding.UTF8"/>.
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Finalize">
            <summary>
            Finalizes the object
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.IncludeOid">
            <summary>
            Gets or sets a value indicating whether the object's id
            should be included in attribute data or not. 
            <para>The default value is <c>false</c></para>
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>		
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns geometries whose bounding box intersects 'bbox'
            </summary>
            <remarks>
            <para>Please note that this method doesn't guarantee that the geometries returned actually intersect 'bbox', but only
            that their boundingbox intersects 'bbox'.</para>
            <para>This method is much faster than the QueryFeatures method, because intersection tests
            are performed on objects simplified by their boundingbox, and using the Spatial Index.</para>
            </remarks>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all objects whose boundingbox intersects bbox.
            </summary>
            <remarks>
            <para>
            Please note that this method doesn't guarantee that the geometries returned actually intersect 'bbox', but only
            that their boundingbox intersects 'bbox'.
            </para>
            </remarks>
            <param name="bbox"></param>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <remarks>FilterDelegate is no longer applied to this ge</remarks>
            <param name="oid">Object ID</param>
            <returns>The geometry at the Id</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetGeometryByID(System.UInt32,System.IO.BinaryReader,SharpMap.Data.Providers.DbaseReader)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <remarks>FilterDelegate is no longer applied to this ge</remarks>
            <param name="oid">Object ID</param>
            <param name="br">The binary reader for reading</param>
            <param name="dbf">The dBase reader</param>
            <returns>The geometry at the Id</returns>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.DoTrueIntersectionQuery">
            <summary>
            Gets or sets a value indicating that for <see cref="M:SharpMap.Data.Providers.ShapeFile.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)"/> the intersection of the geometries and the envelope should be tested.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.CheckIfRecordIsDeleted">
            <summary>
            Gets or sets a value indicating that the provider should check if geometry belongs to a deleted record.
            </summary>
            <remarks>This really slows rendering performance down</remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by <paramref name="geom"/>.
            </summary>
            <param name="geom">The geometry to test intersection for</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetFeatureCount">
            <summary>
            Returns the total number of features in the datasource (without any filter applied)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetExtents">
            <summary>
            Returns the extents of the datasource
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            The connection ID of a shapefile is its filename
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.SRID">
            <summary>
            Gets or sets the spatial reference ID (CRS)
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ParseHeader">
            <summary>
            Reads and parses the header of the .shp index file
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ParseProjection">
            <summary>
            Reads and parses the projection if a projection file exists
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.SwapByteOrder(System.Int32)">
            <summary>
            Swaps the byte order of an int32
            </summary>
             <param name="i">Integer to swap</param>
             <returns>Byte Order swapped int32</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.CreateSpatialIndexFromFile(System.String)">
            <summary>
            Loads a spatial index from a file. If it doesn't exist, one is created and saved
            </summary>
            <param name="filename"></param>
            <returns>A spatial index</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeFile.SpatialIndexCreation">
            <summary>
            Options to create the <see cref="T:SharpMap.Utilities.SpatialIndexing.QuadTree"/> spatial index
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeFile.SpatialIndexCreation.Recursive">
            <summary>
            Loads all the bounding boxes in builds the QuadTree from the list of nodes.
            This is memory expensive!
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeFile.SpatialIndexCreation.Linear">
            <summary>
            Creates a root node by the bounds of the ShapeFile and adds each node one-by-one-
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeFile.SpatialIndexCreation.Custom">
            <summary>
            A custom implementation for the creation of an <see cref="T:SharpMap.Utilities.Indexing.ISpatialIndex`1"/>
            </summary>
            <remarks>You cannot set this value directly, it is set internally if you set <see cref="P:SharpMap.Data.Providers.ShapeFile.SpatialIndexFactory"/></remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.SpatialIndexFactory">
            <summary>
            Gets or sets a value indicating the spatial index factory
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.SpatialIndexCreationOption">
            <summary>
            The Spatial index create
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.RebuildSpatialIndex">
            <summary>
            Forces a rebuild of the spatial index. If the instance of the ShapeFile provider
            uses a file-based index the file is rewritten to disk.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetAllFeatureBoundingBoxes">
            <summary>
            Reads all boundingboxes of features in the shapefile. This is used for spatial indexing.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.Factory">
            <summary>
            Gets or sets the geometry factory
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ReadGeometry(System.UInt32,System.IO.BinaryReader,SharpMap.Data.Providers.DbaseReader)">
            <summary>
            Reads and parses the geometry with ID 'oid' from the ShapeFile
            </summary>
            <param name="oid">Object ID</param>
            <param name="br">BinaryReader of the ShapeFileStream</param>
            <param name="dBaseReader">dBaseReader of the DBaseFile</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetFeature(System.UInt32)">
            <summary>
            Gets a <see cref="T:SharpMap.Data.FeatureDataRow"/> from the datasource at the specified index
            <para/>
            Please note well: It is not checked whether 
            <list type="Bullet">
            <item>the data record matches the <see cref="P:SharpMap.Data.Providers.FilterProvider.FilterDelegate"/> assigned.</item>
            </list>
            </summary>
            <param name="rowId">The object identifier for the record</param>
            <returns>The feature data row</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetFeature(System.UInt32,SharpMap.Data.FeatureDataTable)">
            <summary>
            Gets a datarow from the datasource at the specified index belonging to the specified datatable
            <para/>
            Please note well: It is not checked whether 
            <list type="Bullet">
            <item>the data record matches the <see cref="P:SharpMap.Data.Providers.FilterProvider.FilterDelegate"/> assigned.</item>
            </list>
            </summary>
            <param name="rowId">The object identifier for the record</param>
            <param name="dt">The datatable the feature should belong to.</param>
            <returns>The feature data row</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeFileHeader">
            <summary>
            ShapeFile header class
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileHeader.IsNoDataValue(System.Double)">
            <summary>
            Method to determine if a measure value is to be considered a no data value
            </summary>
            <param name="measure">The value to test.</param>
            <returns><value>true</value> if the value is a no data value</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileHeader.ParseNoDataValue(System.Double)">
            <summary>
            Method to set a no data measure value to <see cref="F:GeoAPI.Geometries.Coordinate.NullOrdinate"/>
            </summary>
            <param name="measure">The value to check</param>
            <returns><paramref name="measure"/> if it is valid, otherwise <see cref="F:GeoAPI.Geometries.Coordinate.NullOrdinate"/>.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileHeader.#ctor(System.Byte[])">
            <summary>
            Creates an instance of this class using the provided <paramref name="header"/> buffer
            </summary>
            <param name="header">The buffer holding the header information</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileHeader.#ctor(System.IO.Stream)">
            <summary>
            Creates an instance of this class using the provided <paramref name="header"/> stream
            </summary>
            <param name="header">The stream holding the header information</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileHeader.Read(System.String)">
            <summary>
            Creates a Shapefile header using the provided <paramref name="shpPath"/>
            </summary>
            <param name="shpPath">The path to the Shapefile</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileHeader.#ctor(System.IO.BinaryReader)">
            <summary>
            Creates an instance of this class using the provided <paramref name="headerReader"/>.
            </summary>
            <param name="headerReader">The stream holding the header information</param>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFileHeader.FileLength">
            <summary>
            Gets the file length
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFileHeader.ShapeType">
            <summary>
            Gets the shape type encoded in the shape file
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFileHeader.BoundingBox">
            <summary>
            Gets the extent of the shape file
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFileHeader.ZRange">
            <summary>
            Gets the range of Z-Values in the shape file, if there are any
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFileHeader.MRange">
            <summary>
            Gets the range of M-values in the shape file, if there are any
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileIndex.Create(System.String)">
            <summary>
            Method to create a SHX index from a given ShapeFile
            </summary>
            <param name="shpPath">The path to the shapefile</param>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeFileIndex.ShapeFileIndexEntry">
            <summary>
            A structure that contains a SHX Record
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeFileIndex.ShapeFileIndexEntry.Offset">
            <summary>
            The offset in the file
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeFileIndex.ShapeFileIndexEntry.Length">
            <summary>
            The length of the geometry buffer
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileIndex.ShapeFileIndexEntry.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes this structure
            </summary>
            <param name="recordOffset">The offset of the record</param>
            <param name="dataLength">The length of the record</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileIndex.GetOffset(System.UInt32)">
            <summary>
            Gets the offset of the record at index <paramref name="oid"/>.
            </summary>
            <param name="oid">The (1-based) record index</param>
            <returns>The offset of the record</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFileIndex.GetLength(System.UInt32)">
            <summary>
            Gets the length of the record at index <paramref name="oid"/>.
            </summary>
            <param name="oid">The (1-based) record index</param>
            <returns>The length of the record</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeType">
            <summary>
            Shapefile geometry type.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Null">
            <summary>
            Null shape with no geometric data
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Point">
            <summary>
            A point consists of a pair of double-precision coordinates.
            SharpMap interprets this as <see cref="T:GeoAPI.Geometries.IPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolyLine">
            <summary>
            PolyLine is an ordered set of vertices that consists of one or more parts. A part is a
            connected sequence of two or more points. Parts may or may not be connected to one
            another. Parts may or may not intersect one another.
            SharpMap interprets this as either <see cref="T:GeoAPI.Geometries.ILineString"/> or <see cref="T:GeoAPI.Geometries.IMultiLineString"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Polygon">
            <summary>
            A polygon consists of one or more rings. A ring is a connected sequence of four or more
            points that form a closed, non-self-intersecting loop. A polygon may contain multiple
            outer rings. The order of vertices or orientation for a ring indicates which side of the ring
            is the interior of the polygon. The neighborhood to the right of an observer walking along
            the ring in vertex order is the neighborhood inside the polygon. Vertices of rings defining
            holes in polygons are in a counterclockwise direction. Vertices for a single, ringed
            polygon are, therefore, always in clockwise order. The rings of a polygon are referred to
            as its parts.
            SharpMap interprets this as either <see cref="T:GeoAPI.Geometries.IPolygon"/> or <see cref="T:GeoAPI.Geometries.IMultiPolygon"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Multipoint">
            <summary>
            A MultiPoint represents a set of points.
            SharpMap interprets this as <see cref="T:GeoAPI.Geometries.IMultiPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PointZ">
            <summary>
            A PointZ consists of a triplet of double-precision coordinates plus a measure.
            SharpMap interprets this as <see cref="T:GeoAPI.Geometries.IPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolyLineZ">
            <summary>
            A PolyLineZ consists of one or more parts. A part is a connected sequence of two or
            more points. Parts may or may not be connected to one another. Parts may or may not
            intersect one another.
            SharpMap interprets this as <see cref="T:GeoAPI.Geometries.ILineString"/> or <see cref="T:GeoAPI.Geometries.IMultiLineString"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolygonZ">
            <summary>
            A PolygonZ consists of a number of rings. A ring is a closed, non-self-intersecting loop.
            A PolygonZ may contain multiple outer rings. The rings of a PolygonZ are referred to as
            its parts.
            SharpMap interprets this as either <see cref="T:GeoAPI.Geometries.IPolygon"/> or <see cref="T:GeoAPI.Geometries.IMultiPolygon"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.MultiPointZ">
            <summary>
            A MultiPointZ represents a set of <see cref="F:SharpMap.Data.Providers.ShapeType.PointZ"/>s.
            SharpMap interprets this as <see cref="T:GeoAPI.Geometries.IMultiPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PointM">
            <summary>
            A PointM consists of a pair of double-precision coordinates in the order X, Y, plus a measure M.
            SharpMap interprets this as <see cref="T:GeoAPI.Geometries.IPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolyLineM">
            <summary>
            A shapefile PolyLineM consists of one or more parts. A part is a connected sequence of
            two or more points. Parts may or may not be connected to one another. Parts may or may
            not intersect one another.
            SharpMap interprets this as <see cref="T:GeoAPI.Geometries.ILineString"/> or <see cref="T:GeoAPI.Geometries.IMultiLineString"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolygonM">
            <summary>
            A PolygonM consists of a number of rings. A ring is a closed, non-self-intersecting loop.
            SharpMap interprets this as either <see cref="T:GeoAPI.Geometries.IPolygon"/> or <see cref="T:GeoAPI.Geometries.IMultiPolygon"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.MultiPointM">
            <summary>
            A MultiPointM represents a set of <see cref="F:SharpMap.Data.Providers.ShapeType.PointM"/>s.
            SharpMap interprets this as <see cref="T:GeoAPI.Geometries.IMultiPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.MultiPatch">
            <summary>
            A MultiPatch consists of a number of surface patches. Each surface patch describes a
            surface. The surface patches of a MultiPatch are referred to as its parts, and the type of
            part controls how the order of vertices of an MultiPatch part is interpreted.
            SharpMap doesn't support this feature type.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.SqlServerSpatialObjectType">
            <summary>
            Possible spatial object types on SqlServer
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.SqlServerSpatialObjectType.Geometry">
            <summary>
            Geometry
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.SqlServerSpatialObjectType.Geography">
            <summary>
            Geography
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.SqlServer2008ExtentsMode">
            <summary>   
            Method used to determine extents of all features
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.SqlServer2008ExtentsMode.QueryIndividualFeatures">
            <summary>
            Client retrieves and reads through all features in the table to determine extents
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.SqlServer2008ExtentsMode.SpatialIndex">
            <summary>
            Supported by <see cref="T:SharpMap.Data.Providers.SqlServerSpatialObjectType" />.Geometry only, reading the bounds of the spatial index directly from the system tables (very fast, but does not take into account actual data extents or <see cref="P:SharpMap.Data.Providers.SqlServer2008.DefinitionQuery"/>)
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.SqlServer2008ExtentsMode.EnvelopeAggregate">
            <summary>
            Uses Aggregate functions introduced in SQL Server 2012 (recommended, server aggregates data and returns single record to client)
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.SqlServer2008">
            <summary>   
            SQL Server 2008 data provider   
            </summary>   
            <remarks>   
            <para>This provider was developed against the SQL Server 2008 November CTP. The platform may change significantly before release.</para>   
            <example>   
            Adding a datasource to a layer:   
            <code lang="C#">   
            Layers.VectorLayer myLayer = new Layers.VectorLayer("My layer");   
            string ConnStr = @"Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=myDB;Data Source=myServer\myInstance";   
            myLayer.DataSource = new Data.Providers.SqlServer2008(ConnStr, "myTable", "GeomColumn", "OidColumn");   
            </code>   
            </example>   
            <para>SQL Server 2008 provider by Bill Dollins (dollins.bill@gmail.com). Based on the Oracle provider written by Humberto Ferreira.</para>   
            </remarks>   
        </member>
        <member name="F:SharpMap.Data.Providers.SqlServer2008.GeogMaxExtents">
            <summary>
            Envelope required for restricting extents of WKT (eg bbox) used to query SqlGeography to work around error 
            24206 "The specified input cannot be accepted because it contains an edge with antipodal points"
            FullGlobe will be used when map extents exceed this envelope.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.SqlServer2008._reorientObject">
            <summary>
            T-SQL command to "reorient" a geography
            </summary>
            <remarks>
            <list type="bullet">
            <item><term>SqlGeography</term><description>polygon interior defined by left hand/foot rule (anti-clockwise orientation)</description></item>
            <item><term>SqlGeometry</term><description>orientation is irrelevant</description></item>
            </list>
            GeometryToWKT returns Envelope with clockwise ring, so need to call .ReorientObject() for WKT used to query SqlGeography
            </remarks>
        </member>
        <member name="F:SharpMap.Data.Providers.SqlServer2008._spatialTypeString">
            <summary>
            Used for static spatial methods in SQL string
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.TableSchema">
            <summary>   
            Data table schema   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.Table">
            <summary>   
            Data table name   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.QualifiedTable">
            <summary>
            Gets a value indicating the qualified schema table name in square brackets
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.ObjectIdColumn">
            <summary>   
            Name of column that contains the Object ID   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.GeometryColumn">
            <summary>   
            Name of geometry column   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.SpatialObjectType">
            <summary>
            Spatial object type for  
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.ValidateGeometries">
            <summary>
            When <c>true</c>, attempts to repair invalid SqlServer spatial objects by appending .MakeValid() in SQL statements. 
            Ignored for <see cref="T:SharpMap.Data.Providers.SqlServerSpatialObjectType"/>.Geometry 
            when <see cref="P:SharpMap.Data.Providers.SqlServer2008.ForceSeekHint"/> or <see cref="P:SharpMap.Data.Providers.SqlServer2008.ForceIndex"/> is enabled due to SQL Server query execution plan.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.ForceSeekHint">
            <summary>
            When <code>true</code>, uses the FORCESEEK table hint, possibly over-riding <see cref="P:SharpMap.Data.Providers.SqlServer2008.ValidateGeometries"/>. 
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.NoLockHint">
            <summary>
            When <code>true</code>, uses the NOLOCK table hint.
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.ForceIndex">
            <summary>
            When set, forces use of the specified index, possibly over-riding <see cref="P:SharpMap.Data.Providers.SqlServer2008.ValidateGeometries"/>. 
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.MaxDop">
            <summary>
            If set, sends an Option MaxDop to the SQL-Server to override the Parallel Execution of indexes
            This can be used if Spatial indexes are not used on SQL-Servers with many processors.
            
            MaxDop = 0 // Default behaviour
            MaxDop = 1 // Suppress Parallel execution of Queryplan
            MaxDop = [2..n] // Use X cores in in execution plan
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String)">
            <summary>   
            Initializes a new connection to SQL Server for <see cref="T:SharpMap.Data.Providers.SqlServerSpatialObjectType"/>.Geometry in column named SHAPE with default <see cref="P:SharpMap.Data.Providers.SqlServer2008.ExtentsMode" /> 
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String,SharpMap.Data.Providers.SqlServerSpatialObjectType)">
            <summary>   
            Initializes a new connection to SQL Server for spatial column named SHAPE with default <see cref="P:SharpMap.Data.Providers.SqlServer2008.ExtentsMode" /> 
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>
            <param name="spatialObjectType">The type of the spatial object to use for spatial queries</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String,System.String)">
            <summary>   
            Initializes a new connection to SQL Server for <see cref="T:SharpMap.Data.Providers.SqlServerSpatialObjectType"/>.Geometry with default <see cref="P:SharpMap.Data.Providers.SqlServer2008.ExtentsMode" />
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="geometryColumnName">Name of geometry column</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String,System.String,SharpMap.Data.Providers.SqlServerSpatialObjectType)">
            <summary>   
            Initializes a new connection to SQL Server with default <see cref="P:SharpMap.Data.Providers.SqlServer2008.ExtentsMode" />
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="spatialColumnName">Name of spatial column</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>   
            <param name="spatialObjectType">spatial type (Geometry or Geography)</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String,System.String,SharpMap.Data.Providers.SqlServerSpatialObjectType,System.Boolean)">
            <summary>   
            Initializes a new connection to SQL Server   
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="spatialColumnName">Name of spatial column</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>   
            <param name="spatialObjectType">spatial type (Geometry or Geography)</param>
            <param name="useSpatialIndexExtentAsExtent">True sets ExtentsMode to SqlServer2008ExtentsMode.SpatialIndex</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String,System.String,SharpMap.Data.Providers.SqlServerSpatialObjectType,System.Boolean,System.Int32)">
            <summary>   
            Initializes a new connection to SQL Server   
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="spatialColumnName">Name of spatial column</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>   
            <param name="spatialObjectType">spatial type (Geometry or Geography)</param>
            <param name="useSpatialIndexExtentAsExtent">True sets ExtentsMode to SqlServer2008ExtentsMode.SpatialIndex</param>
            <param name="srid">The spatial reference id</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String,System.String,SharpMap.Data.Providers.SqlServerSpatialObjectType,System.Int32,SharpMap.Data.Providers.SqlServer2008ExtentsMode)">
            <summary>   
            Initializes a new connection to SQL Server   
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="spatialColumnName">Name of spatial column</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>   
            <param name="spatialObjectType">spatial type (Geometry or Geography)</param>
            <param name="srid">The spatial reference id</param>
            <param name="extentsMode">Mode for calculating full extents of the data</param>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.ExtentsMode">
            <summary>
            Gets or sets the method used in the <see cref="M:SharpMap.Data.Providers.SqlServer2008.GetExtents"/> method.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.ConnectionString">
            <summary>   
            Connectionstring   
            </summary>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetMakeValidString">
            <summary>
            Gets the T-SQL string to enforce that a geometry is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.ParseTablename(System.String)">
            <summary>
            Method to parse TableSchema and Table from a (fully qualified) tablename
            </summary>
            <param name="tablename">The table name</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetAttributeColumnNames">
            <summary>
            Method to get the name of the attribute columns
            </summary>
            <returns>A</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetExtraOptions">
            <summary>
            Function to transform <see cref="P:SharpMap.Data.Providers.SqlServer2008.MaxDop"/> to sql for the query
            </summary>
            <returns>MAXDOP option striong</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.BuildTableHints">
            <summary>
            Builds the WITH clause containing all specified table hints
            </summary>
            <returns>The WITH clause</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>   
            Returns geometries within the specified bounding box   
            </summary>   
            <param name="bbox"></param>   
            <returns></returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetGeometryByID(System.UInt32)">
            <summary>   
            Returns the geometry corresponding to the Object ID   
            </summary>   
            <param name="oid">Object ID</param>   
            <returns>geometry</returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>   
            Returns geometry Object IDs whose bounding box intersects 'bbox'   
            </summary>   
            <param name="bbox"></param>   
            <returns></returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetBoxFilterStr(GeoAPI.Geometries.Envelope)">
            <summary>   
            Returns the box filter string needed in SQL query   
            </summary>   
            <param name="bbox"></param>   
            <returns></returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.OnExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>   
            Returns the features that intersects with 'geom'   
            </summary>   
            <param name="geom"></param>   
            <param name="fds">FeatureDataSet to fill data into</param>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetFeatureCount">
            <summary>   
            Returns the number of records in the dataset (including NULL, EMPTY, and Invalid geometries)
            </summary>   
            <returns>number of features</returns>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.DefinitionQuery">
            <summary>   
            Definition query used for limiting dataset   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.Columns">
            <summary>   
            Gets a collection of columns in the dataset   
            </summary>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetFeature(System.UInt32)">
            <summary>   
            Returns a datarow based on a RowID   
            </summary>   
            <param name="rowId"></param>   
            <returns>datarow</returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetExtents">
            <summary>   
            Boundingbox of dataset   
            </summary>   
            <returns>boundingbox</returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>   
            Returns all features with the view box   
            </summary>   
            <param name="bbox">view box</param>   
            <param name="fds">FeatureDataSet to fill data into</param>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.ExecuteIntersectionQuery(System.String,SharpMap.Data.FeatureDataSet)">
            <summary>
            
            </summary>
            <param name="sql"></param>
            <param name="fds"></param>
        </member>
        <member name="T:SharpMap.Data.Providers.WFS">
             <summary>
             WFS dataprovider
             This provider can be used to obtain data from an OGC Web Feature Service.
             It performs the following requests: 'GetCapabilities', 'DescribeFeatureType' and 'GetFeature'.
             This class is optimized for performing requests to GeoServer (http://geoserver.org).
             Supported geometries are:
             - PointPropertyType
             - LineStringPropertyType
             - PolygonPropertyType
             - CurvePropertyType
             - SurfacePropertyType
             - MultiPointPropertyType
             - MultiLineStringPropertyType
             - MultiPolygonPropertyType
             - MultiCurvePropertyType
             - MultiSurfacePropertyType
             </summary>
             <example>
             <code lang="C#">
            SharpMap.Map demoMap;
            
            const string getCapabilitiesURI = "http://localhost:8080/geoserver/wfs";
            const string serviceURI = "http://localhost:8080/geoserver/wfs";
            
            demoMap = new SharpMap.Map(new Size(600, 600));
            demoMap.MinimumZoom = 0.005;
            demoMap.BackColor = Color.White;
            
            SharpMap.Layers.VectorLayer layer1 = new SharpMap.Layers.VectorLayer("States");
            SharpMap.Layers.VectorLayer layer2 = new SharpMap.Layers.VectorLayer("SelectedStatesAndHousholds");
            SharpMap.Layers.VectorLayer layer3 = new SharpMap.Layers.VectorLayer("New Jersey");
            SharpMap.Layers.VectorLayer layer4 = new SharpMap.Layers.VectorLayer("Roads");
            SharpMap.Layers.VectorLayer layer5 = new SharpMap.Layers.VectorLayer("Landmarks");
            SharpMap.Layers.VectorLayer layer6 = new SharpMap.Layers.VectorLayer("Poi");
                
             // Demo data from Geoserver 1.5.3 and Geoserver 1.6.0 
                
            WFS prov1 = new WFS(getCapabilitiesURI, "topp", "states", WFS.WFSVersionEnum.WFS1_0_0);
                
             // Bypass 'GetCapabilities' and 'DescribeFeatureType', if you know all necessary metadata.
            WfsFeatureTypeInfo featureTypeInfo = new WfsFeatureTypeInfo(serviceURI, "topp", null, "states", "the_geom");
             // 'WFS.WFSVersionEnum.WFS1_1_0' supported by Geoserver 1.6.x
            WFS prov2 = new SharpMap.Data.Providers.WFS(featureTypeInfo, WFS.WFSVersionEnum.WFS1_1_0);
             // Bypass 'GetCapabilities' and 'DescribeFeatureType' again...
             // It's possible to specify the geometry type, if 'DescribeFeatureType' does not...(.e.g 'GeometryAssociationType')
             // This helps to accelerate the initialization process in case of unprecise geometry information.
            WFS prov3 = new WFS(serviceURI, "topp", "http://www.openplans.org/topp", "states", "the_geom", GeometryTypeEnum.MultiSurfacePropertyType, WFS.WFSVersionEnum.WFS1_1_0);
            
             // Get data-filled FeatureTypeInfo after initialization of dataprovider (useful in Web Applications for caching metadata.
            WfsFeatureTypeInfo info = prov1.FeatureTypeInfo;
            
             // Use cached 'GetCapabilities' response of prov1 (featuretype hosted by same service).
             // Compiled XPath expressions are re-used automatically!
             // If you use a cached 'GetCapabilities' response make sure the data provider uses the same version of WFS as the one providing the cache!!!
            WFS prov4 = new WFS(prov1.GetCapabilitiesCache, "tiger", "tiger_roads", WFS.WFSVersionEnum.WFS1_0_0);
            WFS prov5 = new WFS(prov1.GetCapabilitiesCache, "tiger", "poly_landmarks", WFS.WFSVersionEnum.WFS1_0_0);
            WFS prov6 = new WFS(prov1.GetCapabilitiesCache, "tiger", "poi", WFS.WFSVersionEnum.WFS1_0_0);
             // Clear cache of prov1 - data providers do not have any cache, if they use the one of another data provider  
            prov1.GetCapabilitiesCache = null;
            
             //Filters
            IFilter filter1 = new PropertyIsEqualToFilter_FE1_1_0("STATE_NAME", "California");
            IFilter filter2 = new PropertyIsEqualToFilter_FE1_1_0("STATE_NAME", "Vermont");
            IFilter filter3 = new PropertyIsBetweenFilter_FE1_1_0("HOUSHOLD", "600000", "4000000");
            IFilter filter4 = new PropertyIsLikeFilter_FE1_1_0("STATE_NAME", "New*");
            
             // SelectedStatesAndHousholds: Green
            OGCFilterCollection filterCollection1 = new OGCFilterCollection();
            filterCollection1.AddFilter(filter1);
            filterCollection1.AddFilter(filter2);
            OGCFilterCollection filterCollection2 = new OGCFilterCollection();
            filterCollection2.AddFilter(filter3);
            filterCollection1.AddFilterCollection(filterCollection2);
            filterCollection1.Junctor = OGCFilterCollection.JunctorEnum.Or;
            prov2.OGCFilter = filterCollection1;
            
             // Like-Filter('New*'): Bisque
            prov3.OGCFilter = filter4;
            
             // Layer Style
            layer1.Style.Fill = new SolidBrush(Color.IndianRed);    // States
            layer2.Style.Fill = new SolidBrush(Color.Green); // SelectedStatesAndHousholds
            layer3.Style.Fill = new SolidBrush(Color.Bisque); // e.g. New York, New Jersey,...
            layer5.Style.Fill = new SolidBrush(Color.LightBlue);
            
             // Labels
             // Labels are collected when parsing the geometry. So there's just one 'GetFeature' call necessary.
             // Otherwise (when calling twice for retrieving labels) there may be an inconsistent read...
             // If a label property is set, the quick geometry option is automatically set to 'false'.
            prov3.Label = "STATE_NAME";
            SharpMap.Layers.LabelLayer layLabel = new SharpMap.Layers.LabelLayer("labels");
            layLabel.DataSource = prov3;
            layLabel.Enabled = true;
            layLabel.LabelColumn = prov3.Label;
            layLabel.Style = new SharpMap.Styles.LabelStyle();
            layLabel.Style.CollisionDetection = false;
            layLabel.Style.CollisionBuffer = new SizeF(5, 5);
            layLabel.Style.ForeColor = Color.Black;
            layLabel.Style.Font = new Font(FontFamily.GenericSerif, 10);
            layLabel.MaxVisible = 90;
            layLabel.Style.HorizontalAlignment = SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Center;
             // Options 
             // Defaults: MultiGeometries: true, QuickGeometries: false, GetFeatureGETRequest: false
             // Render with validation...
            prov1.QuickGeometries = false;
             // Important when connecting to an UMN MapServer
            prov1.GetFeatureGETRequest = true;
             // Ignore multi-geometries...
            prov1.MultiGeometries = false;
            
             // Quick geometries
             // We need this option for prov2 since we have not passed a featuretype namespace
            prov2.QuickGeometries = true;
            prov4.QuickGeometries = true;
            prov5.QuickGeometries = true;
            prov6.QuickGeometries = true;
            
            layer1.DataSource = prov1;
            layer2.DataSource = prov2;
            layer3.DataSource = prov3;
            layer4.DataSource = prov4;
            layer5.DataSource = prov5;
            layer6.DataSource = prov6;
            
            demoMap.Layers.Add(layer1);
            demoMap.Layers.Add(layer2);
            demoMap.Layers.Add(layer3);
            demoMap.Layers.Add(layer4);
            demoMap.Layers.Add(layer5);
            demoMap.Layers.Add(layer6);
            demoMap.Layers.Add(layLabel);
            
            demoMap.Center = new GeoAPI.Geometries.Coordinate(-74.0, 40.7);
            demoMap.Zoom = 10;
             // Alternatively zoom closer
             // demoMap.Zoom = 0.2;
             // Render map
            this.mapImage1.Image = demoMap.GetMap();
             </code> 
            </example>
        </member>
        <member name="T:SharpMap.Data.Providers.WFS.WFSVersionEnum">
            <summary>
            This enumeration consists of expressions denoting WFS versions.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.WFS.WFSVersionEnum.WFS1_0_0">
            <summary>
            Version 1.0.0
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.WFS.WFSVersionEnum.WFS1_1_0">
            <summary>
            Version 1.1.0
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.WFS._tree">
            <summary>
            Tree used for fast query of data
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.GetCapabilitiesCache">
            <summary>
            This cache (obtained from an already instantiated dataprovider that retrieves a featuretype hosted by the same service) 
            helps to speed up gathering metadata. It caches the 'GetCapabilities' response. 
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.FeatureTypeInfo">
            <summary>
            Gets feature metadata 
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.AxisOrder">
            <summary>
            Gets or sets a value indicating the axis order
            </summary>
            <remarks>
            The axis order is an array of array offsets. It can be einter {0, 1} or {1, 0}.
            <para/>If not set explictly, <see cref="T:SharpMap.CoordinateSystems.AxisOrderRegistry"/> is asked for a value based on <see cref="P:SharpMap.Data.Providers.WFS.SRID"/>.</remarks>
        </member>
        <member name="F:SharpMap.Data.Providers.WFS.SpatialIndexFactory">
            <summary>
            Gets or sets a value indicating the spatial index factory
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.QuickGeometries">
            <summary>
            Gets or sets a value indicating whether extracting geometry information 
            from 'GetFeature' response shall be done quickly without paying attention to
            context validation, polygon boundaries and multi-geometries.
            This option accelerates the geometry parsing process, 
            but in scarce cases can lead to errors. 
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.MultiGeometries">
            <summary>
            Gets or sets a value indicating whether the 'GetFeature' parser
            should ignore multi-geometries (MultiPoint, MultiLineString, MultiCurve, MultiPolygon, MultiSurface). 
            By default it does not. Ignoring multi-geometries can lead to a better performance.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.GetFeatureGETRequest">
            <summary>
            Gets or sets a value indicating whether the 'GetFeature' request
            should be done with HTTP GET. This option can be important when obtaining
            data from a WFS provided by an UMN MapServer.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.OGCFilter">
            <summary>
            Gets or sets an OGC Filter.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.Label">
            <summary>
            Gets or sets the property of the featuretype responsible for labels
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.Credentials">
            <summary>
            Gets or sets the network credentials used for authenticating the request with the Internet resource
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.ProxyUrl">
            <summary>
            Gets and sets the proxy Url of the request. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(System.String,System.String,System.String,SharpMap.Utilities.Wfs.GeometryTypeEnum,SharpMap.Data.Providers.WFS.WFSVersionEnum,System.String)">
            <summary>
            Use this constructor for initializing this dataprovider with all necessary
            parameters to gather metadata from 'GetCapabilities' contract.
            </summary>
            <param name="getCapabilitiesURI">The URL for the 'GetCapabilities' request.</param>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="featureType">The name of the feature type</param>
            <param name="geometryType">
            Specifying the geometry type helps to accelerate the rendering process, 
            if the geometry type in 'DescribeFeatureType is unprecise.   
            </param>
            <param name="proxyUrl">Optional Proxy url</param>
            <param name="wfsVersion">The desired WFS Server version.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(System.String,System.String,System.String,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
            <summary>
            Use this constructor for initializing this dataprovider with all necessary
            parameters to gather metadata from 'GetCapabilities' contract.
            </summary>
            <param name="getCapabilitiesURI">The URL for the 'GetCapabilities' request.</param>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="featureType">The name of the feature type</param>
            <param name="wfsVersion">The desired WFS Server version.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
            <summary>
            Use this constructor for initializing this dataprovider with a 
            <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> object, 
            so that 'GetCapabilities' and 'DescribeFeatureType' can be bypassed.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(System.String,System.String,System.String,System.String,System.String,SharpMap.Utilities.Wfs.GeometryTypeEnum,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
            <summary>
            Use this constructor for initializing this dataprovider with all mandatory
            metadata for retrieving a featuretype, so that 'GetCapabilities' and 'DescribeFeatureType' can be bypassed.
            </summary>
            <param name="serviceURI">The service URL</param>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="featureTypeNamespace">
            Use an empty string or 'null', if there is no namespace for the featuretype.
            You don't need to know the namespace of the feature type, if you use the quick geometries option.
            </param>
            <param name="geometryName">
            The name of the geometry.   
            </param>
            <param name="geometryType">
            Specifying the geometry type helps to accelerate the rendering process.   
            </param>
            <param name="featureType">The name of the feature type</param>
            <param name="wfsVersion">The desired WFS Server version.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(System.String,System.String,System.String,System.String,System.String,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
            <summary>
            Use this constructor for initializing this dataprovider with all mandatory
            metadata for retrieving a featuretype, so that 'GetCapabilities' and 'DescribeFeatureType' can be bypassed.
            </summary>
            <param name="serviceURI">The service URL</param>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="featureTypeNamespace">
            Use an empty string or 'null', if there is no namespace for the featuretype.
            You don't need to know the namespace of the feature type, if you use the quick geometries option.
            </param>
            <param name="geometryName">The name of the geometry</param>
            <param name="featureType">The name of the feature type</param>
            <param name="wfsVersion">The desired WFS Server version.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(SharpMap.Utilities.Wfs.IXPathQueryManager,System.String,System.String,SharpMap.Utilities.Wfs.GeometryTypeEnum,SharpMap.Data.Providers.WFS.WFSVersionEnum,System.String)">
             <summary>
             Use this constructor for initializing this dataprovider with all necessary
             parameters to gather metadata from 'GetCapabilities' contract.
             </summary>
             <param name="getCapabilitiesCache">
             This cache (obtained from an already instantiated dataprovider that retrieves a featuretype hosted by the same service) 
             helps to speed up gathering metadata. It caches the 'GetCapabilities' response. 
            </param>
             <param name="nsPrefix">
             Use an empty string or 'null', if there is no prefix for the featuretype.
             </param>
             <param name="geometryType">
             Specifying the geometry type helps to accelerate the rendering process, 
             if the geometry type in 'DescribeFeatureType is unprecise.   
             </param>
             <param name="featureType">The name of the feature type</param>
             <param name="wfsVersion">The desired WFS Server version.</param>
             <param name="proxyUrl">Optional proxy url</param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(SharpMap.Utilities.Wfs.IXPathQueryManager,System.String,System.String,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
             <summary>
             Use this constructor for initializing this dataprovider with all necessary
             parameters to gather metadata from 'GetCapabilities' contract.
             </summary>
             <param name="getCapabilitiesCache">
             This cache (obtained from an already instantiated dataprovider that retrieves a featuretype hosted by the same service) 
             helps to speed up gathering metadata. It caches the 'GetCapabilities' response. 
            </param>
             <param name="nsPrefix">
             Use an empty string or 'null', if there is no prefix for the featuretype.
             </param>
             <param name="featureType">The name of the feature type</param>
             <param name="wfsVersion">The desired WFS Server version.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.GetGeometriesInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the features within the specified <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="bbox"></param>
            <returns>Features within the specified <see cref="T:GeoAPI.Geometries.Envelope"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.GetObjectIDsInView(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns all objects whose <see cref="T:GeoAPI.Geometries.Envelope"/> intersects 'bbox'.
            </summary>
            <remarks>
            This method is usually much faster than the QueryFeatures method, because intersection tests
            are performed on objects simplified by their <see cref="T:GeoAPI.Geometries.Envelope"/>, and using the Spatial Index
            </remarks>
            <param name="bbox">Box that objects should intersect</param>
            <returns></returns>
            <exception cref="T:System.Exception">Thrown in any case</exception>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
            <exception cref="T:System.Exception">Thrown in any case</exception>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
            <exception cref="T:System.Exception">Thrown in any case</exception>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.GetFeature(System.UInt32)">
            <summary>
            Returns a <see cref="T:SharpMap.Data.FeatureDataRow"/> based on a RowID
            </summary>
            <param name="rowId">The id of the row.</param>
            <returns>datarow</returns>
            <exception cref="T:System.Exception">Thrown in any case</exception>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.GetExtents">
            <summary>
            The <see cref="T:GeoAPI.Geometries.Envelope"/> of dataset
            </summary>
            <returns>The 2d extent of the layer</returns>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.ConnectionID">
            <summary>
            Gets the service-qualified name of the featuretype.
            The service-qualified name enables the differentiation between featuretypes 
            from different services with an equal qualified name and therefore can be
            regarded as an ID for the featuretype.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.UseCache">
            <summary>
            Gets or sets a value indicating whether caching is enabled.
            </summary>
            <remarks>
            When cache is enabled all geometries are downloaded from server depending on the OGC filter set, 
            and then cached on client to fullfill next requests.
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.Dispose">
            <summary>
            Method to perform cleanup work
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.Dispose(System.Boolean)">
            <summary>
            Implementation of the Dispose patter
            </summary>
            <param name="disposing">Flag indicating if called from <see cref="M:SharpMap.Data.Providers.WFS.Dispose"/> or a finalizer.</param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.GetFeatureTypeInfo">
            <summary>
            This method gets metadata about the featuretype to query from 'GetCapabilities' and 'DescribeFeatureType'.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator">
            <summary>
            This class configures a <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> class 
            for requests to a Web Feature Service.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator.#ctor(SharpMap.Utilities.Wfs.IWFS_TextResources)">
             <summary>
             Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator"/> class.
             An instance of this class can be used to configure a <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> object.
             </summary>
             <param name="wfsTextResources">
             An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IWFS_TextResources" /> 
             for getting version-specific text resources for WFS request configuration.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator.configureForWfsGetCapabilitiesRequest(SharpMap.Utilities.Wfs.HttpClientUtil,System.String)">
            <summary>
            Configures for WFS 'GetCapabilities' request using an instance implementing <see cref="T:SharpMap.Utilities.Wfs.IWFS_TextResources"/>.
            The <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance is returned for immediate usage. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator.configureForWfsDescribeFeatureTypeRequest(SharpMap.Utilities.Wfs.HttpClientUtil,System.String,System.String)">
            <summary>
            Configures for WFS 'DescribeFeatureType' request using an instance implementing <see cref="T:SharpMap.Utilities.Wfs.IWFS_TextResources"/>.
            The <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance is returned for immediate usage. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator.configureForWfsGetFeatureRequest(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,System.String,GeoAPI.Geometries.Envelope,SharpMap.Utilities.Wfs.IFilter,System.Boolean,System.Boolean)">
            <summary>
            Configures for WFS 'GetFeature' request using an instance implementing <see cref="T:SharpMap.Utilities.Wfs.IWFS_TextResources"/>.
            The <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance is returned for immediate usage. 
            </summary>
        </member>
        <member name="T:SharpMap.Drawing.ArgbValueAttribute">
            <summary>
            Attribute class to associate ARGB value with <see cref="T:SharpMap.Drawing.KnownColor" /> enum member
            </summary>
        </member>
        <member name="M:SharpMap.Drawing.ArgbValueAttribute.#ctor(System.Int32)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="argb">The ARGB value</param>
        </member>
        <member name="P:SharpMap.Drawing.ArgbValueAttribute.Argb">
            <summary>
            Gets a value indicating the ARGB value
            </summary>
        </member>
        <member name="T:SharpMap.Drawing.KnownColor">
            <summary>
            Straight copy of <c>System.Drawing.KnownColor</c> names
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ActiveBorder">
            <summary>
            Color ActiveBorder (#B4B4B4)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ActiveCaption">
            <summary>
            Color ActiveCaption (#99B4D1)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ActiveCaptionText">
            <summary>
            Color ActiveCaptionText (#0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.AppWorkspace">
            <summary>
            Color AppWorkspace (#ABABAB)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Control">
            <summary>
            Color Control (#F0F0F0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ControlDark">
            <summary>
            Color ControlDark (#A0A0A0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ControlDarkDark">
            <summary>
            Color ControlDarkDark (#696969)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ControlLight">
            <summary>
            Color ControlLight (#E3E3E3)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ControlLightLight">
            <summary>
            Color ControlLightLight (#FFFFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ControlText">
            <summary>
            Color ControlText (#0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Desktop">
            <summary>
            Color Desktop (#0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.GrayText">
            <summary>
            Color GrayText (#6D6D6D)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Highlight">
            <summary>
            Color Highlight (#78D7)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.HighlightText">
            <summary>
            Color HighlightText (#FFFFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.HotTrack">
            <summary>
            Color HotTrack (#66CC)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.InactiveBorder">
            <summary>
            Color InactiveBorder (#F4F7FC)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.InactiveCaption">
            <summary>
            Color InactiveCaption (#BFCDDB)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.InactiveCaptionText">
            <summary>
            Color InactiveCaptionText (#0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Info">
            <summary>
            Color Info (#FFFFE1)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.InfoText">
            <summary>
            Color InfoText (#0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Menu">
            <summary>
            Color Menu (#F0F0F0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MenuText">
            <summary>
            Color MenuText (#0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ScrollBar">
            <summary>
            Color ScrollBar (#C8C8C8)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Window">
            <summary>
            Color Window (#FFFFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.WindowFrame">
            <summary>
            Color WindowFrame (#646464)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.WindowText">
            <summary>
            Color WindowText (#0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Transparent">
            <summary>
            Color Transparent (#FFFFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.AliceBlue">
            <summary>
            Color AliceBlue (#F0F8FF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.AntiqueWhite">
            <summary>
            Color AntiqueWhite (#FAEBD7)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Aqua">
            <summary>
            Color Aqua (#FFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Aquamarine">
            <summary>
            Color Aquamarine (#7FFFD4)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Azure">
            <summary>
            Color Azure (#F0FFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Beige">
            <summary>
            Color Beige (#F5F5DC)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Bisque">
            <summary>
            Color Bisque (#FFE4C4)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Black">
            <summary>
            Color Black (#0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.BlanchedAlmond">
            <summary>
            Color BlanchedAlmond (#FFEBCD)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Blue">
            <summary>
            Color Blue (#FF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.BlueViolet">
            <summary>
            Color BlueViolet (#8A2BE2)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Brown">
            <summary>
            Color Brown (#A52A2A)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.BurlyWood">
            <summary>
            Color BurlyWood (#DEB887)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.CadetBlue">
            <summary>
            Color CadetBlue (#5F9EA0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Chartreuse">
            <summary>
            Color Chartreuse (#7FFF00)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Chocolate">
            <summary>
            Color Chocolate (#D2691E)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Coral">
            <summary>
            Color Coral (#FF7F50)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.CornflowerBlue">
            <summary>
            Color CornflowerBlue (#6495ED)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Cornsilk">
            <summary>
            Color Cornsilk (#FFF8DC)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Crimson">
            <summary>
            Color Crimson (#DC143C)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Cyan">
            <summary>
            Color Cyan (#FFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkBlue">
            <summary>
            Color DarkBlue (#8B)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkCyan">
            <summary>
            Color DarkCyan (#8B8B)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkGoldenrod">
            <summary>
            Color DarkGoldenrod (#B8860B)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkGray">
            <summary>
            Color DarkGray (#A9A9A9)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkGreen">
            <summary>
            Color DarkGreen (#6400)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkKhaki">
            <summary>
            Color DarkKhaki (#BDB76B)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkMagenta">
            <summary>
            Color DarkMagenta (#8B008B)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkOliveGreen">
            <summary>
            Color DarkOliveGreen (#556B2F)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkOrange">
            <summary>
            Color DarkOrange (#FF8C00)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkOrchid">
            <summary>
            Color DarkOrchid (#9932CC)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkRed">
            <summary>
            Color DarkRed (#8B0000)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkSalmon">
            <summary>
            Color DarkSalmon (#E9967A)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkSeaGreen">
            <summary>
            Color DarkSeaGreen (#8FBC8B)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkSlateBlue">
            <summary>
            Color DarkSlateBlue (#483D8B)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkSlateGray">
            <summary>
            Color DarkSlateGray (#2F4F4F)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkTurquoise">
            <summary>
            Color DarkTurquoise (#CED1)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DarkViolet">
            <summary>
            Color DarkViolet (#9400D3)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DeepPink">
            <summary>
            Color DeepPink (#FF1493)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DeepSkyBlue">
            <summary>
            Color DeepSkyBlue (#BFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DimGray">
            <summary>
            Color DimGray (#696969)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.DodgerBlue">
            <summary>
            Color DodgerBlue (#1E90FF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Firebrick">
            <summary>
            Color Firebrick (#B22222)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.FloralWhite">
            <summary>
            Color FloralWhite (#FFFAF0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ForestGreen">
            <summary>
            Color ForestGreen (#228B22)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Fuchsia">
            <summary>
            Color Fuchsia (#FF00FF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Gainsboro">
            <summary>
            Color Gainsboro (#DCDCDC)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.GhostWhite">
            <summary>
            Color GhostWhite (#F8F8FF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Gold">
            <summary>
            Color Gold (#FFD700)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Goldenrod">
            <summary>
            Color Goldenrod (#DAA520)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Gray">
            <summary>
            Color Gray (#808080)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Green">
            <summary>
            Color Green (#8000)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.GreenYellow">
            <summary>
            Color GreenYellow (#ADFF2F)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Honeydew">
            <summary>
            Color Honeydew (#F0FFF0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.HotPink">
            <summary>
            Color HotPink (#FF69B4)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.IndianRed">
            <summary>
            Color IndianRed (#CD5C5C)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Indigo">
            <summary>
            Color Indigo (#4B0082)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Ivory">
            <summary>
            Color Ivory (#FFFFF0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Khaki">
            <summary>
            Color Khaki (#F0E68C)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Lavender">
            <summary>
            Color Lavender (#E6E6FA)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LavenderBlush">
            <summary>
            Color LavenderBlush (#FFF0F5)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LawnGreen">
            <summary>
            Color LawnGreen (#7CFC00)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LemonChiffon">
            <summary>
            Color LemonChiffon (#FFFACD)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightBlue">
            <summary>
            Color LightBlue (#ADD8E6)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightCoral">
            <summary>
            Color LightCoral (#F08080)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightCyan">
            <summary>
            Color LightCyan (#E0FFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightGoldenrodYellow">
            <summary>
            Color LightGoldenrodYellow (#FAFAD2)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightGray">
            <summary>
            Color LightGray (#D3D3D3)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightGreen">
            <summary>
            Color LightGreen (#90EE90)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightPink">
            <summary>
            Color LightPink (#FFB6C1)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightSalmon">
            <summary>
            Color LightSalmon (#FFA07A)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightSeaGreen">
            <summary>
            Color LightSeaGreen (#20B2AA)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightSkyBlue">
            <summary>
            Color LightSkyBlue (#87CEFA)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightSlateGray">
            <summary>
            Color LightSlateGray (#778899)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightSteelBlue">
            <summary>
            Color LightSteelBlue (#B0C4DE)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LightYellow">
            <summary>
            Color LightYellow (#FFFFE0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Lime">
            <summary>
            Color Lime (#FF00)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.LimeGreen">
            <summary>
            Color LimeGreen (#32CD32)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Linen">
            <summary>
            Color Linen (#FAF0E6)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Magenta">
            <summary>
            Color Magenta (#FF00FF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Maroon">
            <summary>
            Color Maroon (#800000)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MediumAquamarine">
            <summary>
            Color MediumAquamarine (#66CDAA)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MediumBlue">
            <summary>
            Color MediumBlue (#CD)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MediumOrchid">
            <summary>
            Color MediumOrchid (#BA55D3)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MediumPurple">
            <summary>
            Color MediumPurple (#9370DB)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MediumSeaGreen">
            <summary>
            Color MediumSeaGreen (#3CB371)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MediumSlateBlue">
            <summary>
            Color MediumSlateBlue (#7B68EE)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MediumSpringGreen">
            <summary>
            Color MediumSpringGreen (#FA9A)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MediumTurquoise">
            <summary>
            Color MediumTurquoise (#48D1CC)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MediumVioletRed">
            <summary>
            Color MediumVioletRed (#C71585)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MidnightBlue">
            <summary>
            Color MidnightBlue (#191970)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MintCream">
            <summary>
            Color MintCream (#F5FFFA)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MistyRose">
            <summary>
            Color MistyRose (#FFE4E1)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Moccasin">
            <summary>
            Color Moccasin (#FFE4B5)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.NavajoWhite">
            <summary>
            Color NavajoWhite (#FFDEAD)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Navy">
            <summary>
            Color Navy (#80)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.OldLace">
            <summary>
            Color OldLace (#FDF5E6)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Olive">
            <summary>
            Color Olive (#808000)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.OliveDrab">
            <summary>
            Color OliveDrab (#6B8E23)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Orange">
            <summary>
            Color Orange (#FFA500)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.OrangeRed">
            <summary>
            Color OrangeRed (#FF4500)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Orchid">
            <summary>
            Color Orchid (#DA70D6)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.PaleGoldenrod">
            <summary>
            Color PaleGoldenrod (#EEE8AA)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.PaleGreen">
            <summary>
            Color PaleGreen (#98FB98)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.PaleTurquoise">
            <summary>
            Color PaleTurquoise (#AFEEEE)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.PaleVioletRed">
            <summary>
            Color PaleVioletRed (#DB7093)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.PapayaWhip">
            <summary>
            Color PapayaWhip (#FFEFD5)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.PeachPuff">
            <summary>
            Color PeachPuff (#FFDAB9)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Peru">
            <summary>
            Color Peru (#CD853F)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Pink">
            <summary>
            Color Pink (#FFC0CB)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Plum">
            <summary>
            Color Plum (#DDA0DD)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.PowderBlue">
            <summary>
            Color PowderBlue (#B0E0E6)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Purple">
            <summary>
            Color Purple (#800080)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Red">
            <summary>
            Color Red (#FF0000)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.RosyBrown">
            <summary>
            Color RosyBrown (#BC8F8F)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.RoyalBlue">
            <summary>
            Color RoyalBlue (#4169E1)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.SaddleBrown">
            <summary>
            Color SaddleBrown (#8B4513)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Salmon">
            <summary>
            Color Salmon (#FA8072)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.SandyBrown">
            <summary>
            Color SandyBrown (#F4A460)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.SeaGreen">
            <summary>
            Color SeaGreen (#2E8B57)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.SeaShell">
            <summary>
            Color SeaShell (#FFF5EE)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Sienna">
            <summary>
            Color Sienna (#A0522D)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Silver">
            <summary>
            Color Silver (#C0C0C0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.SkyBlue">
            <summary>
            Color SkyBlue (#87CEEB)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.SlateBlue">
            <summary>
            Color SlateBlue (#6A5ACD)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.SlateGray">
            <summary>
            Color SlateGray (#708090)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Snow">
            <summary>
            Color Snow (#FFFAFA)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.SpringGreen">
            <summary>
            Color SpringGreen (#FF7F)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.SteelBlue">
            <summary>
            Color SteelBlue (#4682B4)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Tan">
            <summary>
            Color Tan (#D2B48C)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Teal">
            <summary>
            Color Teal (#8080)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Thistle">
            <summary>
            Color Thistle (#D8BFD8)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Tomato">
            <summary>
            Color Tomato (#FF6347)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Turquoise">
            <summary>
            Color Turquoise (#40E0D0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Violet">
            <summary>
            Color Violet (#EE82EE)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Wheat">
            <summary>
            Color Wheat (#F5DEB3)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.White">
            <summary>
            Color White (#FFFFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.WhiteSmoke">
            <summary>
            Color WhiteSmoke (#F5F5F5)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.Yellow">
            <summary>
            Color Yellow (#FFFF00)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.YellowGreen">
            <summary>
            Color YellowGreen (#9ACD32)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ButtonFace">
            <summary>
            Color ButtonFace (#F0F0F0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ButtonHighlight">
            <summary>
            Color ButtonHighlight (#FFFFFF)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.ButtonShadow">
            <summary>
            Color ButtonShadow (#A0A0A0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.GradientActiveCaption">
            <summary>
            Color GradientActiveCaption (#B9D1EA)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.GradientInactiveCaption">
            <summary>
            Color GradientInactiveCaption (#D7E4F2)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MenuBar">
            <summary>
            Color MenuBar (#F0F0F0)
            </summary>
        </member>
        <member name="F:SharpMap.Drawing.KnownColor.MenuHighlight">
            <summary>
            Color MenuHighlight (#3399FF)
            </summary>
        </member>
        <member name="T:SharpMap.ISession">
            <summary>
            A SharpMap session
            </summary>
        </member>
        <member name="P:SharpMap.ISession.GeometryServices">
            <summary>
            The geometry services instance
            </summary>
        </member>
        <member name="P:SharpMap.ISession.CoordinateSystemServices">
            <summary>
            Gets the coordinate system services instance
            </summary>
        </member>
        <member name="P:SharpMap.ISession.CoordinateSystemRepository">
            <summary>
            Gets the coordinate system repository
            </summary>
        </member>
        <member name="M:SharpMap.ISession.SetGeometryServices(GeoAPI.IGeometryServices)">
            <summary>
            Method to set the <see cref="P:SharpMap.ISession.GeometryServices"/> for a session
            </summary>
            <param name="geometryServices">The geometry services object</param>
            <returns>The updated session</returns>
        </member>
        <member name="M:SharpMap.ISession.SetCoordinateSystemServices(GeoAPI.ICoordinateSystemServices)">
            <summary>
            Method to set the <see cref="P:SharpMap.ISession.CoordinateSystemServices"/> for a session
            </summary>
            <param name="csServices">The <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystem"/>s services object</param>
            <returns>The updated session</returns>
        </member>
        <member name="M:SharpMap.ISession.SetCoordinateSystemRepository(GeoAPI.ICoordinateSystemRepository)">
            <summary>
            Method to set the <see cref="P:SharpMap.ISession.CoordinateSystemRepository"/> for a session
            </summary>
            <param name="csRepository">The <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystem"/>s repository</param>
            <returns>The updated session</returns>
        </member>
        <member name="T:SharpMap.Layers.AsyncLayerProxyLayer">
            <summary>
            A proxy class to allow async tile rendering for static layers
            </summary>
            <example lang="C#">
            var map = new SharpMap.Map(new System.Drawing.Size(1024, 786));
            var provider = new SharpMap.Data.Providers.Shapefile("&lt;Path to shapefile&gt;", true);
            var layer = new SharpMap.Layers.VectorLayer("LAYER1", provider);
            map.BackgroundLayer.Add(AsyncLayerProxyLayer.Create(layer));
            </example>
        </member>
        <member name="F:SharpMap.Layers.AsyncLayerProxyLayer.RenderTask.CancellationToken">
            <summary>
            The token to cancel the task
            </summary>
        </member>
        <member name="F:SharpMap.Layers.AsyncLayerProxyLayer.RenderTask.Task">
            <summary>
            The task
            </summary>
        </member>
        <member name="M:SharpMap.Layers.AsyncLayerProxyLayer.Create(SharpMap.Layers.ILayer,System.Nullable{System.Drawing.Size})">
            <summary>
            Method to warp a usual layer in an async layer
            </summary>
            <param name="layer">The layer to wrap</param>
            <param name="tileSize">The size of the tile</param>
            <returns>A async tile layer</returns>
        </member>
        <member name="M:SharpMap.Layers.AsyncLayerProxyLayer.#ctor(SharpMap.Layers.ILayer,System.Drawing.Size)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="baseLayer">The layer to proxy</param>
            <param name="cellSize">The size of the tile</param>
        </member>
        <member name="P:SharpMap.Layers.AsyncLayerProxyLayer.SharpMap#Layers#ILayer#VisibilityUnits">
            <summary>
            Gets or Sets what level-reference the Min/Max values are defined in
            </summary>
        </member>
        <member name="P:SharpMap.Layers.AsyncLayerProxyLayer.SharpMap#Layers#ILayer#Enabled">
            <summary>
            Specifies whether this layer should be rendered or not
            </summary>
        </member>
        <member name="P:SharpMap.Layers.AsyncLayerProxyLayer.LayerTitle">
            <summary>
            Optional title of the layer. It will be used for services like WMS where both Name and Title are supported.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.AsyncLayerProxyLayer.SharpMap#Layers#ILayer#LayerName">
            <summary>
            Name of layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.AsyncLayerProxyLayer.SharpMap#Layers#ILayer#Envelope">
            <summary>
            Gets the boundingbox of the entire layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.AsyncLayerProxyLayer.SharpMap#Layers#ILayer#SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="P:SharpMap.Layers.AsyncLayerProxyLayer.SharpMap#Layers#ILayer#TargetSRID">
            <summary>
            The spatial reference ID (CRS) that can be exposed externally.
            </summary>
            <remarks>
            TODO: explain better why I need this property
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.AsyncLayerProxyLayer.SharpMap#Layers#ILayer#Proj4Projection">
            <summary>
            Proj4 String Projection
            </summary>
        </member>
        <member name="M:SharpMap.Layers.AsyncLayerProxyLayer.SharpMap#Layers#ILayer#Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="E:SharpMap.Layers.AsyncLayerProxyLayer.MapNewTileAvaliable">
            <summary>
            Event raised when a new tile has been rendered an is now avalable
            </summary>
        </member>
        <member name="E:SharpMap.Layers.AsyncLayerProxyLayer.DownloadProgressChanged">
            <summary>
            Event raised when the rendering of tiles has made progress
            </summary>
        </member>
        <member name="M:SharpMap.Layers.AsyncLayerProxyLayer.OnTileRendered(System.Drawing.Point,GeoAPI.Geometries.Envelope,System.Drawing.Bitmap)">
            <summary>
            Method to raise the map tile available event
            </summary>
            <param name="ptInsert"></param>
            <param name="env"></param>
            <param name="bmp"></param>
        </member>
        <member name="M:SharpMap.Layers.AsyncLayerProxyLayer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:SharpMap.Layers.DuplicateLayerException">
            <summary>
            Exception thrown when a layer with a name which is the same
            as an existing layer is added to a <see cref="T:SharpMap.Layers.LayerCollection"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.String)">
            <summary>
            Creates a new instance of DuplicateLayerException, indicating
            the duplicate layer name by <paramref name="duplicateLayerName"/>.
            </summary>
            <param name="duplicateLayerName">
            The existing layer name which was duplicated.
            </param>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of DuplicateLayerException, indicating
            the duplicate layer name by <paramref name="duplicateLayerName"/>
            and including a message.
            </summary>
            <param name="duplicateLayerName">
            The existing layer name which was duplicated.
            </param>
            <param name="message">Additional information about the exception.</param>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of DuplicateLayerException, indicating
            the duplicate layer name by <paramref name="duplicateLayerName"/>
            and including a message.
            </summary>
            <param name="duplicateLayerName">
            The existing layer name which was duplicated.
            </param>
            <param name="message">
            Additional information about the exception.
            </param>
            <param name="inner">
            An exception which caused this exception, if any.
            </param>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of DuplicateLayerException from serialized data,
            <paramref name="info"/>.
            </summary>
            <param name="info">The serialization data.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="P:SharpMap.Layers.DuplicateLayerException.DuplicateLayerName">
            <summary>
            Gets the existing layer name which was duplicated.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization function
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="T:SharpMap.Layers.GdiImageLayer">
            <summary>
            Image to 
            </summary>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.#ctor(System.String)">
            <summary>
            Creates an instance of this class using the provided layer
            </summary>
            <param name="fileName">The path to the file</param>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of this class using the provided layer
            </summary>
            <param name="layerName">The name of the layer</param>
            <param name="fileName">The path to the file</param>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates an instance of this class using the provided <paramref name="layerName"/> and <paramref name="image"/>.
            </summary>
            <param name="layerName">The layer name</param>
            <param name="image"></param>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.SetEnvelope">
            <summary>
            Method to set the <see cref="P:SharpMap.Layers.GdiImageLayer.Envelope"/>
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.ImageFilename">
            <summary>
            Gets or sets the filename for the image
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.Image">
            <summary>
            Gets or sets a value indicating the image to display
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.Transparency">
            <summary>
            Gets or sets a value indicating the transparency level
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.InterpolationMode">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.InterpolationMode"/> to use
            </summary>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.Clip(System.Drawing.Point)">
            <summary>
            Clip to the extent of the image
            </summary>
            <param name="pt">The point</param>
            <returns>The clipped point</returns>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.SetEnvelope(System.String)">
            <summary>
            Set the envelope by the definition in the world file
            </summary>
            <param name="fileName">Filename to the image</param>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.ReadWorldFile(System.String)">
            <summary>
            Function to read a <see cref="T:SharpMap.Layers.GdiImageLayer.WorldFile"/> for the <see cref="P:SharpMap.Layers.GdiImageLayer.Image"/> and the provided <paramref name="wld">world file </paramref>
            </summary>
            <param name="wld">The world file</param>
            <returns>The <see cref="T:SharpMap.Layers.GdiImageLayer.WorldFile"/></returns>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.WorldFile.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="a11">x-component of the pixel width</param>
            <param name="a21">y-component of the pixel width</param>
            <param name="a12">x-component of the pixel height</param>
            <param name="a22">y-component of the pixel height</param>
            <param name="b1">x-ordinate of the center of the top left pixel</param>
            <param name="b2">y-ordinate of the center of the top left pixel</param>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.WorldFile.Load(System.String)">
            <summary>
            Loads a world file
            </summary>
            <param name="file">The filename</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.WorldFile.Save(System.String)">
            <summary>
            Saves a world file
            </summary>
            <param name="file">The filename</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.A11">
            <summary>
            x-component of the pixel width
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.A21">
            <summary>
            y-component of the pixel width
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.A12">
            <summary>
            x-component of the pixel height
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.A22">
            <summary>
            y-component of the pixel height (negative most of the time)
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.B1">
            <summary>
            x-ordinate of the center of the top left pixel
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.B2">
            <summary>
            y-ordinate of the center of the top left pixel
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.Location">
            <summary>
            Gets a value indicating the point (<see cref="P:SharpMap.Layers.GdiImageLayer.WorldFile.B1"/>, <see cref="P:SharpMap.Layers.GdiImageLayer.WorldFile.B2"/>).
            </summary>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.WorldFile.ToGround(System.Int32,System.Int32)">
            <summary>
            Function to compute the ground coordinate for a given <paramref name="x"/>, <paramref name="y"/> pair.
            </summary>
            <param name="x">The x pixel</param>
            <param name="y">The y pixel</param>
            <returns>The ground coordinate</returns>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.WorldFile.ToGroundX(System.Int32,System.Int32)">
            <summary>
            Function to compute the ground x-ordinate for a given <paramref name="x"/>, <paramref name="y"/> pair.
            </summary>
            <param name="x">The x pixel</param>
            <param name="y">The y pixel</param>
            <returns>The ground coordinate</returns>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.WorldFile.ToGroundY(System.Int32,System.Int32)">
            <summary>
            Function to compute the ground y-ordinate for a given <paramref name="x"/>, <paramref name="y"/> pair.
            </summary>
            <param name="x">The x pixel</param>
            <param name="y">The y pixel</param>
            <returns>The ground coordinate</returns>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.WorldFile.ToGroundBounds(System.Int32,System.Int32)">
            <summary>
            Function to compute the ground bounding-ordinate for a given <paramref name="width"/>, <paramref name="height"/> pair.
            </summary>
            <param name="width">The width pixel</param>
            <param name="height">The height pixel</param>
            <returns>The ground coordinate</returns>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.Matrix2D.A11">
            <summary>
            x-component of the pixel width
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.Matrix2D.A21">
            <summary>
            y-component of the pixel width
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.Matrix2D.A12">
            <summary>
            x-component of the pixel height
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.Matrix2D.A22">
            <summary>
            y-component of the pixel height (negative most of the time)
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.Matrix2D.Determinant">
            <summary>
            Gets a value indicating the determinant of this matrix
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayer.WorldFile.Matrix2D.IsInvertible">
            <summary>
            Gets a value indicating that <see cref="M:SharpMap.Layers.GdiImageLayer.WorldFile.Matrix2D.Inverse"/> can be computed.
            </summary>
            <remarks>
            Shortcut for <c><see cref="P:SharpMap.Layers.GdiImageLayer.WorldFile.Matrix2D.Determinant"/> != 0d</c>
            </remarks>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayer.WorldFile.Matrix2D.Inverse">
            <summary>
            Method to compute the inverse Matrix of this matrix
            </summary>
            <returns>The inverse matrix</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="T:SharpMap.Layers.GdiImageLayerProxy`1">
            <summary>
            Image manipulation proxy layer
            </summary>
            <remarks>Note: This layer is not for layers implementing <see cref="T:SharpMap.Layers.ITileAsyncLayer"/>.</remarks>
            <typeparam name="T">The type of the proxy layer. <see cref="T:SharpMap.Layers.ITileAsyncLayer"/> are not excluded, but are not handled in any way.</typeparam>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayerProxy`1.CreateGreyScale(`0)">
            <summary>
            Creates a proxy class that transforms all colors to grey scale
            </summary>
            <param name="baseLayer">The layer to be proxied</param>
            <returns>A proxy layer</returns>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayerProxy`1.#ctor(`0,System.Single)">
            <summary>
            Creates an instance of this class using the provided <paramref name="opacity"/>
            </summary>
            <param name="layer">The layer to be proxied</param>
            <param name="opacity">An opacity value in the range of [0f, 1f]. Values outside of that range will be clipped.</param>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayerProxy`1.#ctor(`0,System.Drawing.Imaging.ColorMatrix)">
            <summary>
            Creates an instance of this class using the provided <paramref name="colorMatrix"/>
            </summary>
            <param name="layer">The layer to be proxied</param>
            <param name="colorMatrix">A color matrix that is to be applied upon drawing</param>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayerProxy`1.#ctor(`0,System.Drawing.Imaging.ColorMap[])">
            <summary>
            Creates an instance of this class using the provided <paramref name="colorMap"/>
            </summary>
            <param name="layer">The layer to be proxied</param>
            <param name="colorMap">The color map</param>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayerProxy`1.BaseLayer">
            <summary>
            Gets a value indicating the proxied base layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayerProxy`1.VisibilityUnits">
            <summary>
            Gets or Sets what level-reference the Min/Max values are defined in
            </summary>
        </member>
        <member name="P:SharpMap.Layers.GdiImageLayerProxy`1.LayerTitle">
            <summary>
            Optional title of layer. It will be used for services like WMS where both Name and Title are supported.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.GdiImageLayerProxy`1.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:SharpMap.Layers.MapNewTileAvaliabledHandler">
            <summary>
            Delegate function definition for handling <see cref="T:SharpMap.Layers.ITileAsyncLayer"/>s <see cref="E:SharpMap.Layers.ITileAsyncLayer.MapNewTileAvaliable"/> event
            </summary>
            <param name="sender">The sender</param>
            <param name="bbox">The bounding box of the tile</param>
            <param name="bm">The tile bitmap</param>
            <param name="sourceWidth">The tiles width</param>
            <param name="sourceHeight">The tiles height</param>
            <param name="imageAttributes">The <see cref="T:System.Drawing.Imaging.ImageAttributes"/> to use when rendering the tile</param>
        </member>
        <member name="T:SharpMap.Layers.DownloadProgressHandler">
            <summary>
            Delegate for notifying download of tiles
            </summary>
            <param name="tilesRemaining"></param>
        </member>
        <member name="T:SharpMap.Layers.ITileAsyncLayer">
            <summary>
            Interface for async tile layers
            </summary>
        </member>
        <member name="E:SharpMap.Layers.ITileAsyncLayer.MapNewTileAvaliable">
            <summary>
            Event raised when a new tile is available
            </summary>
        </member>
        <member name="E:SharpMap.Layers.ITileAsyncLayer.DownloadProgressChanged">
            <summary>
            Event raised when download progress of tiles has changed
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ITileAsyncLayer.OnlyRedrawWhenComplete">
            <summary>
            Gets or sets a value indicating if the map only should only be redrawn when all tiles are downloaded
            </summary>
        </member>
        <member name="M:SharpMap.Layers.ITileAsyncLayer.Cancel">
            <summary>
            Method to cancel the async layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ITileAsyncLayer.NumPendingDownloads">
            <summary>
            Returns the number of tiles that are in queue for download
            </summary>
        </member>
        <member name="T:SharpMap.Layers.ICanQueryLayer">
            <summary>
            Interface for Layers, that can be queried
            </summary>
        </member>
        <member name="M:SharpMap.Layers.ICanQueryLayer.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            
            Note! The table added should be named according to the LayerName!
            </summary>
            <param name="box">Bounding box to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Layers.ICanQueryLayer.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            
            Note! The table added should be named according to the LayerName!
            </summary>
            <param name="geometry">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="P:SharpMap.Layers.ICanQueryLayer.IsQueryEnabled">
            <summary>
            Whether the layer is queryable when used in a SharpMap.Web.Wms.WmsServer, 
            ExecuteIntersectionQuery() will be possible in all other situations when set to FALSE.
            This property currently only applies to WMS and should perhaps be moved to a WMS
            specific class.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.ILayer">
            <summary>
            Interface for map layers
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.MinVisible">
            <summary>
            Minimum visible zoom level
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.MaxVisible">
            <summary>
            Minimum visible zoom level
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.VisibilityUnits">
            <summary>
            Gets or Sets what level-reference the Min/Max values are defined in
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Enabled">
            <summary>
            Specifies whether this layer should be rendered or not
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.LayerName">
            <summary>
            Name of layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.LayerTitle">
            <summary>
            Optional title of layer. It will be used for services like WMS where both Name and Title are supported.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Envelope">
            <summary>
            Gets the boundingbox of the entire layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.TargetSRID">
            <summary>
            The spatial reference ID (CRS) that can be exposed externally.
            </summary>
            <remarks>
            TODO: explain better why I need this property
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Proj4Projection">
            <summary>
            Proj4 String Projection
            </summary>
        </member>
        <member name="M:SharpMap.Layers.ILayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.ILayer.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Renders the layer using the current viewport
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="T:SharpMap.Layers.ILayerEx">
            <summary>
            An extended layer interface
            </summary>
        </member>
        <member name="M:SharpMap.Layers.ILayerEx.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Renders the layer using the current viewport, returning a rectangle describing the area covered.
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="mvp">Map which is rendered</param>
            <returns>Rectangle enclosing the actual area rendered on the graphics canvas</returns>
        </member>
        <member name="M:SharpMap.Layers.ILayerEx.RaiseRenderRequired">
            <summary>
            Method to invoke <see cref="E:SharpMap.Layers.ILayerEx.RenderRequired"/> event.
            </summary>
        </member>
        <member name="E:SharpMap.Layers.ILayerEx.RenderRequired">
            <summary>
            Event raised when a layer needs to be rendered
            </summary>
        </member>
        <member name="T:SharpMap.Layers.ILayersContainer">
            <summary>
            Interface to mark entities that expose layers.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayersContainer.Layers">
            <summary>
            Gets the layers exposed.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer">
            <summary>
            Label layer class
            </summary>
            <example>
            Creates a new label layer and sets the label text to the "Name" column in the FeatureDataTable of the datasource
            <code lang="C#">
            //Set up a label layer
            SharpMap.Layers.LabelLayer layLabel = new SharpMap.Layers.LabelLayer("Country labels");
            layLabel.DataSource = layCountries.DataSource;
            layLabel.Enabled = true;
            layLabel.LabelColumn = "Name";
            layLabel.Style = new SharpMap.Styles.LabelStyle();
            layLabel.Style.CollisionDetection = true;
            layLabel.Style.CollisionBuffer = new SizeF(20, 20);
            layLabel.Style.ForeColor = Color.White;
            layLabel.Style.Font = new Font(FontFamily.GenericSerif, 8);
            layLabel.MaxVisible = 90;
            layLabel.Style.HorizontalAlignment = SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Center;
            </code>
            </example>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.GetLabelMethod">
            <summary>
            Delegate method for creating advanced label texts
            </summary>
            <param name="fdr">the <see cref="T:SharpMap.Data.FeatureDataRow"/> to build the label for</param>
            <returns>the label</returns>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.GetPriorityMethod">
            <summary>
            Delegate method for calculating the priority of label rendering
            </summary>
            <param name="fdr">the <see cref="T:SharpMap.Data.FeatureDataRow"/> to compute the priority value from</param>
            <returns>the priority value</returns>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.GetLocationMethod">
            <summary>
            Delegate method for advanced placement of the label position
            </summary>
            <param name="fdr">the <see cref="T:SharpMap.Data.FeatureDataRow"/> to compute the label position from</param>
            <returns>the priority value</returns>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum">
            <summary>
            Labelling behaviour for Multipart geometry collections
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.All">
            <summary>
            Place label on all parts (default)
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.Largest">
            <summary>
            Place label on object which the greatest length or area.
            </summary>
            <remarks>
            Multipoint geometries will default to <see cref="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.First"/>
            </remarks>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.CommonCenter">
            <summary>
            The center of the combined geometries
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.First">
            <summary>
            Center of the first geometry in the collection (fastest method)
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer._labelColumn">
            <summary>
            Name of the column that holds the value for the label.
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer._labelFilter">
            <summary>
            Delegate for custom Label Collision Detection
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer._priority">
            <summary>
            A value indication the priority of the label in cases of label-collision detection
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer._priorityColumn">
            <summary>
            Name of the column that contains the value indicating the priority of the label in case of label-collision detection
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer._rotationColumn">
            <summary>
            Name of the column that contains the value indicating the rotation value of the label
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.#ctor(System.String)">
            <summary>
            Creates a new instance of a LabelLayer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviour">
            <summary>
            Gets or sets labelling behavior on multipart geometries
            </summary>
            <remarks>Default value is <see cref="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.All"/></remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelFilter">
            <summary>
            Filter method delegate for performing filtering
            </summary>
            <remarks>
            Default method is <see cref="M:SharpMap.Rendering.LabelCollisionDetection.QuickAccurateCollisionDetectionMethod(System.Collections.Generic.List{SharpMap.Rendering.BaseLabel})"/>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.SmoothingMode">
            <summary>
            Render whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.TextRenderingHint">
            <summary>
            Specifies the quality of text rendering
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.DataSource">
            <summary>
            Gets or sets the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Style">
            <summary>
            Gets or sets the rendering style of the label layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Theme">
            <summary>
            Gets or sets thematic settings for the layer. Set to null to ignore thematics
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelColumn">
            <summary>
            Data column or expression where label text is extracted from.
            </summary>
            <remarks>
            This property is overridden by the <see cref="P:SharpMap.Layers.LabelLayer.LabelStringDelegate"/>.
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelStringDelegate">
            <summary>
            Gets or sets the method for creating a custom label string based on a feature.
            </summary>
            <remarks>
            <para>If this method is not null, it will override the <see cref="P:SharpMap.Layers.LabelLayer.LabelColumn"/> value.</para>
            <para>The label delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return a string.</para>
            <example>
            Creating a label-text by combining attributes "ROADNAME" and "STATE" into one string, using
            an anonymous delegate:
            <code lang="C#">
            myLabelLayer.LabelStringDelegate = delegate(SharpMap.Data.FeatureDataRow fdr)
            			{ return fdr["ROADNAME"].ToString() + ", " + fdr["STATE"].ToString(); };
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelPositionDelegate">
            <summary>
            Gets or sets the method for creating a custom position based on a feature.
            </summary>
            <remarks>
            <para>If this method is not null, it will override the position based on the centroid of the boundingbox of the feature </para>
            <para>The label delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return a GeoAPI.Geometries.Coordinate.</para>
            <para>If the delegate returns a null, the centroid of the feature will be used</para>
            <example>
            Creating a custom position by using X and Y values from the FeatureDataRow attributes "LabelX" and "LabelY", using
            an anonymous delegate:
            <code lang="C#">
            myLabelLayer.LabelPositionDelegate = delegate(SharpMap.Data.FeatureDataRow fdr)
            			{ return new GeoAPI.Geometries.Coordinate(Convert.ToDouble(fdr["LabelX"]), Convert.ToDouble(fdr["LabelY"]));};
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.PriorityDelegate">
            <summary>
            Gets or sets the method for calculating the render priority of a label based on a feature.
            </summary>
            <remarks>
            <para>If this method is not null, it will override the <see cref="P:SharpMap.Layers.LabelLayer.PriorityColumn"/> value.</para>
            <para>The label delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return an Int32.</para>
            <example>
            Creating a priority by combining attributes "capital" and "population" into one value, using
            an anonymous delegate:
            <code lang="C#">
            myLabelLayer.PriorityDelegate = delegate(SharpMap.Data.FeatureDataRow fdr) 
                { 
                    Int32 retVal = 100000000 * (Int32)( (String)fdr["capital"] == "Y" ? 1 : 0 );
                    return  retVal + Convert.ToInt32(fdr["population"]);
                };
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.RotationColumn">
            <summary>
            Data column from where the label rotation is derived.
            If this is empty, rotation will be zero, or aligned to a linestring.
            Rotation are in degrees (positive = clockwise).
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Priority">
            <summary>
            A value indication the priority of the label in cases of label-collision detection
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.PriorityColumn">
            <summary>
            Name of the column that holds the value indicating the priority of the label in cases of label-collision detection
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Envelope">
            <summary>
            Gets the boundingbox of the entire layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.CacheExtent">
            <summary>
            Gets or sets a value indicating whether the layer envelope should be treated as static or not.
            </summary>
            <remarks>
            When CacheExtent is enabled the layer Envelope will be calculated only once from DataSource, this 
            helps to speed up the Envelope calculation with some DataProviders. Default is false for backward
            compatibility.
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.SRID">
            <summary>
            Gets or sets the SRID of this VectorLayer's data source
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.LineNeedsReversing(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Boolean,SharpMap.MapViewport)">
            <summary>
            Very basic test to check for positive direction of Linestring, taking into account map rotation
            </summary>
            <param name="start">start of text</param>
            <param name="end">end of text</param>
            <param name="isRightToLeft"></param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.LineStringToPath(GeoAPI.Geometries.ILineString,SharpMap.MapViewport)">
            <summary>
            Function to transform a linestring to a graphics path for further processing
            </summary>
            <param name="lineString">The Linestring</param>
            <param name="map">The map</param>
            <!--<param name="useClipping">A value indicating whether clipping should be applied or not</param>-->
            <returns>A GraphicsPath</returns>
        </member>
        <member name="T:SharpMap.Layers.Layer">
            <summary>
            Abstract class for common layer properties
            Implement this class instead of the ILayer interface to save a lot of common code.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.Layer.LayerRenderedEventHandler">
            <summary>
            EventHandler for event fired when the layer has been rendered
            </summary>
            <param name="layer">Layer rendered</param>
            <param name="g">Reference to graphics object used for rendering</param>
        </member>
        <member name="E:SharpMap.Layers.Layer.LayerRendered">
            <summary>
            Event fired when the layer has been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Layers.Layer.SRIDChanged">
            <summary>
            Event raised when the layer's <see cref="P:SharpMap.Layers.Layer.SRID"/> property has changed
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.OnSridChanged(System.EventArgs)">
            <summary>
            Method called when <see cref="P:SharpMap.Layers.Layer.SRID"/> has changed, to invoke <see cref="E:SharpMap.Layers.Layer.SRIDChanged"/>
            </summary>
            <param name="eventArgs">The arguments associated with the event</param>
        </member>
        <member name="E:SharpMap.Layers.Layer.StyleChanged">
            <summary>
            Event raised when the layer's <see cref="P:SharpMap.Layers.Layer.Style"/> property has changed
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.OnStyleChanged(System.EventArgs)">
            <summary>
            Method called when <see cref="P:SharpMap.Layers.Layer.Style"/> has changed, to invoke <see cref="E:SharpMap.Layers.Layer.StyleChanged"/>
            </summary>
            <param name="eventArgs">The arguments associated with the event</param>
        </member>
        <member name="E:SharpMap.Layers.Layer.LayerNameChanged">
            <summary>
            Event raised when the layers's <see cref="P:SharpMap.Layers.Layer.LayerName"/> property has changed
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.OnLayerNameChanged(System.EventArgs)">
            <summary>
            Method called when <see cref="P:SharpMap.Layers.Layer.LayerName"/> has changed, to invoke <see cref="E:SharpMap.Layers.Layer.LayerNameChanged"/>
            </summary>
            <param name="eventArgs">The arguments associated with the event</param>
        </member>
        <member name="F:SharpMap.Layers.Layer.CanvasArea">
            <summary>
            The area of the map that was covered by this layer
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.#ctor(SharpMap.Styles.Style)">
            <summary>
             Creates an instance of this class using the given Style
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:SharpMap.Layers.Layer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.CoordinateTransformation">
            <summary>
            Gets or sets the <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation"/> applied 
            to this vectorlayer prior to rendering
            </summary>
        </member>
        <member name="E:SharpMap.Layers.Layer.CoordinateTransformationChanged">
            <summary>
            Event raised when the <see cref="P:SharpMap.Layers.Layer.CoordinateTransformation"/> has changed
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.OnCoordinateTransformationChanged(System.EventArgs)">
            <summary>
            Event invoker for the <see cref="E:SharpMap.Layers.Layer.CoordinateTransformationChanged"/> event
            </summary>
            <param name="e">The event's arguments</param>
        </member>
        <member name="P:SharpMap.Layers.Layer.SourceFactory">
            <summary>
            Gets the geometry factory to create source geometries
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.TargetFactory">
            <summary>
            Gets the geometry factory to create target geometries
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.ReverseCoordinateTransformation">
            <summary>
            Certain Transformations cannot be inverted in ProjNet, in those cases use this property to set the reverse <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation"/> (of CoordinateTransformation) to fetch data from Datasource
            
            If your CoordinateTransformation can be inverted you can leave this property to null
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.NeedsTransformation">
            <summary>
            Gets a flag indicating if the layer needs coordinate transformation
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.LayerName">
            <summary>
            Gets or sets the name of the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.LayerTitle">
            <summary>
            Gets or sets the title of the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.TargetSRID">
            <summary>
            Gets or sets a value indicating the target spatial reference id
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.Layer.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Renders the layer using the current viewport
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.Layer.SharpMap#Layers#ILayerEx#Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Renders the layer using the current viewport
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
            <returns>Rectangle enclosing the actual area rendered on the graphics canvas</returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.Render(System.Drawing.Graphics,SharpMap.MapViewport,System.Drawing.Rectangle@)">
            <summary>
            Renders the layer using the given graphics object and viewport. The <paramref name="affectedArea"/> is an additional result.
            </summary>
            <param name="g">A graphics object</param>
            <param name="mvp">A map viewport</param>
            <param name="affectedArea">The affected area.</param>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToGraphicsCanvas(System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Transforms cavas area to untransformed graphics canvas
            </summary>
            <param name="area"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.OnLayerRendered(System.Drawing.Graphics)">
            <summary>
            Event invoker for the <see cref="E:SharpMap.Layers.Layer.LayerRendered"/> event.
            </summary>
            <param name="g">The graphics object</param>
        </member>
        <member name="P:SharpMap.Layers.Layer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.Layer.Proj4Projection">
            <summary>
            Proj4 projection definition string
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.MinVisible">
            <summary>
            Minimum visibility zoom, including this value
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.MaxVisible">
            <summary>
            Maximum visibility zoom, excluding this value
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.VisibilityUnits">
            <summary>
            Gets or Sets what kind of units the Min/Max visible properties are defined in
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Enabled">
            <summary>
            Specified whether the layer is rendered or not
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Style">
            <summary>
            Gets or sets the Style for this Layer
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToString">
            <summary>
            Returns the name of the layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.RaiseRenderRequired">
            <summary>
            Invokes <see cref="E:SharpMap.Layers.Layer.RenderRequired"/> event on this layer
            </summary>
        </member>
        <member name="E:SharpMap.Layers.Layer.RenderRequired">
            <summary>
            Event raised when the layer needs to be rendered.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToTarget(GeoAPI.Geometries.Envelope,GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation)">
            <summary>
            Utility function to transform given envelope using a specific transformation
            </summary>
            <param name="envelope">The source envelope</param>
            <param name="coordinateTransformation">The <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation"/> to use.</param>
            <returns>The target envelope</returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToTarget(GeoAPI.Geometries.Envelope)">
            <summary>
            Utility function to transform given envelope to the target envelope
            </summary>
            <param name="envelope">The source envelope</param>
            <returns>The target envelope</returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToSource(GeoAPI.Geometries.Envelope)">
            <summary>
            Utility function to transform given envelope to the source envelope
            </summary>
            <param name="envelope">The target envelope</param>
            <returns>The source envelope</returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToTarget(GeoAPI.Geometries.IGeometry)">
            <summary>
            Function to transform <paramref name="geometry"/> to the coordinate system defined by <see cref="P:SharpMap.Layers.Layer.TargetSRID"/>
            </summary>
            <param name="geometry">A geometry</param>
            <returns>The transformed geometry</returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToSource(GeoAPI.Geometries.IGeometry)">
            <summary>
            Function to transform <paramref name="geometry"/> to the coordinate system defined by <see cref="P:SharpMap.Layers.Layer.SRID"/>
            </summary>
            <param name="geometry">A geometry</param>
            <returns>The transformed geometry</returns>
        </member>
        <member name="T:SharpMap.Layers.LayerCollection">
            <summary>
            A collection of <see cref="T:SharpMap.Layers.ILayer"/> instances.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LayerCollection.Item(System.String)">
            <summary>
            Gets or sets the layer with the given <paramref name="layerName"/>.
            </summary>
            <param name="layerName">
            Name of the layer to replace, if it exists.
            </param>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.Clone">
            <summary>
            Returns a cloned copy of the LayerCollection
            </summary>
            <remarks>
            The layer instances are the same as in the original collection, however if a layer implements ICloneable this could not be true.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.AddCollection(SharpMap.Layers.LayerCollection)">
            <summary>
            Method to add all layers of <paramref name="other"/> to this collection
            </summary>
            <param name="other">A collection of layers</param>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.Insert(System.Int32,SharpMap.Layers.ILayer)">
            <summary>
            Inserts the layer at the given <paramref name="index"/>.
            </summary>
            <param name="index">The index at which to add the layer.</param>
            <param name="layer">The layer to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index"/> is less than 0 or is
            greater or equal to <see cref="P:System.Collections.CollectionBase.Count"/>.
            </exception>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.GetLayerByName(System.String)">
            <summary>
            Function to search for a layer in this collection by its name
            </summary>
            <param name="layerName">The name of the layer to search for</param>
            <returns>The layer if found, otherwise <value>null</value></returns>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.ClearItems">
            <summary>
            Removes all layers from the collection.
            </summary>
        </member>
        <member name="E:SharpMap.Layers.LayerCollection.CollectionChanged">
            <summary>
            Event raised when this collection has changed.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Fires the CollectionChanged event.
            </summary>
            <param name="e">Event to fire-</param>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.InsertItem(System.Int32,SharpMap.Layers.ILayer)">
            <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)"/>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.RemoveItem(System.Int32)">
            <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)"/>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.SetItem(System.Int32,SharpMap.Layers.ILayer)">
            <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)"/>
        </member>
        <member name="T:SharpMap.Layers.LayerGroup">
            <summary>
            Class for holding a group of layers.
            </summary>
            <remarks>
            The Group layer is useful for grouping a set of layers,
            for instance a set of image tiles, and expose them as a single layer
            </remarks>
        </member>
        <member name="E:SharpMap.Layers.LayerGroup.LayersChanged">
            <summary>
            Event fired when the Layers collection is replaced.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.OnLayersChanged">
            <summary>
            Fires the LayersChanged event.
            </summary>
        </member>
        <member name="E:SharpMap.Layers.LayerGroup.LayersChanging">
            <summary>
            Event fires when the Layers collection is going to be replaced.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.OnLayersChanging">
            <summary>
            Fires the LayersChanging event.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.#ctor(System.String)">
            <summary>
            Initializes a new group layer
            </summary>
            <param name="layername">Name of layer</param>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.IsQueryEnabled">
            <summary>
            Whether the layer is queryable when used in a SharpMap.Web.Wms.WmsServer, ExecuteIntersectionQuery() will be possible in all other situations when set to FALSE
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.Layers">
            <summary>
            Sublayers in the group
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.SkipTransformationPropagation">
            <summary>
            Gets or sets whether coordinate transformations applied to the group should propagate to inner layers.
            </summary>
            <remarks>
            Default is false, transformations are propagated to children layers.
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.CoordinateTransformation">
            <summary>
            Gets or sets the <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation"/> applied 
            to this vectorlayer prior to rendering
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.ReverseCoordinateTransformation">
            <summary>
            Certain Transformations cannot be inverted in ProjNet, in those cases use this property to set the reverse <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation"/> (of CoordinateTransformation) to fetch data from Datasource
            
            If your CoordinateTransformation can be inverted you can leave this property to null
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.SRID">
            <summary>
            The spatial reference ID (CRS)
            Propogation to child layers is dependent on <see cref="P:SharpMap.Layers.LayerGroup.SkipTransformationPropagation"/>
            Changes to SRID with propogation enabled will cause both <see cref="P:SharpMap.Layers.LayerGroup.CoordinateTransformation"/> and <see cref="P:SharpMap.Layers.LayerGroup.ReverseCoordinateTransformation"/> to be reset
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.TargetSRID">
            <summary>
            The target spatial reference id
            Propogation to child layers is dependent on <see cref="P:SharpMap.Layers.LayerGroup.SkipTransformationPropagation"/>
            Changes to TargetSRID with propogation enabled will cause both <see cref="P:SharpMap.Layers.LayerGroup.CoordinateTransformation"/> and <see cref="P:SharpMap.Layers.LayerGroup.ReverseCoordinateTransformation"/> to be reset
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.ReleaseManagedResources">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.GetLayerByName(System.String)">
            <summary>
            Returns a layer by its name
            </summary>
            <param name="name">Name of layer</param>
            <returns>Layer</returns>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geometry">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.CreateUninitializedInstance">
            <summary>
            Create an empty new LayerGroup instance.
            </summary>
            <remarks>This is used by the Clone() method, inheritors must override this method.</remarks>
            <returns>Returns an empty LayerGroup.</returns>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.Clone">
            <summary>
            Returns a cloned copy of the group.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Layers.Symbolizer.AnyGeometryVectorLayer">
            <summary>
            Vector layer class than can symbolize any type of geometry
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.AnyGeometryVectorLayer.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.AnyGeometryVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="datasource">The layers's datasource</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.AnyGeometryVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider,SharpMap.Rendering.Symbolizer.GeometrySymbolizer)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="datasource">The layers's datasource</param>
            <param name="symbolizer">The layers's symbolizer</param>
        </member>
        <member name="T:SharpMap.Layers.Symbolizer.BaseVectorLayer`1">
            <summary>
            Base class for all vector layers using <see cref="T:SharpMap.Rendering.Symbolizer.ISymbolizer`1"/> approach.
            </summary>
            <typeparam name="TGeometry">The geometry type</typeparam>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.#ctor(System.String,SharpMap.Data.Providers.IProvider,SharpMap.Rendering.Symbolizer.ISymbolizer{`0})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The name of the layer</param>
            <param name="dataSource">The data source</param>
            <param name="symbolizer">The symbolizer</param>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.SmoothingMode">
            <summary>
            Gets or sets whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.DataSource">
            <summary>
            Gets or sets the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.Symbolizer">
            <summary>
            Gets or sets the symbolizer associated with this layer.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to render the layer upon the graphics object <paramref name="g"/> using the map <paramref name="map"/>
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method called to initialize the rendering process
            </summary>
            <param name="graphics">The graphics object to render upon</param>
            <param name="map">The map</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.OnRendering(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method called to render the layer
            </summary>
            <param name="graphics">The graphics object to render upon</param>
            <param name="map">The map</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.OnRendered(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method called to signal that the layer has been rendered
            </summary>
            <param name="graphics">The graphics object to render upon</param>
            <param name="map">The map</param>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.LabelLayer">
            <summary>
            Gets or sets the <see cref="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.LabelLayer"/> associated with the vector layer
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.ReleaseManagedResources">
            <summary>
            Release all managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geometry">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.IsQueryEnabled">
            <summary>
            Whether the layer is queryable when used in a SharpMap.Web.Wms.WmsServer, ExecuteIntersectionQuery() will be possible in all other situations when set to FALSE
            </summary>
        </member>
        <member name="T:SharpMap.Layers.Symbolizer.LinealVectorLayer">
            <summary>
            A vector layer class that can symbolize lineal geometries
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.LinealVectorLayer.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.LinealVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="dataSource">The layer's datasource</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.LinealVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider,SharpMap.Rendering.Symbolizer.ISymbolizer{GeoAPI.Geometries.ILineal})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="dataSource">The layer's datasource</param>
            <param name="symbolizer">The layer's symbolizer</param>
        </member>
        <member name="T:SharpMap.Layers.Symbolizer.PolygonalVectorLayer">
            <summary>
            A vector layer class that can symbolize polygonal geometries.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PolygonalVectorLayer.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layers's name</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PolygonalVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layers's name</param>
            <param name="dataSource">The layers's datasource</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PolygonalVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider,SharpMap.Rendering.Symbolizer.ISymbolizer{GeoAPI.Geometries.IPolygonal})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="dataSource">The layer's datasource</param>
            <param name="symbolizer">The layer's symbolizer</param>
        </member>
        <member name="T:SharpMap.Layers.Symbolizer.PuntalVectorLayer">
            <summary>
            A vector layer class that can symbolize puntal geometries
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PuntalVectorLayer.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PuntalVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="dataSource">The layer's data source</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PuntalVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider,SharpMap.Rendering.Symbolizer.ISymbolizer{GeoAPI.Geometries.IPuntal})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="dataSource">The layer's data source</param>
            <param name="symbolizer">The layer's symbolizer</param>
        </member>
        <member name="T:SharpMap.Layers.TiledWmsLayer">
            <summary>
            Client layer for WMS-C service
            </summary>
            <remarks>
            Initialize the TiledWmsLayer with the url to the capabilities document
            and it will set the remaining BoundingBox property and proper requests that changes between the requests.
            See the example below.
            </remarks>
            <example>
            The following example creates a map with a TiledWmsLayer the metacarta tile server
            <code lang="C#">
            map = new SharpMap.Map(mapImage1.Size);
            string url = "http://labs.metacarta.com/wms-c/tilecache.py?version=1.1.1&amp;request=GetCapabilities&amp;service=wms-c";
            TiledWmsLayer tiledWmsLayer = new TiledWmsLayer("Metacarta", url);
            tiledWmsLayer.TileSetsActive.Add(tiledWmsLayer.TileSets["satellite"].Name);
            map.Layers.Add(tiledWmsLayer);
            map.ZoomToBox(new GeoAPI.Geometries.Envelope(-180.0, 180.0, -90.0, 90.0));
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <remarks>In and ASP.NET application the service description is automatically cached for 24 hours when not specified</remarks>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server's Capabilities</param>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.#ctor(System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server's Capabilities</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.#ctor(System.String,System.String,System.Net.WebProxy)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <remarks>In and ASP.NET application the service description is automatically cached for 24 hours when not specified</remarks>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server's Capabilities</param>
            <param name="proxy">Proxy</param>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.#ctor(System.String,System.String,System.TimeSpan,System.Net.WebProxy)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server's Capabilities</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
            <param name="proxy">Proxy</param>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.Credentials">
            <summary>
            Provides the base authentication interface for retrieving credentials for Web client authentication.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.Proxy">
            <summary>
            Gets or sets the proxy used for requesting a webresource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds. Defaults to 10 seconds
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.TileSetsActive">
            <summary>
            Gets a list of tile sets that are currently active
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.TileSets">
            <summary>
            Gets the collection of TileSets that will be rendered
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.ContinueOnError">
            <summary>
            Specifies whether to throw an exception if the Wms request failed, or to just skip rendering the layer. 
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.OutputFormats">
            <summary>
            Gets the list of available formats
            </summary>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.AddCustomParameter(System.String,System.String)">
            <summary>
            Appends a custom parameter name-value pair to the WMS request
            </summary>
            <param name="name">Name of custom parameter</param>
            <param name="value">Value of custom parameter</param>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.RemoveCustomParameter(System.String)">
            <summary>
            Removes a custom parameter name-value pair from the WMS request
            </summary>
            <param name="name">Name of the custom parameter to remove</param>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.RemoveAllCustomParameters">
            <summary>
            Removes all custom parameter from the WMS request
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LayerCollectionType">
            <summary>
            Types of layer collections
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LayerCollectionType.Static">
            <summary>
            Layer collection for layers with datasources that are more or less static (e.g ShapeFiles)
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LayerCollectionType.Variable">
            <summary>
            Layer collection for layers with datasources that update frequently (e.g. moving vehicle)
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LayerCollectionType.Background">
            <summary>
            Layer collection for layers are completely opaque and serve as Background (e.g. WMS, OSM)
            </summary>
        </member>
        <member name="T:SharpMap.Layers.VariableLayerCollectionRequeryHandler">
            <summary>
            Signature of function to handle VariableLayerCollectionRequery event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The arguments, <c>EventArgs.Empty</c> in all cases</param>
        </member>
        <member name="T:SharpMap.Layers.VariableLayerCollection">
            <summary>
            Layer collection 
            </summary>
            TODO:REEVALUEATE
        </member>
        <member name="M:SharpMap.Layers.VariableLayerCollection.TouchTimer">
            <summary>
            Method to restart the internal Timer
            </summary>
        </member>
        <member name="M:SharpMap.Layers.VariableLayerCollection.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method called when deserializing this object.
            </summary>
            <param name="context"></param>
        </member>
        <member name="E:SharpMap.Layers.VariableLayerCollection.VariableLayerCollectionRequery">
            <summary>
            Event fired every <see cref="P:SharpMap.Layers.VariableLayerCollection.Interval"/> to force requery;
            </summary>
        </member>
        <member name="M:SharpMap.Layers.VariableLayerCollection.#ctor(SharpMap.Layers.LayerCollection)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="variableLayers">Layer collection that holds layers with data sources updating frequently</param>
        </member>
        <member name="M:SharpMap.Layers.VariableLayerCollection.InsertItem(System.Int32,SharpMap.Layers.ILayer)">
            <inheritdoc/>
        </member>
        <member name="P:SharpMap.Layers.VariableLayerCollection.Interval">
            <summary>
            Gets/sets the interval in which to update layers
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VariableLayerCollection.Pause">
            <summary>
            Gets/Sets whether this collection should currently be updated or not
            </summary>
        </member>
        <member name="T:SharpMap.Layers.VectorLayer">
            <summary>
            Class for vector layer properties
            </summary>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.#ctor(System.String)">
            <summary>
            Initializes a new layer
            </summary>
            <param name="layername">Name of layer</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.#ctor(System.String,SharpMap.Data.Providers.IBaseProvider)">
            <summary>
            Initializes a new layer with a specified datasource
            </summary>
            <param name="layername">Name of layer</param>
            <param name="dataSource">Data source</param>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Themes">
            <summary>
            Gets or sets a Dictionary with themes suitable for this layer. A theme in the dictionary can be used for rendering be setting the Theme Property using a delegate function
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Theme">
            <summary>
            Gets or sets thematic settings for the layer. Set to null to ignore thematics
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.ClippingEnabled">
            <summary>
            Specifies whether polygons should be clipped prior to rendering
            </summary>
            <remarks>
            <para>Clipping will clip <see cref="T:GeoAPI.Geometries.IPolygon"/> and
            <see cref="T:GeoAPI.Geometries.IMultiPolygon"/> to the current view prior
            to rendering the object.</para>
            <para>Enabling clipping might improve rendering speed if you are rendering 
            only small portions of very large objects.</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.SmoothingMode">
            <summary>
            Render whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.DataSource">
            <summary>
            Gets or sets the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Style">
            <summary>
            Gets or sets the rendering style of the vector layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.CacheExtent">
            <summary>
            Gets or sets a value indicating whether the layer envelope should be treated as static or not.
            </summary>
            <remarks>
            When CacheExtent is enabled the layer Envelope will be calculated only once from DataSource, this 
            helps to speed up the Envelope calculation with some DataProviders. Default is false for backward
            compatibility.
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.SRID">
            <summary>
            Gets or sets the SRID of this VectorLayer's data source
            </summary>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.ReleaseManagedResources">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Renders the layer to a graphics object, using the given map viewport
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="mvp">Map view port</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.RenderInternal(System.Drawing.Graphics,SharpMap.MapViewport,GeoAPI.Geometries.Envelope,SharpMap.Rendering.Thematics.ITheme)">
            <summary>
            Method to render this layer to the map, applying <paramref name="theme"/>.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map object</param>
            <param name="envelope">The envelope to render</param>
            <param name="theme">The theme to apply</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.RenderInternal(System.Drawing.Graphics,SharpMap.MapViewport,GeoAPI.Geometries.Envelope)">
            <summary>
            Method to render this layer to the map, applying <see cref="P:SharpMap.Layers.VectorLayer.Style"/>.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map object</param>
            <param name="envelope">The envelope to render</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.GetStylesToRender(SharpMap.Styles.IStyle)">
            <summary>
            Unpacks styles to render (can be nested group-styles)
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.RenderGeometry(System.Drawing.Graphics,SharpMap.MapViewport,GeoAPI.Geometries.IGeometry,SharpMap.Styles.VectorStyle)">
            <summary>
            Method to render <paramref name="feature"/> using <paramref name="style"/>
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
            <param name="feature">The feature's geometry</param>
            <param name="style">The style to apply</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.RenderGeometryEx(System.Drawing.Graphics,SharpMap.MapViewport,GeoAPI.Geometries.IGeometry,SharpMap.Styles.VectorStyle)">
            <summary>
            Function to render <paramref name="feature"/> using <paramref name="style"/> and returning the area covered.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
            <param name="feature">The feature's geometry</param>
            <param name="style">The style to apply</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.ExecuteIntersectionQuery(GeoAPI.Geometries.Envelope,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geometry">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.IsQueryEnabled">
            <summary>
            Whether the layer is queryable when used in a SharpMap.Web.Wms.WmsServer, ExecuteIntersectionQuery() will be possible in all other situations when set to FALSE
            </summary>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>>
        </member>
        <member name="T:SharpMap.Layers.WmsLayer">
            <summary>
            Web Map Service layer
            </summary>
            <remarks>
            The WmsLayer is currently very basic and doesn't support automatic fetching of the WMS Service Description.
            Instead you would have to add the necessary parameters to the URL,
            and the WmsLayer will set the remaining BoundingBox property and proper requests that changes between the requests.
            See the example below.
            </remarks>
            <example>
            The following example creates a map with a WMS layer the Demis WMS Server
            <code lang="C#">
            myMap = new SharpMap.Map(new System.Drawing.Size(500,250);
            string wmsUrl = "http://www2.demis.nl/mapserver/request.asp";
            SharpMap.Layers.WmsLayer myLayer = new SharpMap.Layers.WmsLayer("Demis WMS", myLayer);
            myLayer.AddLayer("Bathymetry");
            myLayer.AddLayer("Countries");
            myLayer.AddLayer("Topography");
            myLayer.AddLayer("Hillshading");
            myLayer.SetImageFormat(layWms.OutputFormats[0]);
            myLayer.SRID = 4326;	
            myMap.Layers.Add(myLayer);
            myMap.Center = new GeoAPI.Geometries.Coordinate(0, 0);
            myMap.Zoom = 360;
            myMap.MaximumZoom = 360;
            myMap.MinimumZoom = 0.1;
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <remarks>In and ASP.NET application the service description is automatically cached for 24 hours when not specified</remarks>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <remarks>In and ASP.NET application the service description is automatically cached for 24 hours when not specified</remarks>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server</param>
            <param name="proxy">Proxy</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String,System.TimeSpan,System.Net.IWebProxy)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
            <param name="proxy">Proxy</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String,System.TimeSpan,System.Net.IWebProxy,System.Net.ICredentials)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
            <param name="proxy">Proxy</param>
            <param name="credentials"></param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,SharpMap.Web.Wms.Client)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layername"></param>
            <param name="wmsClient"></param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.ForceOnlineResourceUrl(System.String)">
            <summary>
            Can be used to force the OnlineResourceUrl for services that return incorrect (often internal) onlineresources
            </summary>
            <param name="url">Url without any OGC specific parameters</param>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.LayerList">
            <summary>
            Gets the list of enabled layers
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.StylesList">
            <summary>
            Gets the list of enabled styles
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.RootLayer">
            <summary>
            Gets the hierarchical list of available WMS layers from this service
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.OutputFormats">
            <summary>
            Gets the list of available formats
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Transparancy">
            <summary>
            Sets the optional transparancy. The WMS server might ignore this when not implemented and will ignore if the image format is jpg
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Transparent">
            <summary>
            Sets if the image should have transparent background. The WMS server might ignore this when not implemented and will ignore if the image format is jpg
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Opacity">
            <summary>
            Gets or sets a value indicating the opacity degree
            1.0 = No transparency (Default)
            0.0 = full transparency
            </summary>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.SetOpacity(System.Single)">
            <summary>
            Set the opacity on the drawn image, this method updates the ImageAttributes with opacity-values and is used when SharpMap draws the image, the the wms-server
            1.0 = No transparency
            0.0 = full transparency
            </summary>
            <param name="opacity"></param>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.BgColor">
            <summary>
            Sets the optional background color. 
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.ServiceDescription">
            <summary>
            Gets the service description from this server
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Version">
            <summary>
            Gets or sets the WMS Server version of this service
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.CapabilitiesUrl">
            <summary>
            Gets a value indicating the URL for the 'GetCapablities' request
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.ImageAttributes">
            <summary>
            When specified, applies image attributes at image (fx. make WMS layer semi-transparent)
            </summary>
            <remarks>
            <para>You can make the WMS layer semi-transparent by settings a up a ColorMatrix,
            or scale/translate the colors in any other way you like.</para>
            <example>
            Setting the WMS layer to be semi-transparent.
            <code lang="C#">
            float[][] colorMatrixElements = { 
            			new float[] {1,  0,  0,  0, 0},
            			new float[] {0,  1,  0,  0, 0},
            			new float[] {0,  0,  1,  0, 0},
            			new float[] {0,  0,  0,  0.5, 0},
            			new float[] {0, 0, 0, 0, 1}};
            ColorMatrix colorMatrix = new ColorMatrix(colorMatrixElements);
            ImageAttributes imageAttributes = new ImageAttributes();
            imageAttributes.SetColorMatrix(
            	   colorMatrix,
            	   ColorMatrixFlag.Default,
            	   ColorAdjustType.Bitmap);
            myWmsLayer.ImageAttributes = imageAttributes;
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.SRID">
            <inheritdoc cref="P:SharpMap.Layers.ILayer.SRID"/>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.ContinueOnError">
            <summary>
            Specifies whether to throw an exception if the Wms request failed, or to just skip rendering the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Credentials">
            <summary>
            Provides the base authentication interface for retrieving credentials for Web client authentication.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Proxy">
            <summary>
            Gets or sets the proxy used for requesting a webresource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds. Defaults to 10 seconds
            </summary>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.AddLayer(System.String)">
            <summary>
            Adds a layer to WMS request
            </summary>
            <remarks>Layer names are case sensitive.</remarks>
            <param name="name">Name of layer</param>
            <exception cref="T:System.ArgumentException">Throws an exception if an unknown layer is added</exception>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.LayerExists(SharpMap.Web.Wms.Client.WmsServerLayer,System.String)">
            <summary>
            Recursive method for checking whether a layername exists
            </summary>
            <param name="wmsServerLayer">The WMS Server layer</param>
            <param name="name">The name of the desired layer</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveLayer(System.String)">
            <summary>
            Removes a layer from the layer list
            </summary>
            <param name="name">Name of layer to remove</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveLayerAt(System.Int32)">
            <summary>
            Removes the layer at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveAllLayers">
            <summary>
            Removes all layers
            </summary>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.AddStyle(System.String)">
            <summary>
            Adds a style to the style collection
            </summary>
            <param name="name">Name of style</param>
            <exception cref="T:System.ArgumentException">Throws an exception is an unknown layer is added</exception>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.StyleExists(SharpMap.Web.Wms.Client.WmsServerLayer,System.String)">
            <summary>
            Recursive method for checking whether a layername exists
            </summary>
            <param name="layer">layer</param>
            <param name="name">name of style</param>
            <returns>True of style exists</returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveStyle(System.String)">
            <summary>
            Removes a style from the collection
            </summary>
            <param name="name">Name of style</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveStyleAt(System.Int32)">
            <summary>
            Removes a style at specified index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveAllStyles">
            <summary>
            Removes all styles from the list
            </summary>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.SetImageFormat(System.String)">
            <summary>
            Sets the image type to use when requesting images from the WMS server
            </summary>
            <remarks>
            <para>See the <see cref="P:SharpMap.Layers.WmsLayer.OutputFormats"/> property for a list of available mime types supported by the WMS server</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Throws an exception if either the mime type isn't offered by the WMS
            or GDI+ doesn't support this mime type.</exception>
            <param name="mimeType">Mime type of image format</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.GetRequestUrl(GeoAPI.Geometries.Envelope,System.Drawing.Size)">
            <summary>
            Gets the URL for a map request base on current settings, the image size and boundingbox
            </summary>
            <param name="box">Area the WMS request should cover</param>
            <param name="size">Size of image</param>
            <returns>URL for WMS request</returns>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Authority">
            <summary>
            Gets or sets a value indicating the authority of the spatial reference system.
            </summary>
            <remarks>Must not be <value>null</value></remarks>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.GetPreferredMethod">
            <summary>
            Returns the preferred URL to use when communicating with the wms-server
            Favors GET-requests over POST-requests
            </summary>
            <returns>Instance of Client.WmsOnlineResource</returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.getBoundingBoxes(SharpMap.Web.Wms.Client.WmsServerLayer)">
            <summary>
            Gets all the boundingboxes from the Client.WmsServerLayer
            </summary>
            <returns>List of all spatial referenced boundingboxes</returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.AddChildLayers(SharpMap.Web.Wms.Client.WmsServerLayer,System.Boolean)">
            <summary>
            Recursive method for adding all WMS layers to layer list
            Skips "top level" layer if addFirstLayer is false
            </summary>
            <param name="wmsServerLayer"></param>
            <param name="addFirstLayer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.CreateImageAttributes(System.Single)">
            <summary>
            Utility function to create <see cref="T:System.Drawing.Imaging.ImageAttributes"/>
            for a given <paramref name="opacity"/> value
            </summary>
            <param name="opacity">The opacity value</param>
            <returns>An object describing image attributes. Don't forget to dispose it!</returns>
        </member>
        <member name="T:SharpMap.Map">
            <summary>
            Map class, the main holder for a MapObject in SharpMap
            </summary>
            <example>
            Creating a new map instance, adding layers and rendering the map:
            </example>
        </member>
        <member name="M:SharpMap.Map.Configure">
            <summary>
            Method to invoke the static constructor of this class
            </summary>
        </member>
        <member name="M:SharpMap.Map.#cctor">
            <summary>
            Static constructor. Needed to get <see cref="P:GeoAPI.GeometryServiceProvider.Instance"/> set.
            </summary>
        </member>
        <member name="F:SharpMap.Map.NumberFormatEnUs">
            <summary>
            Used for converting numbers to/from strings
            </summary>
        </member>
        <member name="F:SharpMap.Map.DisposeLayersOnDispose">
            <summary>
            Specifies whether to trigger a dispose on all layers (and their datasources) contained in this map when the map-object is disposed.
            The default behaviour is true unless the map is a result of a Map.Clone() operation in which case the value is false
            <para/>
            If you reuse your datasources or layers between many map-objects you should set this property to false in order for them to keep existing after a map.dispose()
            </summary>
        </member>
        <member name="M:SharpMap.Map.#ctor">
            <summary>
            Initializes a new map
            </summary>
        </member>
        <member name="M:SharpMap.Map.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new map
            </summary>
            <param name="size">Size of map in pixels</param>
        </member>
        <member name="M:SharpMap.Map.WireEvents">
            <summary>
            Wires the events
            </summary>
        </member>
        <member name="M:SharpMap.Map.OnLayersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Event handler to intercept when a new ITileAsymclayer is added to the Layers List and associate the MapNewTile Handler Event
            </summary>
        </member>
        <member name="M:SharpMap.Map.Dispose">
            <summary>
            Disposes the map object
            </summary>
        </member>
        <member name="T:SharpMap.Map.LayersChangedEventHandler">
            <summary>
            EventHandler for event fired when the maps layer list has been changed
            </summary>
        </member>
        <member name="T:SharpMap.Map.MapRenderedEventHandler">
            <summary>
            EventHandler for event fired when all layers have been rendered
            </summary>
        </member>
        <member name="T:SharpMap.Map.MapRenderingEventHandler">
            <summary>
            EventHandler for event fired when all layers are about to be rendered
            </summary>
        </member>
        <member name="T:SharpMap.Map.MapViewChangedHandler">
            <summary>
            EventHandler for event fired when the zoomlevel or the center point has been changed
            </summary>
        </member>
        <member name="E:SharpMap.Map.LayersChanged">
            <summary>
            Event fired when the maps layer list have been changed
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapViewOnChange">
            <summary>
            Event fired when the zoomlevel or the center point has been changed
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapRendering">
            <summary>
            Event fired when all layers are about to be rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapRendered">
            <summary>
            Event fired when all layers have been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.LayerRendering">
            <summary>
            Event fired when one layer have been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.LayerRenderedEx">
            <summary>
            Event fired when one layer have been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.LayerRendered">
            <summary>
             Event fired when a layer has been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapNewTileAvaliable">
            <summary>
            Event fired when a new Tile is available in a TileAsyncLayer
            </summary>
        </member>
        <member name="E:SharpMap.Map.RefreshNeeded">
            <summary>
            Event that is called when a layer has changed and the map need to redraw
            </summary>
        </member>
        <member name="M:SharpMap.Map.GetMap">
            <summary>
            Renders the map to an image
            </summary>
            <returns>the map image</returns>
        </member>
        <member name="M:SharpMap.Map.GetMap(System.Int32)">
            <summary>
            Renders the map to an image with the supplied resolution
            </summary>
            <param name="resolution">The resolution of the image</param>
            <returns>The map image</returns>
        </member>
        <member name="M:SharpMap.Map.GetMapAsMetafile">
            <summary>
            Renders the map to a Metafile (Vectorimage).
            </summary>
            <remarks>
            A Metafile can be saved as WMF,EMF etc. or put onto the clipboard for paste in other applications such av Word-processors which will give
            a high quality vector image in that application.
            </remarks>
            <returns>The current map rendered as to a Metafile</returns>
        </member>
        <member name="M:SharpMap.Map.GetMapAsMetafile(System.String)">
            <summary>
            Renders the map to a Metafile (Vectorimage).
            </summary>
            <param name="metafileName">The filename of the metafile. If this is null or empty the metafile is not saved.</param>
            <remarks>
            A Metafile can be saved as WMF,EMF etc. or put onto the clipboard for paste in other applications such av Word-processors which will give
            a high quality vector image in that application.
            </remarks>
            <returns>The current map rendered as to a Metafile</returns>
        </member>
        <member name="M:SharpMap.Map.MapNewTileAvaliableHandler(SharpMap.Layers.ITileAsyncLayer,GeoAPI.Geometries.Envelope,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            </summary>
            <param name="sender"></param>
            <param name="bbox"></param>
            <param name="bm"></param>
            <param name="sourceWidth"></param>
            <param name="sourceHeight"></param>
            <param name="imageAttributes"></param>
        </member>
        <member name="M:SharpMap.Map.RenderMap(System.Drawing.Graphics)">
            <summary>
            Renders the map using the provided <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="g">the <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <exception cref="T:System.ArgumentNullException">if <see cref="T:System.Drawing.Graphics"/> object is null.</exception>
            <exception cref="T:System.InvalidOperationException">if there are no layers to render.</exception>
        </member>
        <member name="M:SharpMap.Map.OnRefreshNeeded(System.EventArgs)">
            <summary>
            Fires the RefreshNeeded event.
            </summary>
            <param name="e">EventArgs argument.</param>
        </member>
        <member name="M:SharpMap.Map.OnMapRendering(System.Drawing.Graphics)">
            <summary>
            Fired when map is rendering
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:SharpMap.Map.OnMapRendered(System.Drawing.Graphics)">
            <summary>
            Fired when Map is rendered
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:SharpMap.Map.OnLayerRendering(SharpMap.Layers.ILayer,SharpMap.Layers.LayerCollectionType)">
            <summary>
            Method called when starting to render <paramref name="layer"/> of <paramref name="layerCollectionType"/>. This fires the
            <see cref="E:SharpMap.Map.LayerRendering"/> event.
            </summary>
            <param name="layer">The layer to render</param>
            <param name="layerCollectionType">The collection type</param>
        </member>
        <member name="M:SharpMap.Map.OnLayerRendered(SharpMap.Layers.ILayer,SharpMap.Layers.LayerCollectionType)">
            <summary>
            Method called when <paramref name="layer"/> of <paramref name="layerCollectionType"/> has been rendered. This fires the
            <see cref="E:SharpMap.Map.LayerRendered"/> and <see cref="E:SharpMap.Map.LayerRenderedEx"/> event.
            </summary>
            <param name="layer">The layer to render</param>
            <param name="layerCollectionType">The collection type</param>
        </member>
        <member name="M:SharpMap.Map.RenderMap(System.Drawing.Graphics,SharpMap.Layers.LayerCollectionType)">
            <summary>
            Renders the map using the provided <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="g">the <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="layerCollectionType">the <see cref="T:SharpMap.Layers.LayerCollectionType"/> to use</param>
            <exception cref="T:System.ArgumentNullException">if <see cref="T:System.Drawing.Graphics"/> object is null.</exception>
            <exception cref="T:System.InvalidOperationException">if there are no layers to render.</exception>
        </member>
        <member name="M:SharpMap.Map.RenderMap(System.Drawing.Graphics,SharpMap.Layers.LayerCollectionType,System.Boolean,System.Boolean)">
            <summary>
            Renders the map using the provided <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="g">the <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="layerCollectionType">the <see cref="T:SharpMap.Layers.LayerCollectionType"/> to use</param>
            <param name="drawMapDecorations">Set whether to draw map decorations on the map (if such are set)</param>
            <param name="drawTransparent">Set whether to draw with transparent background or with BackColor as background</param>
            <exception cref="T:System.ArgumentNullException">if <see cref="T:System.Drawing.Graphics"/> object is null.</exception>
            <exception cref="T:System.InvalidOperationException">if there are no layers to render.</exception>
        </member>
        <member name="M:SharpMap.Map.Clone">
            <summary>
            Returns a cloned copy of this map-object.
            Layers are not cloned. The same instances are referenced from the cloned copy as from the original.
            The property <see cref="F:SharpMap.Map.DisposeLayersOnDispose"/> is however false on this object (which prevents layers beeing disposed and then not usable from the original map)
            </summary>
            <returns>Instance of <see cref="T:SharpMap.Map"/></returns>
        </member>
        <member name="M:SharpMap.Map.FindLayer(System.String)">
            <summary>
            Returns an enumerable for all layers containing the search parameter in the LayerName property
            </summary>
            <param name="layername">Search parameter</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:SharpMap.Map.GetLayerByName(System.String)">
            <summary>
            Returns a layer by its name
            </summary>
            <param name="name">Name of layer</param>
            <returns>Layer</returns>
        </member>
        <member name="M:SharpMap.Map.ZoomToExtents">
            <summary>
            Zooms to the extents of all layers
            </summary>
        </member>
        <member name="M:SharpMap.Map.ZoomToBox(GeoAPI.Geometries.Envelope,System.Boolean)">
            <summary>
            Zooms the map to fit a bounding box
            </summary>
            <remarks>
            NOTE: If the aspect ratio of the box and the aspect ratio of the mapsize
            isn't the same, the resulting map-envelope will be adjusted so that it contains
            the bounding box, thus making the resulting envelope larger!
            </remarks>
            <param name="bbox"></param>
            <param name="careAboutTransform">True if any map rotation should be taken into account (eg ZoomToExtents).
            False if rotation has already been accounted for (eg Zoom prev / next stack, or non-rotated views)</param>
        </member>
        <member name="M:SharpMap.Map.WorldToImage(GeoAPI.Geometries.Coordinate[],System.Boolean)">
            <summary>
            Converts an array of world coordinates to image coordinates based on the current <see cref="P:SharpMap.Map.Zoom"/>, <see cref="P:SharpMap.Map.Center"/>,
            map <see cref="P:SharpMap.Map.Size"/>, and (optionally) the <see cref="P:SharpMap.Map.MapTransform"/>.
            </summary>
            <param name="coordinates">Coordinate array in world coordinates</param>
            <param name="careAboutMapTransform">Indicates whether <see cref="P:SharpMap.Map.MapTransform"/> should be applied. True for typical coordinate calcs,
            False when rendering to image as the Graphics object has already applied the MapTransform</param>
            <returns>PointF array in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Map.WorldToImage(GeoAPI.Geometries.Coordinate,System.Boolean)">
            <summary>
            Converts a point in world coordinates to image coordinates based on the current <see cref="P:SharpMap.Map.Zoom"/>, <see cref="P:SharpMap.Map.Center"/>,
            map <see cref="P:SharpMap.Map.Size"/>, and (optionally) the <see cref="P:SharpMap.Map.MapTransform"/>.
            </summary>
            <param name="p">Point in world coordinates</param>
            <param name="careAboutMapTransform">Indicates whether <see cref="P:SharpMap.Map.MapTransform"/> should be applied. When rendering to image,
            the Graphics object has usually applied MapTransform</param>
            <returns>PointF in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Map.ImageToWorld(System.Drawing.PointF[],System.Boolean)">
            <summary>
            Converts a point array from image coordinates to world coordinates based on the current <see cref="P:SharpMap.Map.Zoom"/>, <see cref="P:SharpMap.Map.Center"/>,
            map <see cref="P:SharpMap.Map.Size"/>, and (optionally) the <see cref="P:SharpMap.Map.MapTransform"/>.
            </summary>
            <param name="points">Point array in image coordinates. Note: if you wish to preserve the input values then
            you must clone the point array as it will be modified if a MapTransform is applied</param>
            <param name="careAboutMapTransform">Indicates whether <see cref="P:SharpMap.Map.MapTransform"/> should be applied. </param>
            <returns>Point array in world coordinates</returns>
        </member>
        <member name="M:SharpMap.Map.ImageToWorld(System.Drawing.PointF,System.Boolean)">
            <summary>
            Converts a point from image coordinates to world coordinates based on the current <see cref="P:SharpMap.Map.Zoom"/>, <see cref="P:SharpMap.Map.Center"/>,
            map <see cref="P:SharpMap.Map.Size"/>, and (optionally) the <see cref="P:SharpMap.Map.MapTransform"/>.
            </summary>
            <param name="p">Point in image coordinates. Note: if you wish to preserve the input value then
            you must clone the point as it will be modified if a MapTransform is applied</param>
            <param name="careAboutMapTransform">Indicates whether <see cref="P:SharpMap.Map.MapTransform"/> should be applied. </param>
            <returns>Point in world coordinates</returns>
        </member>
        <member name="P:SharpMap.Map.ID">
            <summary>
            Gets or sets the unique identifier of the map.
            </summary>
        </member>
        <member name="P:SharpMap.Map.SRID">
            <summary>
            Gets or sets the SRID of the map
            </summary>
        </member>
        <member name="P:SharpMap.Map.Factory">
            <summary>
            Factory used to create geometries
            </summary>
        </member>
        <member name="P:SharpMap.Map.Decorations">
            <summary>
            List of all map decorations
            </summary>
        </member>
        <member name="P:SharpMap.Map.Envelope">
            <summary>
            <para>Gets the rectilinear extents of the current map based on the current <see cref="P:SharpMap.Map.Zoom"/>,
            <see cref="P:SharpMap.Map.Center"/>, map <see cref="P:SharpMap.Map.Size"/>, and (optionally) the <see cref="P:SharpMap.Map.MapTransform"/></para>
            <para>If a <see cref="P:SharpMap.Map.MapTransform"/> is applied, the envelope CONTAINING the rotated view
            will be returned (used by layers to spatially select data) and the aspect ratio will NOT be the
            same as map <see cref="P:SharpMap.Map.Size"/>. If aspect ratio is important then refer to <see cref="P:SharpMap.Map.Zoom"/>
            and <see cref="P:SharpMap.Map.MapHeight"/></para> 
            </summary>
        </member>
        <member name="P:SharpMap.Map.MapTransform">
            <summary>
            Using the <see cref="P:SharpMap.Map.MapTransform"/> you can alter the coordinate system of the map rendering.
            This makes it possible to rotate the image, for instance to have another direction than north upwards.
            <para>The matrix elements are stored, and a new matrix is instantiated for every request</para>
            </summary>
            <example>
            Rotate the map output +45 degrees around its center (ie north arrow will point to the top-right corner):
            <code lang="C#">
            System.Drawing.Drawing2D.Matrix maptransform = new System.Drawing.Drawing2D.Matrix(); //Create transformation matrix
            maptransform.RotateAt(45,new PointF(myMap.Size.Width/2,myMap.Size.Height/2)); //Apply 45 degrees rotation around the center of the map
            myMap.MapTransform = maptransform; //Apply transformation to map
            </code>
            </example>
        </member>
        <member name="P:SharpMap.Map.MapTransformInverted">
            <summary>
            The inverse of <see cref="P:SharpMap.Map.MapTransform"/> used for calculations from Image to World.
            <para>The matrix elements are stored, and a new matrix is instantiated for every request</para>
            </summary>
        </member>
        <member name="P:SharpMap.Map.MapTransformRotation">
            <summary>
            MapTransform Rotation in degrees. Facilitates determining if map is rotated without locking MapTransform.
            Positive rotation is applied anti-clockwise, with the apparent effect of north arrow rotating clockwise. 
            </summary>
        </member>
        <member name="P:SharpMap.Map.Layers">
            <summary>
            A collection of layers. The first layer in the list is drawn first, the last one on top.
            </summary>
        </member>
        <member name="P:SharpMap.Map.BackgroundLayer">
            <summary>
            Collection of background Layers
            </summary>
        </member>
        <member name="P:SharpMap.Map.VariableLayers">
            <summary>
            A collection of layers. The first layer in the list is drawn first, the last one on top.
            </summary>
        </member>
        <member name="P:SharpMap.Map.BackColor">
            <summary>
            Map background color (defaults to transparent)
            </summary>
        </member>
        <member name="P:SharpMap.Map.CenterOfInterest">
            <summary>
            A focus point on the map.
            </summary>
            <remarks>
            This point stays at its local position when zooming by wheel.
            Possible tiles are fetched in order of the distance to this point.
            </remarks>
        </member>
        <member name="P:SharpMap.Map.Center">
            <summary>
            Center of map in WCS
            </summary>
        </member>
        <member name="P:SharpMap.Map.MapScale">
            <summary>
            Gets or Sets the Scale of the map (related to current DPI-settings of rendering)
            </summary>
        </member>
        <member name="M:SharpMap.Map.GetMapZoomFromScale(System.Double,System.Int32)">
            <summary>
            Calculate the Zoom value for a given Scale value
            </summary>
            <param name="scale"></param>
            <param name="dpi"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Map.GetMapScale(System.Int32)">
            <summary>
            Returns the mapscale if the map was to be rendered at the current <see cref="P:SharpMap.Map.Zoom"/> with the specified DPI-settings
            </summary>
            <param name="dpi"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Map.Zoom">
            <summary>
            Gets or sets the zoom level of map.
            </summary>
            <remarks>
            <para>The zoom level corresponds to the apparent width of the map in WCS units, regardless of any <see cref="P:SharpMap.Map.MapTransform"/>.
            Zoom will only equal <see cref="P:SharpMap.Map.Envelope"/>.Width when <see cref="P:SharpMap.Map.MapTransformRotation"/> is 0 or 180 degrees</para> 
            <para>A zoomlevel of 0 will result in an empty map being rendered, but will not throw an exception</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Map.PixelSize">
            <summary>
            Get Returns the size of a pixel in world coordinate units
            </summary>
        </member>
        <member name="P:SharpMap.Map.PixelWidth">
            <summary>
            Returns the width of a pixel in world coordinate units.
            </summary>
            <remarks>The value returned is the same as <see cref="P:SharpMap.Map.PixelSize"/>.</remarks>
        </member>
        <member name="P:SharpMap.Map.PixelHeight">
            <summary>
            Returns the height of a pixel in world coordinate units.
            </summary>
            <remarks>The value returned is the same as <see cref="P:SharpMap.Map.PixelSize"/> unless <see cref="P:SharpMap.Map.PixelAspectRatio"/> is different from 1.</remarks>
        </member>
        <member name="P:SharpMap.Map.PixelAspectRatio">
            <summary>
            Gets or sets the aspect-ratio of the pixel scales. A value less than 
            1 will make the map stretch upwards, and larger than 1 will make it smaller.
            </summary>
            <exception cref="T:System.ArgumentException">Throws an argument exception when value is 0 or less.</exception>
        </member>
        <member name="P:SharpMap.Map.MapHeight">
            <summary>
            Height of map in world units
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Map.Size">
            <summary>
            Size of output map
            </summary>
        </member>
        <member name="P:SharpMap.Map.MinimumZoom">
            <summary>
            Minimum zoom amount allowed
            </summary>
        </member>
        <member name="P:SharpMap.Map.MaximumZoom">
            <summary>
            Maximum zoom amount allowed
            </summary>
        </member>
        <member name="M:SharpMap.Map.GetExtents">
            <summary>
            Gets the extents of the map based on the extents of all the layers in the layers collection
            </summary>
            <returns>Full map extents</returns>
        </member>
        <member name="P:SharpMap.Map.MaximumExtents">
            <summary>
            Gets or sets a value indicating the maximum visible extent
            </summary>
        </member>
        <member name="P:SharpMap.Map.EnforceMaximumExtents">
            <summary>
            Gets or sets a value indicating if <see cref="P:SharpMap.Map.MaximumExtents"/> should be enforced or not.
            </summary>
        </member>
        <member name="P:SharpMap.Map.Disclaimer">
            <summary>
            Copyright notice to be placed on the map
            </summary>
        </member>
        <member name="P:SharpMap.Map.DisclaimerFont">
            <summary>
            Font to use for the Disclaimer
            </summary>
        </member>
        <member name="P:SharpMap.Map.DisclaimerLocation">
            <summary>
            Location for the disclaimer
            2|1
            -+-
            3|0
            </summary>
        </member>
        <member name="T:SharpMap.LayerRenderingEventArgs">
            <summary>
            Layer rendering event arguments class
            </summary>
        </member>
        <member name="F:SharpMap.LayerRenderingEventArgs.Layer">
            <summary>
            The layer that is being or has been rendered
            </summary>
        </member>
        <member name="F:SharpMap.LayerRenderingEventArgs.LayerCollectionType">
            <summary>
            The layer collection type the layer belongs to.
            </summary>
        </member>
        <member name="M:SharpMap.LayerRenderingEventArgs.#ctor(SharpMap.Layers.ILayer,SharpMap.Layers.LayerCollectionType)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layer">The layer that is being or has been rendered</param>
            <param name="layerCollectionType">The layer collection type the layer belongs to.</param>
        </member>
        <member name="T:SharpMap.MapViewport">
            <summary>
            A <see cref="T:SharpMap.Map"/> utility class, that encapsulates all data required for rendering.
            </summary>
            <remarks>This is a value class</remarks>
        </member>
        <member name="M:SharpMap.MapViewport.#ctor(System.Guid,System.Int32,System.Double,System.Double,GeoAPI.Geometries.Envelope,System.Drawing.Size,System.Double,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.Matrix,System.Single)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="mapId">The id of the map</param>
            <param name="srid">The spatial reference</param>
            <param name="zoom">current map zoom</param>
            <param name="mapHeight">map height</param>
            <param name="env">The envelope containing the viewport</param>
            <param name="size">The size of the viewport</param>
            <param name="pixelAspectRatio">A ratio between width and height</param>
            <param name="mapTransform">An affine map transform matrix</param>
            <param name="mapTransformInverted">The affine map transformation that inverts <paramref name="mapTransform"/></param>
            <param name="mapTransformRotation">The rotation in degrees applied by <paramref name="mapTransform"/></param>
        </member>
        <member name="M:SharpMap.MapViewport.#ctor(SharpMap.Map)">
            <summary>
            Creates an instance of this class based on the provided map
            </summary>
            <param name="map">The Map</param>
        </member>
        <member name="P:SharpMap.MapViewport.ID">
            <summary>
            Gets a value indicating the which <see cref="T:SharpMap.Map"/> this viewport belongs to.
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.SRID">
            <summary>
            Gets a value indicating the spatial reference id of the map
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.Size">
            <summary>
            Gets a value indicating the size of the map
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.Envelope">
            <summary>
            <para>Gets the rectilinear extents of the map based on the current <see cref="P:SharpMap.MapViewport.Zoom"/>,
            <see cref="P:SharpMap.MapViewport.Center"/>, map <see cref="P:SharpMap.MapViewport.Size"/>, and (optionally) the <see cref="P:SharpMap.MapViewport.MapTransform"/></para>
            <para>If a <see cref="P:SharpMap.MapViewport.MapTransform"/> is applied, the envelope CONTAINING the rotated view
            will be returned (used by layers to spatially select data) and the aspect ratio will NOT be the
            same as map <see cref="P:SharpMap.MapViewport.Size"/>. If aspect ratio is important then refer to <see cref="P:SharpMap.MapViewport.Zoom"/>
            and <see cref="P:SharpMap.MapViewport.MapHeight"/></para> 
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.MapTransform">
            <summary>
            Gets a value indicating the transformation that has to be applied when
            rendering the map
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.MapTransformInverted">
            <summary>
            Gets a value indicating the inverse transformation that is applied when
            rendering the map
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.MapTransformRotation">
            <summary>
            Map rotation in degrees (defined by <see cref="P:SharpMap.MapViewport.MapTransform"/>)
            </summary>
        </member>
        <member name="M:SharpMap.MapViewport.WorldToMapTransform(System.Boolean)">
            <summary>
            Cached affine transformation used to transform world coordinates from apparent rotated coordinate frame (ie MapTransformRotation != 0)
            to image space. Unlike MapTransform, this matrix defines a complete transformation from World to Image taking into account MapRotation.
            2 variants are available, depending on whether or not map rotation has already been applied.
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.Center">
            <summary>
            Gets a value indicating the center of the map viewport
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.CenterOfInterest">
            <summary>
            Gets a value indicating the center of the map viewport
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.Zoom">
            <summary>
            Gets a value indicating the zoom of the map viewport
            </summary>
            <remarks>This value is identical to <see cref="P:SharpMap.MapViewport.MapWidth"/></remarks>
        </member>
        <member name="P:SharpMap.MapViewport.MapHeight">
            <summary>
            Gets a value indicating the height of the map viewport in world units
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.MapWidth">
            <summary>
            Gets a value indicating the width of the map viewport in world units
            </summary>
            <remarks>This value is equal to <see cref="P:SharpMap.MapViewport.Zoom"/></remarks>
        </member>
        <member name="P:SharpMap.MapViewport.Left">
            <summary>
            Applicable to non-rotated views only, returning the minimum X value of the map viewport in world units
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.Top">
            <summary>
            Applicable to non-rotated views only, returning the maximum Y value of the map viewport in world units
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.PixelAspectRatio">
            <summary>
            Gets or sets the aspect-ratio of the pixel scales. A value less than 
            1 will make the map stretch upwards, and larger than 1 will make it smaller.
            </summary>
            <exception cref="T:System.ArgumentException">Throws an argument exception when value is 0 or less.</exception>
        </member>
        <member name="P:SharpMap.MapViewport.PixelWidth">
            <summary>
            Returns the width of a pixel in world coordinate units.
            </summary>
        </member>
        <member name="P:SharpMap.MapViewport.PixelHeight">
            <summary>
            Returns the height of a pixel in world coordinate units.
            </summary>
        </member>
        <member name="M:SharpMap.MapViewport.GetMapScale(System.Int32)">
            <summary>
            Function to compute the denominator of the viewport's scale when using a given <paramref name="dpi"/> resolution.
            </summary>
            <param name="dpi">The resolution</param>
            <returns>The scale's denominator</returns>
        </member>
        <member name="M:SharpMap.MapViewport.WorldToImage(GeoAPI.Geometries.Coordinate[],System.Boolean)">
            <summary>
            Converts an array of world coordinates to image coordinates based on the current <see cref="P:SharpMap.MapViewport.Zoom"/>, <see cref="P:SharpMap.MapViewport.Center"/>,
            map <see cref="P:SharpMap.MapViewport.Size"/>, and (optionally) the <see cref="P:SharpMap.MapViewport.MapTransform"/>.
            </summary>
            <param name="coordinates">Coordinate array in world coordinates</param>
            <param name="careAboutMapTransform">Indicates whether <see cref="P:SharpMap.MapViewport.MapTransform"/> should be applied. True for typical coordinate calcs,
            False when rendering to image as the Graphics object has already applied the MapTransform</param>
            <returns>PointF array in image coordinates</returns>
        </member>
        <member name="M:SharpMap.MapViewport.WorldToImage(GeoAPI.Geometries.Coordinate,System.Boolean)">
            <summary>
            Converts a point in world coordinates to image coordinates based on the current <see cref="P:SharpMap.MapViewport.Zoom"/>, <see cref="P:SharpMap.MapViewport.Center"/>,
            map <see cref="P:SharpMap.MapViewport.Size"/>, and (optionally) the <see cref="P:SharpMap.MapViewport.MapTransform"/>.
            </summary>
            <param name="p">Point in world coordinates</param>
            <param name="careAboutMapTransform">Indicates whether <see cref="P:SharpMap.MapViewport.MapTransform"/> should be applied. When rendering to image,
            the Graphics object has usually applied MapTransform</param>
            <returns>PointF in image coordinates</returns>
        </member>
        <member name="M:SharpMap.MapViewport.ImageToWorld(System.Drawing.PointF[],System.Boolean)">
            <summary>
            Converts a point array from image coordinates to world coordinates based on the current <see cref="P:SharpMap.MapViewport.Zoom"/>, <see cref="P:SharpMap.MapViewport.Center"/>,
            map <see cref="P:SharpMap.MapViewport.Size"/>, and (optionally) the <see cref="P:SharpMap.MapViewport.MapTransform"/>.
            </summary>
            <param name="points">Point array in image coordinates. Note: if you wish to preserve the input values then
            you must clone the point array as it will be modified if a MapTransform is applied</param>
            <param name="careAboutMapTransform">Indicates whether <see cref="P:SharpMap.MapViewport.MapTransform"/> should be applied. </param>
            <returns>Point array in world coordinates</returns>
        </member>
        <member name="M:SharpMap.MapViewport.ImageToWorld(System.Drawing.PointF,System.Boolean)">
            <summary>
            Converts a point from image coordinates to world coordinates based on the current <see cref="P:SharpMap.MapViewport.Zoom"/>, <see cref="P:SharpMap.MapViewport.Center"/>,
            map <see cref="P:SharpMap.MapViewport.Size"/>, and (optionally) the <see cref="P:SharpMap.MapViewport.MapTransform"/>.
            </summary>
            <param name="p">Point in image coordinates. Note: if you wish to preserve the input value then
            you must clone the point as it will be modified if a MapTransform is applied</param>
            <param name="careAboutMapTransform">Indicates whether <see cref="P:SharpMap.MapViewport.MapTransform"/> should be applied. </param>
            <returns>Point in world coordinates</returns>
        </member>
        <member name="M:SharpMap.MapViewport.op_Implicit(SharpMap.Map)~SharpMap.MapViewport">
            <summary>
            Creates a map viewport from a given map
            </summary>
            <param name="map">The map</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.MapViewPortGuard">
            <summary>
            Utility class that checks Viewport min/max Zoom and constraint
            </summary>
        </member>
        <member name="P:SharpMap.MapViewPortGuard.MinimumZoom">
            <summary>
            Gets or sets a value indicating the minimum zoom level.
            </summary>
        </member>
        <member name="P:SharpMap.MapViewPortGuard.MaximumZoom">
            <summary>
            Gets or sets a value indicating the maximum zoom level.
            </summary>
        </member>
        <member name="P:SharpMap.MapViewPortGuard.MaximumExtents">
            <summary>
            Gets or sets a value indicating the maximum extents
            </summary>
        </member>
        <member name="P:SharpMap.MapViewPortGuard.Size">
            <summary>
            Gets or sets the size of the Map in device units (Pixel)
            </summary>
        </member>
        <member name="P:SharpMap.MapViewPortGuard.PixelAspectRatio">
            <summary>
            Gets or sets the aspect-ratio of the pixel scales. A value less than 
            1 will make the map streach upwards, and larger than 1 will make it smaller.
            </summary>
            <exception cref="T:System.ArgumentException">Throws an argument exception when value is 0 or less.</exception>
        </member>
        <member name="M:SharpMap.MapViewPortGuard.#ctor(System.Drawing.Size,System.Double,System.Double)">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.MapViewPortGuard.EnforceMaximumExtents">
            <summary>
            Gets or sets a value indicating if <see cref="P:SharpMap.Map.MaximumExtents"/> should be enforced or not.
            </summary>
        </member>
        <member name="M:SharpMap.MapViewPortGuard.VerifyZoom(System.Double,GeoAPI.Geometries.Coordinate)">
            <summary>
            Verifies the zoom level and center of the map
            </summary>
            <param name="zoom">The zoom level to test</param>
            <param name="center">The center of the map. This coordinate might change so you <b>must</b> provide a copy if you want to preserve the old value</param>
            <returns>The zoom level, might have changed</returns>
        </member>
        <member name="M:SharpMap.MapViewPortGuard.VerifyValidViewport(System.Double,GeoAPI.Geometries.Coordinate)">
            <summary>
            Verifies the valid viewport, makes adjustments if required
            </summary>
            <param name="zoom">The current zoom</param>
            <param name="center">The </param>
            <returns>The verified zoom level</returns>
        </member>
        <member name="T:SharpMap.MapViewportLock">
            <summary>
            Utility class to lock a map's viewport so it cannot be changed
            </summary>
        </member>
        <member name="M:SharpMap.MapViewportLock.#ctor(SharpMap.Map)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:SharpMap.MapViewportLock.Lock">
            <summary>
            Lock the viewport of the map
            </summary>
        </member>
        <member name="P:SharpMap.MapViewportLock.IsLocked">
            <summary>
            Gets a value indicating that the map's viewport is locked
            </summary>
        </member>
        <member name="M:SharpMap.MapViewportLock.Unlock">
            <summary>
            Unlock the viewport of the map
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.Disclaimer">
            <summary>
            Disclaimer map decoration
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Disclaimer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.Text">
            <summary>
            Gets or sets the disclaimer text
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.Font">
            <summary>
            Gets or sets the disclaimer font
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.ForeColor">
            <summary>
            Gets or sets the font color
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.Halo">
            <summary>
            Gets or sets the halo width. A width of 0 disables rendering halo
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.HaloColor">
            <summary>
            Gets or sets the halo color
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.Format">
            <summary>
            Gets or sets the Format
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Disclaimer.InternalSize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <intheritdoc cref="M:SharpMap.Rendering.Decoration.MapDecoration.InternalSize(System.Drawing.Graphics,SharpMap.MapViewport)" />
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Disclaimer.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)">
            <intheritdoc cref="M:SharpMap.Rendering.Decoration.MapDecoration.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)" />
        </member>
        <member name="T:SharpMap.Rendering.Decoration.EyeOfSight">
            <summary>
            Eye of sight class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.EyeOfSight.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.EyeOfSight.NeedleOutlineColor">
            <summary>
            Gets or sets the outline color 
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.EyeOfSight.NeedleOutlineWidth">
            <summary>
            The width of the needle outline
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.EyeOfSight.NeedleFillColor">
            <summary>
            The color to
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.EyeOfSight.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)">
            <inheritdoc cref="M:SharpMap.Rendering.Decoration.MapDecoration.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)"/>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.Graticule.Graticule">
            <summary>
            Map Decoration to draw projected and/or geographic graticule on the map.
            The Map.SRID MUST be set to a valid ID for the graticule to render, as
            appropriate units are derived from the map's coordinate reference system
            (eg degrees-minutes-seconds, or projected units such as metres).
            <para>
            The Projected Coordinate System graticule is managed via <see cref="P:SharpMap.Rendering.Decoration.Graticule.Graticule.PcsGraticuleStyle"/>,
            and the Geographic Coordinate System graticule via <see cref="P:SharpMap.Rendering.Decoration.Graticule.Graticule.GcsGraticuleStyle"/> 
            </para>
            Web Mercator Projected Coordinate System graticule can be rendered as a standard 
            rectilinear graticule, or as meridian scale distortion lines via <see cref="P:SharpMap.Rendering.Decoration.Graticule.Graticule.PcsGraticuleMode"/> 
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.Graticule.Graticule.GraticuleDef">
            <summary>
            Helper class for managing graticule geometry
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.Graticule.Graticule.LabelEnds">
            <summary>
            Enumerator for indicating which end(s) of a line should be labelled
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.Graticule.PcsGraticuleStyle">
            <summary>
            Graticule style definition for the Projected Coordinate System
            </summary>    
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.Graticule.PcsGraticuleMode">
            <summary>
            Defines how Web Mercator Projected Graticule will be rendered.
            Either as a standard rectilinear graticule, or as meridian scale distortion lines
            </summary>    
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.Graticule.GcsGraticuleStyle">
            <summary>
            Graticule style definition for the Geographic Coordinate System
            </summary>    
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.#ctor">
            <summary>
            Creates an instance of this class using default properties.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.InternalSize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <intheritdoc cref="M:SharpMap.Rendering.Decoration.MapDecoration.InternalSize(System.Drawing.Graphics,SharpMap.MapViewport)" />
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)">
            <intheritdoc cref="M:SharpMap.Rendering.Decoration.MapDecoration.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)" />
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.OnRenderInternal(System.Drawing.Graphics,SharpMap.MapViewport,SharpMap.Rendering.Decoration.Graticule.GraticuleStyle,GeoAPI.Geometries.Envelope,GeoAPI.Geometries.Envelope,System.Boolean)">
            <summary>
            Fully render a graticule according to the given style 
            (ie Projected graticule is rendered separately to Geographic graticule)
            </summary>
            <param name="g"></param>
            <param name="map"></param>
            <param name="style"></param>
            <param name="constrExtents"></param>
            <param name="crsDomain"></param>
            <param name="webMercatorScaleLinesActive">Refer to &lt;see cref="PcsGraticuleMode"/&gt;</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalculateParallels(SharpMap.Rendering.Decoration.Graticule.GraticuleStyle,GeoAPI.Geometries.Envelope,GeoAPI.Geometries.Envelope,System.Boolean)">
            <summary>
            Progressing from South to North, calculate geometry for each parallel at regular intervals from west to east,
            constraining to CRS domain where applicable.  
            </summary>
            <param name="style"></param>
            <param name="constrExtents"></param>
            <param name="crsDomain"></param>
            <param name="webMercatorScaleLinesActive">Refer to &lt;see cref="PcsGraticuleMode"/&gt;</param>
            <returns> List of graticule geometries for rendering</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalculateMeridians(SharpMap.Rendering.Decoration.Graticule.GraticuleStyle,GeoAPI.Geometries.Envelope,GeoAPI.Geometries.Envelope,System.Boolean)">
            <summary>
            Progressing from West to East, calculate geometry for each meridian at regular intervals from south to north,
            constraining to CRS domain where applicable. Graticule intersections (ticks) are also computed if required by the style  
            </summary>
            <param name="style"></param>
            <param name="constrExtents"></param>
            <param name="crsDomain"></param>
            <param name="webMercatorScaleLinesActive">Refer to &lt;see cref="PcsGraticuleMode"/&gt;</param>
            <returns> List of graticule geometries for rendering</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.IsPrimaryInterval(System.Double,System.Double,System.Double)">
            <summary>
            Returns true if value is a multiple of the primaryInterval
            </summary>
            <param name="value">Number to be check for Primary interval</param>
            <param name="primaryInterval"></param>
            <param name="tolerance">Tolerance in Geographic or Projected units</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.ExceedsResolution(SharpMap.Rendering.Decoration.Graticule.GraticuleStyle,System.Boolean)">
            <summary>
            Test to see if this increment is getting too small to be of practical use.
            This allows secondary graticule to be filtered out independently of primary graticule
            as user zooms in 
            </summary>
            <param name="style"></param>
            <param name="isPrimaryIncrement"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.GetFormattedDistanceLabel(System.Double)">
            <summary>
            Return a formatted distance label
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.GetFormattedLabel(System.Boolean,System.Double,GeoAPI.CoordinateSystems.AxisOrientationEnum)">
            <summary>
            Format a value with appropriate units and axis suffix 
            </summary>
            <param name="isGeographicCoordinateSystem"></param>
            <param name="value"></param>
            <param name="axis"></param>
            <returns>Formatted label, such as 7,000,000mN or 8°15'20"E</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.GetDecimalPlaces(System.Double,System.Int32)">
            <summary>
            Determine number of decimal places required for <paramref name="maxPrecision "/> without any trailing zeros
            </summary>
            <param name="value"></param>
            <param name="maxPrecision"></param>
            <returns>Number of decimal places without any trailing zeros</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.TransformPreserveZ(GeoAPI.CoordinateSystems.Transformations.IMathTransform,GeoAPI.Geometries.Coordinate[])">
            <summary>
            Transform coordinates between coordinate systems, preserving Z ordinate.
            </summary>
            <param name="transform"></param>
            <param name="coords"></param>
            <returns>Transformed array with z ordinate preserved</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.RenderGraticuleLines(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{SharpMap.Rendering.Decoration.Graticule.Graticule.GraticuleDef})">
            <summary>
            Render giving graticule definitions as a simple line according to the associated style 
            </summary>
            <param name="g"></param>
            <param name="graticuleDefs"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.RenderGraticuleTicks(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{SharpMap.Rendering.Decoration.Graticule.Graticule.GraticuleDef})">
            <summary>
            Render ticks for ALL graticule definitions according to the associated style
            </summary>
            <param name="g"></param>
            <param name="graticuleDefs"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.RenderEdgeCuts(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{SharpMap.Rendering.Decoration.Graticule.Graticule.GraticuleDef})">
            <summary>
            Edge cuts are the short lines where a graticule intersects the border
            </summary>
            <param name="g"></param>
            <param name="graticuleDefs"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.RenderLabels(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{SharpMap.Rendering.Decoration.Graticule.Graticule.GraticuleDef},System.Single)">
            <summary>
            Render labels for ALL graticule definitions according to the associated style
            </summary>
            <param name="g"></param>
            <param name="graticuleDefs">Graticule parameters and geometry</param>
            <param name="mapTransformRotation"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.GetLabelEnds(SharpMap.Rendering.Decoration.Graticule.GraticuleStyle,SharpMap.Rendering.Decoration.Graticule.Graticule.GraticuleDef,System.Single)">
            <summary>
            Determine which ends of the graticule line should be labelled as per the given <paramref name="style"/>,
            taking into account (any) map rotation and whether this graticule is a Parallel or Meridian 
            </summary>
            <param name="style">Graticule style</param>
            <param name="def">Graticule definition and geometry</param>
            <param name="mapTransformRotation"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.RenderLabel(System.Drawing.Graphics,System.Drawing.Drawing2D.Matrix,SharpMap.Rendering.Decoration.Graticule.Graticule.GraticuleDef,SharpMap.Rendering.Decoration.Graticule.GraticuleStyle,System.Drawing.SizeF,SharpMap.Rendering.Decoration.Graticule.Graticule.LabelEnds)">
            <summary>
            Draw the label
            </summary>
            <param name="g"></param>
            <param name="matrix">cached matrix to be re-used for each label</param>
            <param name="def">Graticule definition and geometry</param>
            <param name="style">Graticule Style</param>
            <param name="labelSize">estimated label size from g.MeasureString</param>
            <param name="thisEnd">the end of the line to be labelled</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.RenderScaleLineLabels(System.Drawing.Graphics,System.Collections.Generic.List{SharpMap.Rendering.Decoration.Graticule.Graticule.GraticuleDef},SharpMap.MapViewport)">
            <summary>
            Render web mercator scale distortion meridians 
            </summary>
            <param name="g"></param>
            <param name="graticuleDefs"></param>
            <param name="map"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.GetIntersectionLines(System.Drawing.Graphics,SharpMap.MapViewport,SharpMap.Rendering.Decoration.MapDecorationAnchorFlags[],System.Int32)">
            <summary>
            Construct lines inset from image border, then convert to world units to
            be used for calculating intersections with graticule lines in world units
            </summary>
            <param name="g"></param>
            <param name="map"></param>
            <param name="sides"></param>
            <param name="margin"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalculateScaleLineIntersections(System.Collections.Generic.List{SharpMap.Rendering.Decoration.Graticule.Graticule.GraticuleDef},NetTopologySuite.Geometries.LineString)">
            <summary>
            Calculate intersections of given line with all of the provided graticule lines 
            </summary>
            <param name="filteredDefs"></param>
            <param name="line"></param>
            <returns>Coordinate list, ordered West to East, South to North</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.InitCoordinateSystem(System.Int32)">
            <summary>
            Configure coordinate systems and transformations to be used for constructing graticule lines
            </summary>
            <param name="mapSrid"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.GetCrsDomain(GeoAPI.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Coordinate Reference Domain defining appropriate area of use 
            </summary>
            <param name="crs"></param>
            <returns>Crs Domain envelope, or null Envelope if not defined and cannot be derived</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalculateMetrics(System.Drawing.Graphics,SharpMap.MapViewport,System.Boolean)">
            <summary>
            Calculate the envelopes used to constructed projected and geographic graticule lines
            and the clipping polygon to trim lines to exact view extent
            </summary>
            <param name="g"></param>
            <param name="map"></param>
            <param name="webMercatorScaleLinesActive">Refer to &lt;see cref="PcsGraticuleMode"/&gt;</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalcPcsConstrExtents(GeoAPI.Geometries.Envelope,System.Boolean)">
            <summary>
            Calculate the primary and secondary intervals based upon the dimensions of <paramref name="viewEnv"/>
            </summary>
            <param name="viewEnv"></param>
            <param name="webMercatorScaleLinesActive">Refer to &lt;see cref="PcsGraticuleMode"/&gt;</param>
            <returns>Envelope snapped to multiples of the calculated secondary interval</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalcGcsConstrExtents(GeoAPI.Geometries.Envelope)">
            <summary>
            Calculate the primary and secondary intervals based upon the dimensions of <paramref name="viewEnvDegrees"/>
            </summary>
            <param name="viewEnvDegrees"></param>
            <returns>Envelope snapped to multiples of the calculated secondary interval</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalcDivisor(System.Int32,System.Int32,System.Int32,System.Double[],System.Double)">
            <summary>
            Calculate largest "nice number" increment less than or equal to <paramref name="maxValue"/>
            </summary>
            <param name="multiplierBase"></param>
            <param name="minPower"></param>
            <param name="maxPower"></param>
            <param name="preferredMultiples"></param>
            <param name="maxValue"></param>
            <returns>The secondary interval</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalcConstrExtentsRectilinear(GeoAPI.Geometries.Envelope,System.Double)">
            <summary>
            Returns envelope expanded to nearest intervals of <paramref name="secondaryInterval"/>.
            Calculated envelope will usually be slightly larger than <paramref name="viewEnv"/>
            </summary>
            <param name="viewEnv"></param>
            <param name="secondaryInterval"></param>
            <returns>Envelope snapped to multiples of the given secondary interval</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalcConstExtentsWebMercator(GeoAPI.Geometries.Envelope,System.Double)">
            <summary>
            Adjust east-west extents of <paramref name="viewEnv"/> to ensure ALL  
            scale-distortion meridian lines passing through view extent will plot 
            </summary>
            <param name="viewEnv"></param>
            <param name="secondaryInterval"></param>
            <returns>Envelope snapped to multiples of the given secondary interval</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalcEquatorialX(GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the equivalent X value of this <paramref name="coord"/> at the equator,
            taking into account Web Mercator latitude-dependent scale factor. 
            </summary>
            <param name="coord"></param>
            <returns>Equatorial X ordinate</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.Graticule.CalcScaleCorrectedX(System.Double,System.Double)">
            <summary>
            Applies the Web Mercator scale factor to the <paramref name="x" /> ordinate based upon the latitude dependent <paramref name="y" /> ordinate
            </summary>
            <param name="x">An x-ordinate value</param>
            <param name="y">An y-ordinate value</param>
            <returns>Scale-corrected X ordinate</returns>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.Graticule.GraticuleBorders">
            <summary>
            Enumeration defining which borders should be labelled
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleBorders.None">
            <summary>
            No borders
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleBorders.LeftTop">
            <summary>
            Label Left and Top borders
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleBorders.LeftBottom">
            <summary>
            Label Left and Bottom borders
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleBorders.RightTop">
            <summary>
            Label Right and Top borders
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleBorders.RightBottom">
            <summary>
            Label Right and Bottom borders
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleBorders.All">
            <summary>
            Label all borders
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.Graticule.GraticuleLineStyle">
            <summary>
            An enumeration of possible graticule line styles.
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleLineStyle.None">
            <summary>
            Do not draw line (or ticks)
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleLineStyle.Continuous">
            <summary>
            Parallels and meridians plot as continuous lines 
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleLineStyle.SolidTick">
            <summary>
            Plot intersections of parallels and meridians only, using a Solid tick mark 
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleLineStyle.HollowTick">
            <summary>
            Plot intersections of parallels and meridians only, using a Hollow tick mark 
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle">
            <summary>
            Graticule rendering properties, with Primary (major) and Secondary (minor) intervals.
            Use <see cref="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryLineStyle"/>, <see cref="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryLineStyle"/>, and <see cref="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.NumSubdivisions"/>
            to define how a graticule will render, and configure other properties to tune layout and formatting.  
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.GraticuleTheme">
            <summary>
            Apply a styling theme to a Graticule Style 
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.GraticuleTheme.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.GraticuleTheme.Subtle">
            <summary>
            Sublte
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.GraticuleTheme.None">
            <summary>
            None
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryPen">
            <summary>
            Primary line style  
            Dashed and dotted line styles can be defined using Pen.DashPattern and Pen.DashStyle
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryLineStyle">
            <summary>
            Line / tick style for primary graticule, or GraticuleLineStyle.None to disable this GraticuleStyle 
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryTickSize">
            <summary>
            Size of tick (pixels) at intersection of primary graticule lines
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryCustomTick">
            <summary>
            Custom cross-hair style tick (design your own), null to use <see cref="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryLineStyle"/>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryMargin">
            <summary>
            Length (pixels) of edge cuts (ie where graticule intersects border) or zero for none
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryPen">
            <summary>
            Secondary line style.
            Dashed and dotted line styles can be defined using Pen.DashPattern and Pen.DashStyle
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryLineStyle">
            <summary>
            Line / tick style for secondary graticule, or GraticuleLineStyle.None to disable Secondary units
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryTickSize">
            <summary>
            Size of tick (pixels) at intersection of secondary graticule lines
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryCustomTick">
            <summary>
            Custom cross-hair style tick (design your own), or null to use <see cref="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryLineStyle"/>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryMargin">
            <summary>
            Length (pixels) of edge cuts (ie where graticule intersects border) or zero for none
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.LabelBorders">
            <summary>
            Edges to be labelled, taking into account any map rotation 
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryLabelFont">
            <summary>
            Font for labelling primary graticule lines 
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryLabelColor">
            <summary>
            Primary label color 
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryLabelOffset">
            <summary>
            Offset to lower-left corner of label position relative to graticule intersection with border.
            Positive X offset is applied along the graticule line.
            Positive Y offset is applied perpendicular to graticule line.
            An offset of (2,2) will draw the label just inside the border, sitting just above the graticule.
            To position label on extension of edge cut, set X = <see cref="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryMargin"/> and Y = negative half <see cref="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.PrimaryLabelFont"/> height
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryLabelFont">
            <summary>
            Font for labelling secondary graticule lines 
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryLabelColor">
            <summary>
            Secondary label color 
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryLabelOffset">
            <summary>
            Offset to lower-left corner of label position relative to graticule intersection with border.
            Positive X offset is applied along the graticule line.
            Positive Y offset is applied perpendicular to graticule line.
            An offset of (2,2) will draw the label just inside the border, sitting just above the graticule.
            To position label on extension of edge cut, set X = <see cref="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryMargin"/> and Y = negative half <see cref="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.SecondaryLabelFont"/> height
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.LabelSubdivisions">
            <summary>
            True if secondary edge cuts (ie subdivisions) should be labelled in addition to primary labels (ie division)/>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.LabelHalo">
            <summary>
            Background color to assist reading labels, or null for no halo
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.Division">
            <summary>
            Interval between Primary graticule lines (calculated to provide at least 2 cuts along shortest border)
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.Subdivision">
            <summary>
            Interval between Secondary graticule lines, derived from Division and NumSubdivisions
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.NumSubdivisions">
            <summary>
            Number of intervals to appear between Primary graticule lines (or zero to disable Secondary graticule)
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.MinVisible">
            <summary>
            Minimum visible zoom level for rendering, or zero for not applicable
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.MaxVisible">
            <summary>
            Maximum visible zoom level for rendering, or double.MaxValue for not applicable
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.VisibilityUnits">
            <summary>
            Gets or Sets what level-reference the Min/Max values are defined in
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.#ctor(SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.GraticuleTheme,SharpMap.Rendering.Decoration.Graticule.GraticuleLineStyle,System.Boolean,SharpMap.Rendering.Decoration.Graticule.GraticuleBorders)">
            <summary>
            Quickly style a graticule without configuring each individual property 
            </summary>
            <param name="theme"></param>
            <param name="lineStyle"></param>
            <param name="withSecondaryIntervals"></param>
            <param name="labelBorders"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.IsTickRequired(System.Boolean,System.Boolean)">
            <summary>
            Returns true if a primary or secondary tick is required for given combination of primary and secondary meridians and parallels 
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.GetTick(System.Boolean)">
            <summary>
            Returns the appropriate tick
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Graticule.GraticuleStyle.CreateTick(System.Int32,SharpMap.Rendering.Decoration.Graticule.GraticuleLineStyle)">
            <summary>
            Create a simple tick (cross) symbol 
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.Graticule.PcsGraticuleMode">
            <summary>
            Define how a PcsGraticuleStyle will render 
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.PcsGraticuleMode.Standard">
            <summary>
            Classic rectilinear graticule
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.Graticule.PcsGraticuleMode.WebMercatorScaleLines">
            <summary>
            Overrides Projected graticule behaviour ONLY for Web Mercator (SRID 3857), causing 
            the graticule to be rendered as the meridian scale distortion lines from equator
            to the poles. Can be used in conjunction or as an alternative to a ScaleBar. 
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.IMapDecoration">
            <summary>
            Interface for all map decorations
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.IMapDecoration.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Draw the map decoration.
            <para>Note that base class <see cref="T:SharpMap.Rendering.Decoration.MapDecoration"/> implementation resets <paramref name="g"/>.Transform
            prior to raising event OnRendering, and restore the <paramref name="g"/>.Transform prior to
            raising event OnRendered.</para>
            Likewise, <paramref name="g"/>.Clip is reset prior to rendering map decoration, and restored
            immediately after rendering.
            </summary>
            <param name="g">A graphics object to use for rendering</param>
            <param name="mvp">The viewport for rendering</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.IMapDecoration.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Draw the map decoration.
            <para>Note that base class <see cref="T:SharpMap.Rendering.Decoration.MapDecoration"/> implementation resets <paramref name="g"/>.Transform
            prior to raising event OnRendering, and restore the <paramref name="g"/>.Transform prior to
            raising event OnRendered.</para>
            Likewise, <paramref name="g"/>.Clip is reset prior to rendering map decoration, and restored
            immediately after rendering.
            </summary>
            <param name="g">A graphics object to use for rendering</param>
            <param name="map">The map</param>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.MapDecoration">
            <summary>
            Abstract base class for all map decorations.
            <para>
            Handles framing and positioning of the decoration
            </para>
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecoration._cachedSize">
            <summary>
            The size of this map decoration as computed/assigned previously
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecoration._boundingRectangle">
            <summary>
            The bounding rectangle around the map decoration
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.Enabled">
            <summary>
            Gets or sets enabled status
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.Anchor">
            <summary>
            The anchor of the map Decoration
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.Location">
            <summary>
            The point that defines the location
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.GetLocation(SharpMap.MapViewport)">
            <summary>
            Returns the left-top location of the Map decoration
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.Padding">
            <summary>
            Gets or sets the Padding of the map decoration
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.OpacityColor(System.Drawing.Color)">
            <summary>
            Function to compute an transparent color by combining <see cref="P:SharpMap.Rendering.Decoration.MapDecoration.Opacity"/> with <paramref name="color"/>.
            </summary>
            <param name="color">The base color</param>
            <returns>The (semi) transparent color</returns>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.BackgroundColor">
            <summary>
            Gets or sets the background color for the map decoration
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.Opacity">
            <summary>
            Gets or sets the opacity of map decoration
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.BorderMargin">
            <summary>
            The margin between decoration and border
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.BorderColor">
            <summary>
            Gets or sets the color of the border
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.BorderWidth">
            <summary>
            Gets or sets the width of the border
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.RoundedEdges">
            <summary>
            Gets or sets whether the border should be rendered with rounded edges
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.InternalSize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Function to compute the required size for rendering the map decoration object
            <para>This is just the size of the decoration object, border settings are excluded</para>
            </summary>
            <param name="g">The graphics object</param>
            <param name="mvp">The map's viewport</param>
            <returns>The size of the map decoration</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.InternalSize(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Function to compute the required size for rendering the map decoration object
            <para>This is just the size of the decoration object, border settings are excluded</para>
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
            <returns>The size of the map decoration</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.Render(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Draw the map decoration.
            <para>Note that this base class' implementation resets <paramref name="g"/>.Transform
            prior to raising event OnRendering, and restore the <paramref name="g"/>.Transform prior to
            raising event OnRendered.</para>
            Likewise, <paramref name="g"/>.Clip is reset prior to rendering map decoration, and restored
            immediately after rendering.
            </summary>
            <param name="g">A graphics object to use for rendering</param>
            <param name="mvp">The viewport for rendering</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Draw the map decoration.
            <para>Note that this base class' implementation resets <paramref name="g"/>.Transform
            prior to raising event OnRendering, and restore the <paramref name="g"/>.Transform prior to
            raising event OnRendered.</para>
            Likewise, <paramref name="g"/>.Clip is reset prior to rendering map decoration, and restored
            immediately after rendering.
            </summary>
            <param name="g">A graphics object to use for rendering</param>
            <param name="map">The viewport for rendering</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Render the actual map decoration.
            <para>Refer to MapDecoration.<see cref="M:SharpMap.Rendering.Decoration.MapDecoration.Render(System.Drawing.Graphics,SharpMap.MapViewport)"/> for underlying management of <paramref name="g"/>.Transform</para> 
            </summary>
            <param name="g">A graphics object</param>
            <param name="mvp">A map viewport</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.OnRender(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Render the actual map decoration.
            <para>Refer to MapDecoration.<see cref="M:SharpMap.Rendering.Decoration.MapDecoration.Render(System.Drawing.Graphics,SharpMap.MapViewport)"/> for underlying management of <paramref name="g"/>.Transform</para> 
            </summary>
            <param name="g">A graphics object</param>
            <param name="map">A map</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.OnRendering(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Signal commencing rendering
            <para>Refer to MapDecoration.<see cref="M:SharpMap.Rendering.Decoration.MapDecoration.Render(System.Drawing.Graphics,SharpMap.MapViewport)"/> for underlying management of <paramref name="g"/>.Transform</para> 
            </summary>
            <param name="g">A graphics object</param>
            <param name="mvp">A map viewport</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.OnRendering(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Signal commencing rendering
            <para>Refer to MapDecoration. <see cref="M:SharpMap.Rendering.Decoration.MapDecoration.Render(System.Drawing.Graphics,SharpMap.MapViewport)"/> for underlying management of <paramref name="g"/>.Transform</para> 
            </summary>
            <param name="g">A graphics object</param>
            <param name="map">A map viewport</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.OnRendered(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Signal completion of rendering
            <para>Refer to MapDecoration.<see cref="M:SharpMap.Rendering.Decoration.MapDecoration.Render(System.Drawing.Graphics,SharpMap.MapViewport)"/> for underlying management of <paramref name="g"/>.Transform</para> 
            </summary>
            <param name="g">A graphics object</param>
            <param name="mvp">A map viewport</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.OnRendered(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Signal completion of rendering
            <para>Refer to MapDecoration.<see cref="M:SharpMap.Rendering.Decoration.MapDecoration.Render(System.Drawing.Graphics,SharpMap.Map)"/> for underlying management of <paramref name="g"/>.Transform</para> 
            </summary>
            <param name="g">A graphics object</param>
            <param name="map">A map</param>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.MapDecorationAnchor">
            <summary>
            Anchor relative position
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.Default">
            <summary>
            Default anchor position, <see cref="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.RightBottom"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.LeftTop">
            <summary>
            Left top
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.LeftCenter">
            <summary>
            Left center
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.LeftBottom">
            <summary>
            Left bottom
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.RightTop">
            <summary>
            Right top
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.RightBottom">
            <summary>
            Right bottom
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.RightCenter">
            <summary>
            Right center
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.CenterTop">
            <summary>
            Center top
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.CenterBottom">
            <summary>
            Center bottom
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags">
            <summary>
            Anchor flag values
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.None">
            <summary>
            No anchor specified
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Left">
            <summary>
            Left anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Top">
            <summary>
            Top anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Right">
            <summary>
            Right anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Bottom">
            <summary>
            Bottom anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.VerticalCenter">
            <summary>
            Vertical center anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.HorizontalCenter">
            <summary>
            Horizontal center anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Horizontal">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.NorthArrow">
            <summary>
            North arrow map decoration
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.NorthArrow.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.NorthArrow.NorthArrowImage">
            <summary>
            Gets or sets the NorthArrowImage
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.NorthArrow.Size">
            <summary>
            Gets or sets the size of the North arrow Bitmap
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.NorthArrow.ForeColor">
            <summary>
            Gets or sets the fore color
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.NorthArrow.InternalSize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <inheritdoc cref="M:SharpMap.Rendering.Decoration.MapDecoration.InternalSize(System.Drawing.Graphics,SharpMap.MapViewport)"/>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.NorthArrow.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)">
            <inheritdoc cref="M:SharpMap.Rendering.Decoration.MapDecoration.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)"/>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar">
            <summary>
            Scale Bar map decoration.
            <para>Ensure that appropriate <see cref="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.MapUnit"/> is set</para>
            Also ensure Map.SRID is set appropriately to enable Web Mercator latitude adjustment.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.#ctor">
            <summary>
            Creates an instance of this class. Special handling applies when Map.SRID=3857 (WebMercator) 
            to adjust ScaleBar interval and text according to mid-latitude of current view. 
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.InternalSize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <inheritdoc cref="M:SharpMap.Rendering.Decoration.MapDecoration.InternalSize(System.Drawing.Graphics,SharpMap.MapViewport)"/>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)">
            <inheritdoc cref="M:SharpMap.Rendering.Decoration.MapDecoration.OnRender(System.Drawing.Graphics,SharpMap.MapViewport)"/>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderBar(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32)">
            <summary>
            Render the bar
            </summary>
            <param name="g">The graphics object</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="nOffsetX">The x-offset</param>
            <param name="nOffsetY">The y-offset</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderBarWithStyle(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Drawing.Color,SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle)">
            <summary>
            Render the bar with <paramref name="style"/> Style.
            </summary>
            <param name="g">The graphics object</param>
            <param name="nOffsetX">The x-offset</param>
            <param name="nOffsetY">The y-offset</param>
            <param name="nNumTics">The number of tics</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="nBarWidth">The width of the bar</param>
            <param name="crBar1">The first bar color</param>
            <param name="crBar2">The second bar color</param>
            <param name="bOutline">Value indicating whether the bar should be outlined</param>
            <param name="crOutline">The outline color</param>
            <param name="style">The <see cref="T:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle"/></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderTicLine(System.Drawing.Graphics,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Render just the tic line
            </summary>
            <param name="g">The graphics object</param>
            <param name="nNumTics">The number of tics</param>
            <param name="crBar1">The first bar color</param>
            <param name="crBar2">The second bar color</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="xOrigin">The x-origin</param>
            <param name="yOrigin">The y-origin</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderTicBarStandard(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Boolean,System.Drawing.Color)">
            <summary>
            Render the bar with <see name="ScaleBarStyle.Standard"/> Style.
            </summary>
            <param name="g">The graphics object</param>
            <param name="xOrigin">The x-offset</param>
            <param name="yOrigin">The y-offset</param>
            <param name="nNumTics">The number of tics</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="nBarWidth">The width of the bar</param>
            <param name="crBar1">The first bar color</param>
            <param name="crBar2">The second bar color</param>
            <param name="bOutline">Value indicating whether the bar should be outlined</param>
            <param name="crOutline">The outline color</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderTicBarMeridian(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Boolean,System.Drawing.Color)">
            <summary>
            Render the bar with <see cref="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle.Meridian"/> Style.
            </summary>
            <param name="g">The graphics object</param>
            <param name="xOrigin">The x-offset</param>
            <param name="yOrigin">The y-offset</param>
            <param name="nNumTics">The number of tics</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="nBarWidth">The width of the bar</param>
            <param name="crBar1">The first bar color</param>
            <param name="crBar2">The second bar color</param>
            <param name="bOutline">Value indicating whether the bar should be outlined</param>
            <param name="crOutline">The outline color</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderTicBarMeridian1(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Boolean,System.Drawing.Color)">
            <summary>
            Render the bar with <see cref="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle.Meridian1"/> Style.
            </summary>
            <param name="g">The graphics object</param>
            <param name="xOrigin">The x-offset</param>
            <param name="yOrigin">The y-offset</param>
            <param name="nNumTics">The number of tics</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="nBarWidth">The width of the bar</param>
            <param name="crBar1">The first bar color</param>
            <param name="crBar2">The second bar color</param>
            <param name="bOutline">Value indicating whether the bar should be outlined</param>
            <param name="crOutline">The outline color</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderVerbalScale(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Renders the verbal text above the scale bar.
            </summary>
            <param name="g">The graphics object</param>
            <param name="x">x-ordinate of the reference point for the text, the center of the bar</param>
            <param name="y">y-ordinate of the reference point for the text, the top or the bar</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderSegmentText(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.String)">
            <summary>
            Renders the segment text below the scale bar
            </summary>
            <param name="g">The graphics object</param>
            <param name="x">The x-ordinate of the reference point for the segment text, the beginning of the bar</param>
            <param name="y">The y-ordinate of the reference point for the segment text, the bottom of the bar</param>
            <param name="tics">The number of tics</param>
            <param name="ticWidth">The width of each tic in pixels</param>
            <param name="scaleBarUnitsPerTic">The scale bar units per tic</param>
            <param name="strUnit">The abbreviated unit text</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderTextWithFormat(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringFormat,System.Int32@)">
            <summary>
            Renders the text
            </summary>
            <param name="g">The graphics object</param>
            <param name="text">The text to render</param>
            <param name="x">The x-ordinate of the reference point</param>
            <param name="y">The y-ordinate of the reference point</param>
            <param name="format">The string format, mainly vertical an horizontal alignment are of interest.</param>
            <param name="lastX">The last horizontal position, to ensure that texts are not overlapping</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.CalcScale(System.Int32)">
            <summary>
            Calculate the scale and store it in <see cref="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar._scale"/>.
            <para>
            It should be called to calculate the real map scale everytime the user change mapunit or set the scale
            </para>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.ForeColor">
            <summary>
            Gets or sets the foreground color, used to render the labeling
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.Font">
            <summary>
            Gets or sets the font to label the bar
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarColor1">
            <summary>
            Gets or sets the first bar color
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarColor2">
            <summary>
            Gets or sets the second bar color
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarWidth">
            <summary>
            Gets or sets the bar width
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar._barUnitFactor">
            <summary>
            Factors derived internally from BarUnit(s)
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.MapUnit">
            <summary>
            World coordinate system unit. You must set this appropriately as it is NOT deduced from Map.SRID.
            <para>Typically meters (1) for projected coordinate systems, or degrees (7) for geographic coordinate systems.</para>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarUnit">
            <summary>
            Bar unit
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarUnitLargeScale">
            <summary>
            Bar Unit for use at large scales (small area) such as ft, m, or yd.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarUnitSmallScale">
            <summary>
            Bar Unit for use at small scales (large area) such as km, mile, NM, Deg.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarOutline">
            <summary>
            Bar outline
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarOutlineColor">
            <summary>
            Bar outline color
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.Scale">
            <summary>
            Scale
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.SetCustomUnit(System.Double,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="factor"></param>
            <param name="name"></param>
            <param name="shortName"></param>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.NumTicks">
            <summary>
            Gets or sets the number of ticks
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.ScaleText">
            <summary>
            Gets or sets the labeling for the bar
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.Width">
            <summary>
            Gets or sets the width of the scale bar
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarStyle">
            <summary>
            Gets or sets the bar style
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.MarginLeft">
            <summary>
            Gets or sets the minimum margin on the left of the bar
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.MarginRight">
            <summary>
            Gets or sets the minimum margin on the right of the bar
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.OnViewChanged">
            <summary>
            Signal that properties have changed
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.Dirty">
            <summary>
            Gets or (private) sets whether the display settings for the scale bar have been changed
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.FormatRealScale(System.Double)">
            <summary>
             Keep only 5 (ScalePrecisionDigits) digits of precision for the scale and return the scale after formatted.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.PrecisionOfSegmentText(System.Double)">
            <summary>
             Return the precision for the segment text of the scale bar.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarLabelText">
            <summary>
            Scale bar label text
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarLabelText.NoText">
            <summary>
            No text
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarLabelText.JustUnits">
            <summary>
            Just units
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarLabelText.RepresentativeFraction">
            <summary>
            Representative fraction
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle">
            <summary>
            Scale bar style
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle.Standard">
            <summary>
            Standard scale bar style
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle.Meridian">
            <summary>
            Meridian scale bar style
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle.Meridian1">
            <summary>
            Modified
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.ScaleBar.Unit">
            <summary>
            Pre defined Units
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.Unit.Custom">
            <summary>
            Custom
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.Unit.Meter">
            <summary>
            Meter
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.Unit.Foot_US">
            <summary>
            North american foot
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.Unit.Yard_Sears">
            <summary>
            Yard
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.Unit.Yard_Indian">
            <summary>
            Indian yard
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.Unit.Mile_US">
            <summary>
            North american mile
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.Unit.Kilometer">
            <summary>
            Kilometer
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.Unit.Degree">
            <summary>
            Degree
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.Unit.Nautical_Mile">
            <summary>
            Nautical Mile
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.LabelBox">
            <summary>
            Defines an axis-aligned box around a label, used for collision detection
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new LabelBox instance
            </summary>
            <param name="left">Left side of box</param>
            <param name="top">Top of box</param>
            <param name="width">Width of the box</param>
            <param name="height">Height of the box</param>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new LabelBox instance based on a rectangle
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Left">
            <summary>
            The Left tie-point for the Label
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Top">
            <summary>
            The Top tie-point for the label
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Width">
            <summary>
            Width of the box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Height">
            <summary>
            Height of the box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Right">
            <summary>
            Right side of the box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Bottom">
            <summary>
            Bottom of the box
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.CompareTo(SharpMap.Rendering.LabelBox)">
            <summary>
            Returns 0 if the boxes intersects each other
            </summary>
            <param name="other">labelbox to perform intersectiontest with</param>
            <returns>0 if the intersect</returns>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.Intersects(SharpMap.Rendering.LabelBox)">
            <summary>
            Determines whether the boundingbox intersects another boundingbox
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Rendering.BaseLabel">
            <summary>
            Class for storing a label instance
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.TextOnPathLabel">
            <summary>
            Render text on path
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.BaseLabel.#ctor(System.String,System.Single,System.Int32,SharpMap.Rendering.LabelBox,SharpMap.Styles.LabelStyle)">
            <summary>
            Initializes a new Label instance
            </summary>
            <param name="text">Text to write</param>
            <param name="rotation">Rotation</param>
            <param name="priority">Label priority used for collision detection</param>
            <param name="collisionbox">Box around label for collision detection</param>
            <param name="style">The style of the label</param>
        </member>
        <member name="M:SharpMap.Rendering.BaseLabel.#ctor(System.String,System.Single,System.Int32,SharpMap.Styles.LabelStyle)">
            <summary>
            Initializes a new Label instance
            </summary>
            <param name="text"></param>
            <param name="rotation"></param>
            <param name="priority"></param>
            <param name="style"></param>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Show">
            <summary>
            Show this label or don't
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Text">
            <summary>
            The text of the label
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Font">
            <summary>
            Label font
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Rotation">
            <summary>
            Label rotation
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Priority">
            <summary>
            Value indicating rendering priority
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Box">
            <summary>
            Label box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Style">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.LabelStyle"/> of this label
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.BaseLabel.CompareTo(SharpMap.Rendering.BaseLabel)">
            <summary>
            Tests if two label boxes intersects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.BaseLabel.Compare(SharpMap.Rendering.BaseLabel,SharpMap.Rendering.BaseLabel)">
            <summary>
            Checks if two labels intersect
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Rendering.BaseLabel`1">
            <summary>
            Type specific base label class
            </summary>
            <typeparam name="T">The type of the location</typeparam>
        </member>
        <member name="M:SharpMap.Rendering.BaseLabel`1.#ctor(System.String,`0,System.Single,System.Int32,SharpMap.Rendering.LabelBox,SharpMap.Styles.LabelStyle)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="text">The label text</param>
            <param name="location">The position of label</param>
            <param name="rotation">The rotation of the label (in degrees)</param>
            <param name="priority">A priority value. Labels with lower priority are less likely to be rendered</param>
            <param name="collisionbox">A bounding box for collision detection</param>
            <param name="style">The label style to apply upon rendering</param>
        </member>
        <member name="M:SharpMap.Rendering.BaseLabel`1.#ctor(System.String,`0,System.Single,System.Int32,SharpMap.Styles.LabelStyle)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="text">The label text</param>
            <param name="location">The position of label</param>
            <param name="rotation">The rotation of the label (in degrees)</param>
            <param name="priority">A priority value. Labels with lower priority are less likely to be rendered</param>
            <param name="style">The label style to apply upon rendering</param>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel`1.Location">
            <summary>
            Gets or sets the location of the label
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.PathLabel">
            <summary>
            A label that is to be rendered on a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.PathLabel.#ctor(System.String,System.Drawing.Drawing2D.GraphicsPath,System.Single,System.Int32,SharpMap.Rendering.LabelBox,SharpMap.Styles.LabelStyle)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="text">The label text</param>
            <param name="location">The position of label</param>
            <param name="rotation">The rotation of the label (in degrees)</param>
            <param name="priority">A priority value. Labels with lower priority are less likely to be rendered</param>
            <param name="collisionbox">A bounding box used for collision detection</param>
            <param name="style">The label style to apply upon rendering</param>
        </member>
        <member name="P:SharpMap.Rendering.PathLabel.AffectedArea">
            <summary>
            Bounding polygon in world coordinates 
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.PathLabel.CompareTo(SharpMap.Rendering.BaseLabel)">
            <inheritdoc cref="M:SharpMap.Rendering.BaseLabel.CompareTo(SharpMap.Rendering.BaseLabel)"/>
        </member>
        <member name="T:SharpMap.Rendering.Label">
            <summary>
            A label that is to be rendered at or around a <see cref="T:System.Drawing.PointF"/>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Label.#ctor(System.String,System.Drawing.PointF,System.Single,System.Int32,SharpMap.Rendering.LabelBox,SharpMap.Styles.LabelStyle)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="text">The label text</param>
            <param name="location">The position of label</param>
            <param name="rotation">The rotation of the label (in degrees)</param>
            <param name="priority">A priority value. Labels with lower priority are less likely to be rendered</param>
            <param name="collisionbox">A bounding box used for collision detection</param>
            <param name="style">The label style to apply upon rendering</param>
        </member>
        <member name="M:SharpMap.Rendering.Label.#ctor(System.String,System.Drawing.PointF,System.Single,System.Int32,SharpMap.Styles.LabelStyle)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="text">The label text</param>
            <param name="location">The position of label</param>
            <param name="rotation">The rotation of the label (in degrees)</param>
            <param name="priority">A priority value. Labels with lower priority are less likely to be rendered</param>
            <param name="style">The label style to apply upon rendering</param>
        </member>
        <member name="P:SharpMap.Rendering.Label.LabelPoint">
            <summary>
            Label position
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.LabelCollisionDetection">
            <summary>
            Class defining delegate for label collision detection and static predefined methods
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.LabelCollisionDetection.LabelFilterMethod">
            <summary>
            Delegate method for filtering labels. Useful for performing custom collision detection on labels
            </summary>
            <param name="labels"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.LabelCollisionDetection.SimpleCollisionDetection(System.Collections.Generic.List{SharpMap.Rendering.BaseLabel})">
            <summary>
            Simple and fast label collision detection.
            </summary>
            <param name="labels"></param>
        </member>
        <member name="M:SharpMap.Rendering.LabelCollisionDetection.ThoroughCollisionDetection(System.Collections.Generic.List{SharpMap.Rendering.BaseLabel})">
            <summary>
            Thorough label collision detection.
            </summary>
            <param name="labels"></param>
        </member>
        <member name="M:SharpMap.Rendering.LabelCollisionDetection.QuickAccurateCollisionDetectionMethod(System.Collections.Generic.List{SharpMap.Rendering.BaseLabel})">
            <summary>
            Quick (O(n log n)) and accurate collision detection
            </summary>
            <param name="labels"></param>
        </member>
        <member name="T:SharpMap.Rendering.LayerCollectionRenderer">
            <summary>
            A layer collection renderer
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.LayerCollectionRenderer.#ctor(System.Collections.Generic.ICollection{SharpMap.Layers.ILayer})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layers">The layer collection to render</param>
        </member>
        <member name="M:SharpMap.Rendering.LayerCollectionRenderer.Render(System.Drawing.Graphics,SharpMap.Map,System.Boolean)">
            <summary>
            Method to render the layer collection
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
            <param name="allowParallel"></param>
        </member>
        <member name="M:SharpMap.Rendering.LayerCollectionRenderer.Render(System.Drawing.Graphics,SharpMap.MapViewport,System.Boolean)">
            <summary>
            Method to render the layer collection
            </summary>
            <param name="g">The graphics object</param>
            <param name="mapViewPort">Rendering parameters snapshot of current map</param>
            <param name="allowParallel"></param>
        </member>
        <member name="P:SharpMap.Rendering.LayerCollectionRenderer.ParallelHeuristic">
            <summary>
            Method to determine the synchronization method
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LayerCollectionRenderer.AllowParallel">
            <summary>
            Method to enable parallel rendering of layers
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.LayerCollectionRenderer.StdHeuristic(System.Drawing.Size,System.Single,System.Int32)">
            <summary>
            Standard implementation for <see cref="P:SharpMap.Rendering.LayerCollectionRenderer.ParallelHeuristic"/>
            </summary>
            <param name="size">The size of the map</param>
            <param name="dpi">The dots per inch</param>
            <param name="numLayers">The number of layers</param>
            <returns><c>true</c> if the map's width and height are less or equal 1920 and the collection has less than 10 entries</returns>
        </member>
        <member name="M:SharpMap.Rendering.LayerCollectionRenderer.RenderLayer(SharpMap.Layers.ILayer,System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Invokes the rendering of the layer, a red X is drawn if it fails.
            </summary>
            <param name="layer">The layer to render</param>
            <param name="g">The graphics object to use</param>
            <param name="mapViewport">The viewport</param>
        </member>
        <member name="M:SharpMap.Rendering.LayerCollectionRenderer.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:SharpMap.Rendering.Exceptions.RenderException">
            <summary>
            Exception thrown when a layer rendering fails
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Exceptions.RenderException.#ctor">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Exceptions.RenderException.#ctor(System.String)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SharpMap.Rendering.Exceptions.RenderException.#ctor(System.String,System.Exception)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.BaseSymbolizer">
            <summary>
            Abstract base symbolizer class. 
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BaseSymbolizer.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
            <remarks>
            Sets <see cref="P:SharpMap.Rendering.Symbolizer.BaseSymbolizer.SmoothingMode"/> to <see cref="F:System.Drawing.Drawing2D.SmoothingMode.AntiAlias"/> and 
            <see cref="P:SharpMap.Rendering.Symbolizer.BaseSymbolizer.PixelOffsetMode"/> to <see cref="F:System.Drawing.Drawing2D.PixelOffsetMode.Default"/>.
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.BaseSymbolizer.SmoothingMode">
            <summary>
            Gets or sets a value indicating which <see cref="P:SharpMap.Rendering.Symbolizer.BaseSymbolizer.SmoothingMode"/> is to be used for rendering
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.BaseSymbolizer.PixelOffsetMode">
            <summary>
            Gets or sets a value indicating which <see cref="P:SharpMap.Rendering.Symbolizer.BaseSymbolizer.PixelOffsetMode"/> is to be used for rendering
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BaseSymbolizer.Clone">
            <summary>
            Creates a deep copy of this <see cref="T:SharpMap.Rendering.Symbolizer.ISymbolizer"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BaseSymbolizer.Begin(System.Drawing.Graphics,SharpMap.MapViewport,System.Int32)">
            <summary>
            Method to perform preparatory work for symbilizing.
            </summary>
            <param name="g">The graphics object to symbolize upon</param>
            <param name="map">The map</param>
            <param name="aproximateNumberOfGeometries">An approximate number of geometries to symbolize</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BaseSymbolizer.Symbolize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to perform symbolization
            </summary>
            <param name="g">The graphics object to symbolize upon</param>
            <param name="map">The map</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BaseSymbolizer.End(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to restore the state of the graphics object and do cleanup work.
            </summary>
            <param name="g">The graphics object to symbolize upon</param>
            <param name="map">The map</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.BasicLineSymbolizer">
            <summary>
            A very basic line symbolizer class without any fuzzy things. It simply draws the
            linestring.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BasicLineSymbolizer.Clone">
            <summary>
            Creates a clone of this symbolizer
            </summary>
            <returns>A symbolizer exactly like this one</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BasicLineSymbolizer.OnRenderInternal(SharpMap.MapViewport,GeoAPI.Geometries.ILineString,System.Drawing.Graphics)">
            <summary>
            Method that does the actual rendering of individual features.
            </summary>
            <param name="map">The map</param>
            <param name="lineString">The linestring</param>
            <param name="graphics">The graphics object</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.BasicLineSymbolizerWithOffset">
            <summary>
            A very basic line symbolizer class without any fuzzy things. It simply draws the
            linestring.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BasicLineSymbolizerWithOffset.Clone">
            <summary>
            Creates a clone of this symbolizer
            </summary>
            <returns>A symbolizer exactly like this one</returns>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.BasicLineSymbolizerWithOffset.Offset">
            <summary>
            Gets or sets the affset to the right (as defined by its coordinate sequence) of the lines
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BasicLineSymbolizerWithOffset.OnRenderInternal(SharpMap.MapViewport,GeoAPI.Geometries.ILineString,System.Drawing.Graphics)">
            <summary>
            Method that does the actual rendering of individual features.
            </summary>
            <param name="map">The map</param>
            <param name="lineString">The linestring</param>
            <param name="graphics">The graphics object</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.BasicPolygonSymbolizer">
            <summary>
            Basic polygon symbolizer
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BasicPolygonSymbolizer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BasicPolygonSymbolizer.ReleaseManagedResources">
            <summary>
            Method to release all managed resources
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.BasicPolygonSymbolizer.Outline">
            <summary>
            Gets or sets the pen to render the outline of the polygon
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BasicPolygonSymbolizer.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BasicPolygonSymbolizer.OnRenderInternal(SharpMap.MapViewport,GeoAPI.Geometries.IPolygon,System.Drawing.Graphics)">
            <summary>
            Method that does the actual rendering of geometries
            </summary>
            <param name="map">The map</param>
            <param name="polygon">The feature</param>
            <param name="g">The graphics object</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer">
            <summary>
            Polygon symbolizer class that uses <see cref="T:SharpMap.Rendering.Symbolizer.LineSymbolizer"/> to symbolize the outline
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer.ReleaseManagedResources">
            <summary>
            Method that releases all managed resources
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer.Outline">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Symbolizer.LineSymbolizer"/> to draw the outline of the polygon
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer.OnRenderInternal(SharpMap.MapViewport,GeoAPI.Geometries.IPolygon,System.Drawing.Graphics)">
            <summary>
            Method to perform actual rendering 
            </summary>
            <param name="map">The map</param>
            <param name="polygon">The polygon to render</param>
            <param name="g">The graphics object to use</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer.Begin(System.Drawing.Graphics,SharpMap.MapViewport,System.Int32)">
            <summary>
            Method to perform preparatory work for symbilizing.
            </summary>
            <param name="g">The graphics object to symbolize upon</param>
            <param name="map">The map</param>
            <param name="aproximateNumberOfGeometries">An approximate number of geometries to symbolize</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer.Symbolize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to perform symbolization
            </summary>
            <param name="g">The graphics object to symbolize upon</param>
            <param name="map">The map</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer.End(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to restore the state of the graphics object and do cleanup work.
            </summary>
            <param name="g">The graphics object to symbolize upon</param>
            <param name="map">The map</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.ILineSymbolizeHandler">
            <summary>
            Interface for all classes providing Line symbolization handling routine
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ILineSymbolizeHandler.SymbolizePaths(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{System.Drawing.Drawing2D.GraphicsPath})">
            <summary>
            Function to symbolize the graphics path to the graphics object
            </summary>
            <param name="g">The graphics object</param>
            <param name="paths">The Paths</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PlainLineSymbolizeHandler">
            <summary>
            Line symbolize helper class that plainly draws a line.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PlainLineSymbolizeHandler.Line">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> to use
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PlainLineSymbolizeHandler.SymbolizePaths(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{System.Drawing.Drawing2D.GraphicsPath})">
            <summary>
            Function to symbolize the graphics path to the graphics object
            </summary>
            <param name="g">The graphics object</param>
            <param name="path">The Path</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PlainLineSymbolizeHandler.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander">
            <summary>
            Class that symbolizes a path by warping a <see cref="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.Pattern"/> to the provided graphics path.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.Line">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> to draw the graphics path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> to fill the graphics path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.Pattern">
            <summary>
            The pattern to warp.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.Interval">
            <summary>
            Gets or sets the interval with witch to repeat the pattern
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.SymbolizePaths(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{System.Drawing.Drawing2D.GraphicsPath})">
            <summary>
            Function to symbolize the graphics path to the graphics object
            </summary>
            <param name="g">The graphics object</param>
            <param name="paths">The paths</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer">
            <summary>
            A Line symbolizer that creates <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>objects in the <see cref="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.OnRenderInternal(SharpMap.MapViewport,GeoAPI.Geometries.ILineString,System.Drawing.Graphics)"/> function.
            These graphic paths are symbolized in subsequent symbolize calls.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.Paths">
            <summary>
            The cached path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.LineSymbolizeHandlers">
            <summary>
            The line symbolizers to apply to the <see cref="P:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.Paths"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.OnRenderInternal(SharpMap.MapViewport,GeoAPI.Geometries.ILineString,System.Drawing.Graphics)">
            <summary>
            Function that actually renders the linestring
            </summary>
            <param name="map"></param>
            <param name="lineString"></param>
            <param name="graphics"></param>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.ImmediateMode">
            <summary>
            Do not cache the geometries paths
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.Begin(System.Drawing.Graphics,SharpMap.MapViewport,System.Int32)">
            <summary>
            Method to indicate that the symbolizer has to be prepared.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.Symbolize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to indicate that the symbolizer should do its symbolizer work.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.End(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to indicate that the symbolizers work is done and it can clean up.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer">
            <summary>
            Text Point Style
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.#ctor">
            <summary>
            Initializes a new TextPointStyle
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Clone">
            <summary>
            Creates a clone of this object
            </summary>
            <returns>A <see cref="T:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer"/> that matches this instance</returns>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Font">
            <summary>
            Gets or sets the font to symbolize
            </summary>
            <remarks>The default value is <c>Wingdings</c></remarks>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Foreground">
            <summary>
            Gets or sets the brush to symbolize
            </summary>
            <remarks>
            The default value is <c>Brushes.Firebrick</c>
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Halo">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.HaloBrush">
            <summary>
            Gets or sets the brush to render the halo
            </summary>
            <remarks>
            The default value is <c>Brushes.Transparent</c>
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.CharacterIndex">
            <summary>
            The index of the character, -1 if the <see cref="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Text"/> is longer than 1 character.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Text">
            <summary>
            The text for the symbol
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.StringFormat">
            <summary>
            The format for symbolization
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Size">
            <summary>
            Gets or sets the size of the generated symbol<br/>Always return <see cref="F:System.Drawing.Size.Empty"/> as the size is determined by the <see cref="P:System.Drawing.Font.Size"/>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Scale">
            <summary>
            Gets or sets the scale factor for this symbol<br/>Always returns <c>1f</c>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.OnRenderInternal(System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Method that performs the symbolization of th feature
            </summary>
            <param name="pt">The point</param>
            <param name="g">The graphics object</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.CohenSutherlandLineClipping">
            <summary>
            SharpMap's Cohen-Sutherland line clipping algorithm
            </summary>
            <remarks>Inspired by <see href="http://en.wikipedia.org/wiki/Line_clipping"/></remarks>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CohenSutherlandLineClipping.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="xmin">The minimum x-ordinate value</param>
            <param name="ymin">The minimum y-ordinate value</param>
            <param name="xmax">The maximum x-ordinate value</param>
            <param name="ymax">The maximum y-ordinate value</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CohenSutherlandLineClipping.ClipLineString(GeoAPI.Geometries.ILineString)">
            <summary>
            Clips a <see cref="T:GeoAPI.Geometries.ILineString"/> to the bounding box defined by <see cref="M:SharpMap.Rendering.Symbolizer.CohenSutherlandLineClipping.#ctor(System.Double,System.Double,System.Double,System.Double)"/>.
            </summary>
            <param name="lineString">The line string to clip</param>
            <returns>A (possibly multi) line string</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CohenSutherlandLineClipping.ClipLineString(GeoAPI.Geometries.IMultiLineString)">
            <summary>
            Clips a <see cref="T:GeoAPI.Geometries.IMultiLineString"/> to the bounding box defined by <see cref="M:SharpMap.Rendering.Symbolizer.CohenSutherlandLineClipping.#ctor(System.Double,System.Double,System.Double,System.Double)"/>.
            </summary>
            <param name="lineStrings">The multi-line string to clip</param>
            <returns>A (possibly multi) line string</returns>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.GeometrySymbolizer">
            <summary>
            Multi geometry symbolizer class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.Clone">
            <inheritdoc/>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.PointSymbolizer">
            <summary>
            Gets or sets the point symbolizer
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.LineSymbolizer">
            <summary>
            Gets or sets the line symbolizer
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.PolygonSymbolizer">
            <summary>
            Gets or sets the polygon symbolizer
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.Render(SharpMap.MapViewport,GeoAPI.Geometries.IGeometry,System.Drawing.Graphics)">
            <summary>
            Function to render the geometry
            </summary>
            <param name="map">The map object, mainly needed for transformation purposes.</param>
            <param name="geometry">The geometry to symbolize.</param>
            <param name="graphics">The graphics object to use.</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.Begin(System.Drawing.Graphics,SharpMap.MapViewport,System.Int32)">
            <summary>
            Method to indicate that the symbolizer has to be prepared.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
            <param name="aproximateNumberOfGeometries">The approximate number of geometries</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.Symbolize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to indicate that the symbolizer should do its symbolizer work.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.End(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to indicate that the symbolizers work is done and it can clean up.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.SmoothingMode">
            <summary>
            Gets or sets a value indicating which <see cref="P:SharpMap.Rendering.Symbolizer.ISymbolizer.SmoothingMode"/> is to be used for rendering
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.PixelOffsetMode">
            <summary>
            Gets or sets a value indicating which <see cref="P:SharpMap.Rendering.Symbolizer.ISymbolizer.PixelOffsetMode"/> is to be used for rendering
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.ILineSymbolizer">
            <summary>
            Interface for all classes that render lines
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.IPointSymbolizer">
            <summary>
            Interface for all classes that can symbolize Points
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Offset">
            <summary>
            Offset of the point from the point
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Rotation">
            <summary>
            Rotation of the symbol
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Size">
            <summary>
            Gets or sets the Size of the symbol
            <para>
            Implementations may ignore the setter, the getter must return a <see cref="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Size"/> with positive width and height values.
            </para>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Scale">
            <summary>
            Gets or sets the scale 
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.IPointSymbolizerEx">
            <summary>
            An extended interface for <see cref="T:SharpMap.Rendering.Symbolizer.IPointSymbolizer"/>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.IPointSymbolizerEx.CanvasArea">
            <summary>
            Gets a value indicating the rectangle enclosing the extent of this symbol 
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.IPolygonSymbolizer">
            <summary>
            Interface for classes that can symbolize polygons
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.ISymbolizer">
            <summary>
            Basic interface for all symbolizers
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ISymbolizer.SmoothingMode">
            <summary>
            Gets or sets a value indicating which <see cref="P:SharpMap.Rendering.Symbolizer.ISymbolizer.SmoothingMode"/> is to be used for rendering
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ISymbolizer.PixelOffsetMode">
            <summary>
            Gets or sets a value indicating which <see cref="P:SharpMap.Rendering.Symbolizer.ISymbolizer.PixelOffsetMode"/> is to be used for rendering
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ISymbolizer.Begin(System.Drawing.Graphics,SharpMap.MapViewport,System.Int32)">
            <summary>
            Method to indicate that the symbolizer has to be prepared.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
            <param name="aproximateNumberOfGeometries">The approximate number of geometries</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ISymbolizer.Symbolize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to indicate that the symbolizer should do its symbolizer work.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ISymbolizer.End(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to indicate that the symbolizers work is done and it can clean up.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.ISymbolizer`1">
            <summary>
            Generic interface for symbolizers that render symbolize specific geometries
            </summary>
            <typeparam name="TGeometry">The allowed type of geometries to symbolize</typeparam>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ISymbolizer`1.Render(SharpMap.MapViewport,`0,System.Drawing.Graphics)">
            <summary>
            Function to render the geometry
            </summary>
            <param name="map">The map object, mainly needed for transformation purposes.</param>
            <param name="geometry">The geometry to symbolize.</param>
            <param name="graphics">The graphics object to use.</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.LineSymbolizer">
            <summary>
            Abstract base class for all line symbolizer classes
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.LineSymbolizer.#ctor">
            <summary>
            Creates an instance of this class. <see cref="P:SharpMap.Rendering.Symbolizer.LineSymbolizer.Line"/> is set to a random
            <see cref="T:SharpMap.Drawing.KnownColor"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.LineSymbolizer.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.LineSymbolizer.Render(SharpMap.MapViewport,GeoAPI.Geometries.ILineal,System.Drawing.Graphics)">
            <summary>
            Method to render a LineString to the <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="map">The map object</param>
            <param name="lineal">Linestring to symbolize</param>
            <param name="g">The graphics object to use.</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.LineSymbolizer.OnRenderInternal(SharpMap.MapViewport,GeoAPI.Geometries.ILineString,System.Drawing.Graphics)">
            <summary>
            Function that actually renders the linestring
            </summary>
            <param name="map">The map</param>
            <param name="lineString">The line string to symbolize.</param>
            <param name="graphics">The graphics</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.LineSymbolizer.LineStringToPath(GeoAPI.Geometries.ILineString,SharpMap.MapViewport)">
            <summary>
            Function to transform a linestring to a graphics path for further processing
            </summary>
            <param name="lineString">The Linestring</param>
            <param name="map">The map</param>
            <!--<param name="useClipping">A value indicating whether clipping should be applied or not</param>-->
            <returns>A GraphicsPath</returns>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.LineSymbolizer.Line">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> to render the LineString
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.LineSymbolizer.Symbolize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to perform symbolization
            </summary>
            <param name="g">The graphics object to symbolize upon</param>
            <param name="map">The map</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.ListPointSymbolizer">
            <summary>
            ListPointSymbolizer class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.CanvasArea">
            <summary>
            Gets a value indicating the area of the map covered during the last rendering cycle.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.InsertItem(System.Int32,SharpMap.Rendering.Symbolizer.PointSymbolizer)">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.SetItem(System.Int32,SharpMap.Rendering.Symbolizer.PointSymbolizer)">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Render(SharpMap.MapViewport,GeoAPI.Geometries.IPuntal,System.Drawing.Graphics)">
            <summary>
            Method to render the Point to the <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="map">The map object</param>
            <param name="points">Location where to render the Symbol</param>
            <param name="g">The graphics object to use.</param>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Offset">
            <summary>
            Offset of the point from the point
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Rotation">
            <summary>
            Rotation of the symbol
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Size">
            <summary>
            Gets or sets the Size of the symbol
            <para>
            Implementations may ignore the setter, the getter must return a <see cref="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Size"/> with positive width and height values.
            </para>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Scale">
            <summary>
            Gets or sets the scale 
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.SmoothingMode">
            <summary>
            Gets or sets a value indicating which <see cref="P:SharpMap.Rendering.Symbolizer.ISymbolizer.SmoothingMode"/> is to be used for rendering
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.PixelOffsetMode">
            <summary>
            Gets or sets a value indicating which <see cref="P:SharpMap.Rendering.Symbolizer.ISymbolizer.PixelOffsetMode"/> is to be used for rendering
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Begin(System.Drawing.Graphics,SharpMap.MapViewport,System.Int32)">
            <summary>
            Method to indicate that the symbolizer has to be prepared.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
            <param name="aproximateNumberOfGeometries">The approximate number of geometries</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Symbolize(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to indicate that the symbolizer should do its symbolizer work.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.End(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to indicate that the symbolizers work is done and it can clean up.
            </summary>
            <param name="g">The graphics object</param>
            <param name="map">The map</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.IsDisposed">
            <summary>
            Gets whether this object was already disposed
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer">
            <summary>
             Symbolizer class that renders custom symbols made up of custom paths
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.CreateCircle(System.Drawing.Pen,System.Drawing.Brush,System.Single)">
            <summary>
             Creates a <see cref="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer"/> that renders circles.
            </summary>
            <param name="line">The pen to outline the circle</param>
            <param name="fill">the brush to fill the circle</param>
            <param name="size">The size of the circle</param>
            <returns>The PathPointSymbolizer object</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.CreateEllipse(System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single)">
            <summary>
             Creates a <see cref="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer"/> that renders ellipses.
            </summary>
            <param name="line">The pen to outline the ellipse</param>
            <param name="fill">the brush to fill the ellipse</param>
            <param name="a">The x-axis radius of the ellipse</param>
            <param name="b">The x-axis radius of the ellipse</param>
            <returns>The PathPointSymbolizer object</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.CreateRectangle(System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single)">
            <summary>
             Creates a <see cref="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer"/> that renders rectangles.
            </summary>
            <param name="line">The pen to outline the rectangle</param>
            <param name="fill">the brush to fill the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
            <returns>The PathPointSymbolizer object</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.CreateSquare(System.Drawing.Pen,System.Drawing.Brush,System.Single)">
            <summary>
             Creates a <see cref="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer"/> that renders squares.
            </summary>
            <param name="line">The pen to outline the square</param>
            <param name="fill">the brush to fill the square</param>
            <param name="size">The size of the square</param>
            <returns>The PathPointSymbolizer object</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.CreateTriangle(System.Drawing.Pen,System.Drawing.Brush,System.Single)">
            <summary>
             Creates a <see cref="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer"/> that renders bottom-down-triangless.
            </summary>
            <param name="line">The pen to outline the triangle</param>
            <param name="fill">the brush to fill the triangle</param>
            <param name="size">The size of the triangle</param>
            <returns>The PathPointSymbolizer object</returns>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition">
            <summary>
            Path definition class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition.Line">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> to draw the path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> to fill the path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition.Path">
            <summary>
            The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to be drawn and/or filled
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition.Dispose">
            <summary>
            Method to perform cleanup methods for unmanaged resources
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.#ctor(SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition[])">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="paths"></param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.Clone">
            <inheritdoc/>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.Size">
            <summary>
            Gets or sets the Size of the symbol
            <para>
            Implementations may ignore the setter, the getter must return a <see cref="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Size"/> with positive width and height values.
            </para>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.OnRenderInternal(System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Function that does the actual rendering
            </summary>
            <param name="pt">The point</param>
            <param name="g">The graphics object</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PointSymbolizer">
            <summary>
            Base class for all possible Point symbolizers
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.CanvasArea">
            <summary>
            The calculated rectangle enclosing the extent of this symbol
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Offset">
            <summary>
            Offset of the point from the point
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Rotation">
            <summary>
            Rotation of the symbol
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Size">
            <summary>
            Gets or sets the Size of the symbol
            <para>
            Implementations may ignore the setter, the getter must return a <see cref="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Size"/> with positive width and height values.
            </para>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Scale">
            <summary>
            Gets or sets the scale 
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PointSymbolizer.RenderPoint(SharpMap.MapViewport,GeoAPI.Geometries.Coordinate,System.Drawing.Graphics)">
            <summary>
            Function to render the symbol
            </summary>
            <param name="map">The map</param>
            <param name="point">The point to symbolize</param>
            <param name="g">The graphics object</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PointSymbolizer.OnRenderInternal(System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Function that does the actual rendering
            </summary>
            <param name="pt">The point</param>
            <param name="g">The graphics object</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PointSymbolizer.ToRasterPointSymbolizer">
            <summary>
            Utility function to transform any <see cref="T:SharpMap.Rendering.Symbolizer.IPointSymbolizer"/> into an unscaled <see cref="T:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer"/>. This may bring performance benefits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PointSymbolizer.Render(SharpMap.MapViewport,GeoAPI.Geometries.IPuntal,System.Drawing.Graphics)">
            <summary>
            Function to render the geometry
            </summary>
            <param name="map">The map object, mainly needed for transformation purposes.</param>
            <param name="geometry">The geometry to symbolize.</param>
            <param name="graphics">The graphics object to use.</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PolygonSymbolizer">
            <summary>
            Base class for all geometry symbolizers
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.#ctor">
            <summary>
            Creates an instance of his class. <see cref="P:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.Fill"/> is set to a <see cref="T:System.Drawing.SolidBrush"/> with a random <see cref="T:SharpMap.Drawing.KnownColor"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.Fill">
            <summary>
            Gets or sets the brush to fill the polygon
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.RenderOrigin">
            <summary>
            The render origin for brushes (Texture, Gradient, ...)
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.UseClipping">
            <summary>
            Gets or sets if polygons should be clipped or not.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.Render(SharpMap.MapViewport,GeoAPI.Geometries.IPolygonal,System.Drawing.Graphics)">
            <summary>
            Function to render the geometry
            </summary>
            <param name="map">The map object, mainly needed for transformation purposes.</param>
            <param name="geometry">The geometry to symbolize.</param>
            <param name="graphics">The graphics object to use.</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.OnRenderInternal(SharpMap.MapViewport,GeoAPI.Geometries.IPolygon,System.Drawing.Graphics)">
            <summary>
            Method to perform actual rendering 
            </summary>
            <param name="map">The map</param>
            <param name="polygon">The polygon to render</param>
            <param name="g">The graphics object to use</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.Begin(System.Drawing.Graphics,SharpMap.MapViewport,System.Int32)">
            <summary>
            Method to perform preparatory work for symbilizing.
            </summary>
            <param name="g">The graphics object to symbolize upon</param>
            <param name="map">The map</param>
            <param name="aproximateNumberOfGeometries">An approximate number of geometries to symbolize</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.End(System.Drawing.Graphics,SharpMap.MapViewport)">
            <summary>
            Method to restore the state of the graphics object and do cleanup work.
            </summary>
            <param name="g">The graphics object to symbolize upon</param>
            <param name="map">The map</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.PolygonToGraphicsPath(SharpMap.Map,GeoAPI.Geometries.IPolygon)">
            <summary>
            Conversion function for a polygon to a graphics path
            </summary>
            <param name="map">The map</param>
            <param name="polygon">The polygon</param>
            <returns>A graphics path</returns>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer">
            <summary>
             
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.Transparency">
            <summary>
            Optional transparency in range 0 (opaque) to 1 (fully transparent).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.SymbolColor">
            <summary>
            Optional colour to replace the RemapColor pixels in Symbol. 
            If Transparency is also specified, transparency will replace SymbolColor.Alpha.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.RemapColor">
            <summary>
            Optional colour to be replaced by SymbolColor during re-map.
            Pixels must have an exact match (including RemapColor.Alpha) to be re-mapped.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.Clone">
            <inheritdoc/>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.Symbol">
            <summary>
            Gets or sets the symbol
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.ImageAttributes">
            <summary>
            Gets or sets the <see cref="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.ImageAttributes"/> for rendering the <see cref="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.Symbol"/>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.ConstructImageAttributes">
            <summary>
            Construct imageattribute based upon Transparency and/or Color Re-map
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.Size">
            <summary>
            Gets or sets the Size of the symbol
            <para>
            Implementations may ignore the setter, the getter must return a <see cref="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Size"/> with positive width and height values.
            </para>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.OnRenderInternal(System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Function that does the actual rendering
            </summary>
            <param name="pt">The point</param>
            <param name="g">The graphics object</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.Utility">
            <summary>
            Utility class to Symbolizers, mainly used for pleasant setup;
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.Utility.RandomKnownColor">
            <summary>
            Method to <see cref="T:System.Drawing.Color"/> to get a random known color
            </summary>
            <returns>A random color form the <see cref="T:SharpMap.Drawing.KnownColor"/> enumeration</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.Utility.ScaleSizeToDeviceUnits(System.Single,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Scales sizes to device units
            </summary>
            <param name="size"></param>
            <param name="unit"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer">
            <summary>
            Warps a Pattern to a linestrings
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.Pattern">
            <summary>
            Pattern to warp to
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.Interval">
            <summary>
            The interval between each pattern object
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.GetGreaterSeries(System.Single,System.Single)">
            <summary>
            Creates a pattern symbolizing a linestring like this <c>&gt;&gt;&gt;&gt;&gt;</c>
            </summary>
            <param name="x">The length of the peak</param>
            <param name="y">the offset left and right from the original line</param>
            <returns>The pattern</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.GetZigZag(System.Single,System.Single)">
            <summary>
            Create a "zigzag" pattern, sort of like a rotated by 90 degree Z
            </summary>
            <param name="x">The width of a step op the linestring axis.</param>
            <param name="y">The offset left and right from the axis.</param>
            <returns>The pattern</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.GetTriangle(System.Single,System.Int32)">
            <summary>
            Creates a triangle pattern
            </summary>
            <param name="size">The base length of the triangle</param>
            <param name="orientation">The orientation of the triangle
            <list type="Bullet"><item>0 ... Up</item>
            <item>1 ... Left</item>
            <item>2 ... Down</item>
            <item>3 ... Right</item>
            </list><para/>All other values are reduced using modulo operation</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.GetTriangleSeries(System.Single,System.Single)">
            <summary>
            Creates a triangle pattern
            </summary>
            <param name="x">The base length of the triangle</param>
            <param name="y">The location of the next triangle</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.GetTriangleSeriesForward(System.Single,System.Single)">
            <summary>
            Creates a forward oriented triangle pattern
            </summary>
            <param name="x">The base length of the triangle</param>
            <param name="y">The location of the next triangle</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.Clone">
            <inheritdoc/>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.Fill">
            <summary>
            Gets or sets the brush used to fill closed objects
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.OnRenderInternal(SharpMap.MapViewport,GeoAPI.Geometries.ILineString,System.Drawing.Graphics)">
            <summary>
            Function that actually renders the linestring
            </summary>
            <param name="map">The map</param>
            <param name="lineString">The line string to symbolize.</param>
            <param name="graphics">The graphics</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.WarpPathToPath">
            <summary>
            Class that warps one path to another path, e.g. a pattern to a linestring
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.Warp(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Boolean,System.Single)">
            <summary>
            Warps one path to the flattened (<see cref="M:System.Drawing.Drawing2D.GraphicsPath.Flatten"/>) version of another path.
            This comes in handy for
            <list type="Bullet">
            <item>Linestyles that cannot be created with available <see cref="T:System.Drawing.Pen"/>-properties</item>
            <item>Warping Text to curves</item>
            <item>...</item>
            </list>
            </summary>
            <param name="pathToWarpTo">The path to warp to. This path is flattened before being used, so there is no need to call <see cref="M:System.Drawing.Drawing2D.GraphicsPath.Flatten"/> prior to this function call.</param>
            <param name="pathToWarp">The path to warp</param>
            <param name="isPattern">Defines whether <paramref name="pathToWarp"/> is a pattern or not. If <paramref name="pathToWarp"/> is a pattern, it is repeated until it has the total length of <see paramref="pathToWarpTo"/></param>
            <param name="interval">The interval in which the pattern should be repeated</param>
            <returns>Warped <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/></returns>
            <exception cref="T:System.ArgumentNullException">If either pathToWarpTo or pathToWarp is null</exception>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.GetPathLength(System.Drawing.Drawing2D.GraphicsPath,System.Collections.Generic.SortedList{System.Single,SharpMap.Rendering.Symbolizer.WarpPathToPath.GraphSegment}@)">
            <summary>
            Calculates the length of all segments in the Path, visible or not
            </summary>
            <param name="path">A flattened <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/></param>
            <param name="edges">A <see cref="T:System.Collections.Generic.SortedList`2"/> containing edges of the path. </param>
            <returns>the length</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.PrepareTextPathToWarp(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Boolean,System.Drawing.StringFormat,System.Single)">
            <summary>
            Prepares a text path to be warped to a path
            <para>This operation performs the following tasks</para>
            <list type="Bullet">
            <item>Check if the <paramref name="path"/> length is less than <paramref name="totalPathLength"/> or <paramref name="ignoreLength"/> is set to <c>true</c></item></list>
            <item>Translate <paramref name="path"/> according to horizontal alignment</item>
            </summary>
            <param name="path">The text path</param>
            <param name="totalPathLength">The total length of the path to warp to</param>
            <param name="ignoreLength">value indicating if the text path should only be handled if the path fits the total length</param>
            <param name="format">The string format</param>
            <param name="fontHeight">actual text height as rendered by graphic</param>
            <returns>The prepared text path</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.PreparePathToWarp(System.Drawing.Drawing2D.GraphicsPath,System.Boolean,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="isPattern"></param>
            <param name="totalPathLength"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.ClipPath(System.Drawing.Drawing2D.GraphicsPath,System.Single)">
            <summary>
            Clip the path to a provided length. This is tricky
            </summary>
            <param name="patternPath">the path to be clipped</param>
            <param name="totalPathLength">the maximum length of the path</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.BorderIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            
            </summary>
            <param name="lastPoint"></param>
            <param name="pathPoint"></param>
            <param name="totalPathLength"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.DrawString(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Brush,System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.StringFormat,System.Boolean,System.Drawing.Drawing2D.GraphicsPath,System.Single)">
            <summary>
            Renders text along the path
            </summary>
            <param name="self">The graphics object</param>
            <param name="halo">The pen to render the halo outline</param>
            <param name="fill">The brush to fill the text</param>
            <param name="text">The text to render</param>
            <param name="fontFamily">The font family to use</param>
            <param name="style">The style</param>
            <param name="emSize">The size</param>
            <param name="format">The format</param>
            <param name="ignoreLength"></param>
            <param name="path"></param>
            <param name="textHeight">actual text height as rendered by graphic</param>
        </member>
        <member name="T:SharpMap.Rendering.TextPathAlign">
            <summary>
            Horizontal alignment options for texts on path
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.TextPathAlign.Left">
            <summary>
            Aligned on the left
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.TextPathAlign.Center">
            <summary>
            Aligned in the middle
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.TextPathAlign.Right">
            <summary>
            Aligned on the right
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.TextPathPosition">
            <summary>
            Vertical alignment option for texts on path
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.TextPathPosition.OverPath">
            <summary>
            Above the path
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.TextPathPosition.CenterPath">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.TextPathPosition.UnderPath">
            <summary>
            Below the path
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.GraphicsExtension">
            <summary>
            Extensions methods for text on path label rendering 
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.GraphicsExtension.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Method to measure the length of a string
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="s">The string to measure</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to use</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> to use</param>
            <param name="graphicsPath">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> describing the </param>
            <returns>An array of <see cref="T:System.Drawing.RectangleF"/>s</returns>
        </member>
        <member name="M:SharpMap.Rendering.GraphicsExtension.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,SharpMap.Rendering.TextPathAlign,SharpMap.Rendering.TextPathPosition,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Method to measure the length of a string
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="s">The string to measure</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to use</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> to use</param>
            <param name="textPathAlign">The horizontal position on the <paramref name="graphicsPath"/></param>
            <param name="textPathPosition">The vertical position on the <paramref name="graphicsPath"/></param>
            <param name="graphicsPath">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> describing the </param>
            <returns>An array of <see cref="T:System.Drawing.RectangleF"/>s</returns>
        </member>
        <member name="M:SharpMap.Rendering.GraphicsExtension.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Method to draw <paramref name="s"/> on the provided <paramref name="graphicsPath"/>
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="s">The string to measure</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to use</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> to use</param>
            <param name="graphicsPath">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> describing the </param>
        </member>
        <member name="M:SharpMap.Rendering.GraphicsExtension.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,SharpMap.Rendering.TextPathAlign,SharpMap.Rendering.TextPathPosition,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Method to draw <paramref name="s"/> on the provided <paramref name="graphicsPath"/>
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="s">The string to measure</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to use</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> to use</param>
            <param name="textPathAlign">The horizontal position on the <paramref name="graphicsPath"/></param>
            <param name="textPathPosition">The vertical position on the <paramref name="graphicsPath"/></param>
            <param name="graphicsPath">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> describing the </param>
        </member>
        <member name="M:SharpMap.Rendering.GraphicsExtension.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,SharpMap.Rendering.TextPathAlign,SharpMap.Rendering.TextPathPosition,System.Int32,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Method to measure the length of a string along a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="s">The string to measure</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to use</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> to use</param>
            <param name="textPathAlign">The horizontal position on the <paramref name="graphicsPath"/></param>
            <param name="textPathPosition">The vertical position on the <paramref name="graphicsPath"/></param>
            <param name="letterSpace">A value controlling the spacing between letters</param>
            <param name="graphicsPath">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> describing the </param>
            <returns>An array of <see cref="T:System.Drawing.RectangleF"/>s</returns>
        </member>
        <member name="M:SharpMap.Rendering.GraphicsExtension.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,SharpMap.Rendering.TextPathAlign,SharpMap.Rendering.TextPathPosition,System.Int32,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Method to measure the length of a string along a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="s">The string to measure</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to use</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> to use</param>
            <param name="textPathAlign">The horizontal position on the <paramref name="graphicsPath"/></param>
            <param name="textPathPosition">The vertical position on the <paramref name="graphicsPath"/></param>
            <param name="letterSpace">A value controlling the spacing between letters</param>
            <param name="graphicsPath">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> describing the </param>
            <returns>An array of <see cref="T:System.Drawing.RectangleF"/>s</returns>
        </member>
        <member name="M:SharpMap.Rendering.GraphicsExtension.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,SharpMap.Rendering.TextPathAlign,SharpMap.Rendering.TextPathPosition,System.Int32,System.Single,System.Drawing.Drawing2D.GraphicsPath,System.Collections.Generic.List{System.Single}@,System.Collections.Generic.List{System.Drawing.PointF}@,System.Collections.Generic.List{System.Drawing.Point}@)">
            <summary>
            Method to draw a string on a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> of a string
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="s">The string to measure</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to use</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> to use</param>
            <param name="textPathAlign">The horizontal position on the <paramref name="graphicsPath"/></param>
            <param name="textPathPosition">The vertical position on the <paramref name="graphicsPath"/></param>
            <param name="letterSpace">A value controlling the spacing between letters</param>
            <param name="rotateDegree">A value controlling the rotation of <paramref name="s"/></param>
            <param name="graphicsPath">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> along which to render.</param>
            <param name="angles">A list of angle values (in degrees), one for each letter</param>
            <param name="pointsText">A list of positions, one for each letter</param>
            <param name="pointsUp">A list of points (don't know what for)</param>
        </member>
        <member name="M:SharpMap.Rendering.GraphicsExtension.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,SharpMap.Rendering.TextPathAlign,SharpMap.Rendering.TextPathPosition,System.Int32,System.Single,System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Method to draw a string on a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> of a string
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="s">The string to measure</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to use</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> to use</param>
            <param name="textPathAlign">The horizontal position on the <paramref name="graphicsPath"/></param>
            <param name="textPathPosition">The vertical position on the <paramref name="graphicsPath"/></param>
            <param name="letterSpace">A value controlling the spacing between letters</param>
            <param name="rotateDegree">A value controlling the rotation of <paramref name="s"/></param>
            <param name="graphicsPath">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> describing the </param>
            <param name="showPath">A value indicating if the <paramref name="graphicsPath"/> should be drawn, too.</param>
        </member>
        <member name="T:SharpMap.Rendering.TextOnPath">
            <summary>
            Text on path generator class
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.TextOnPath.LastError">
            <summary>
            The last catched exception is stored here
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.Graphics">
            <summary>
            Gets or sets the <see cref="P:SharpMap.Rendering.TextOnPath.Graphics"/> object
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.GraphicsPath">
            <summary>
            Gets or sets a value indicating the <see cref="P:SharpMap.Rendering.TextOnPath.GraphicsPath"/> used to render text along
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.MeasureString">
            <summary>
            Gets or sets a value indicating whether the string should be measured
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.RegionList">
            <summary>
            Gets or sets a list of regions
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.PointsText">
            <summary>
            Gets or sets a list of <see cref="T:System.Drawing.PointF"/>s
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.PointsTextUp">
            <summary>
            Gets or sets a list of <see cref="T:System.Drawing.PointF"/>s
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.Angles">
            <summary>
            Gets or sets a list of angles (in radians?)
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.RotateDegree">
            <summary>
            Gets or sets a value indicating the rotation
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.TextOnPath.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.TextPathPathPosition">
            <summary>
            Gets or sets a value indicating the vertical alignment
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.PathDataTop">
            <summary>
            Gets or sets a value indicating the path's data
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.Text">
            <summary>
            Gets or sets a value indicating the text to render
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.Font">
            <summary>
            Gets or sets the <see cref="P:SharpMap.Rendering.TextOnPath.Font"/> to use for drawing the text
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.ColorHalo">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> to use for halo'ing the text
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.FillColorTop">
            <summary>
            Gets or sets a value indicating the <see cref="T:System.Drawing.Brush"/> used to fill the text path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.TextPathAlignTop">
            <summary>
            Get or sets a value indicating the horizontal alignment of the path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.PathColorTop">
            <summary>
            Gets or sets a value indicating the color of the <see cref="P:SharpMap.Rendering.TextOnPath.GraphicsPath"/>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.LetterSpacePercentage">
            <summary>
            Gets or sets a value controlling the space between letters
            </summary>
            <remarks>The default value is <value>100</value></remarks>
        </member>
        <member name="P:SharpMap.Rendering.TextOnPath.ShowPath">
            <summary>
            Gets or sets a value indicating that the used path should be rendered as well
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.TextOnPath.DrawTextOnPath(System.Drawing.Drawing2D.PathData,System.String,System.Drawing.Font,System.Drawing.Pen,System.Drawing.Brush,System.Int32)">
            <summary>
            
            </summary>
            <param name="pathdata">The path data</param>
            <param name="text">The text</param>
            <param name="font">The font</param>
            <param name="haloPen">The halo pen</param>
            <param name="fillcolor">The brush to fill letters</param>
            <param name="letterspacepercentage">The </param>
        </member>
        <member name="M:SharpMap.Rendering.TextOnPath.DrawTextOnPath">
            <summary>
            Method to draw the text on the <see cref="P:SharpMap.Rendering.TextOnPath.GraphicsPath"/>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.TextOnPath.DrawTextOnPathEx">
            <summary>
            Method to draw the text on the <see cref="P:SharpMap.Rendering.TextOnPath.GraphicsPath"/>
            </summary>
            <returns>The area covered by the rendering process</returns>
        </member>
        <member name="M:SharpMap.Rendering.TextOnPath.CleanPoints(System.Drawing.PointF[])">
            <summary>
            Method to remove consecutive same/equal <see cref="T:System.Drawing.PointF"/>s from the array
            </summary>
            <param name="points">An array of <see cref="T:System.Drawing.PointF"/>s</param>
            <returns>An array of <see cref="T:System.Drawing.PointF"/>s without repeated values.</returns>
        </member>
        <member name="M:SharpMap.Rendering.TextOnPath.IsVisible(System.Drawing.PointF[],System.Int32)">
            <summary>
            Method to evaluate visibility
            </summary>
            <param name="points">An array of <see cref="T:System.Drawing.PointF"/>s</param>
            <param name="maxPoints">The maximum number of points</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.TextOnPath.GetAngle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Method to compute the angle of a segment |<paramref name="point1"/>, <paramref name="point2"/>| compared to the horizontal line.
            </summary>
            <param name="point1">The 1st point of the segment</param>
            <param name="point2">The 2nd point of the segment</param>
            <returns>An angle in degrees</returns>
        </member>
        <member name="M:SharpMap.Rendering.TextOnPath.DrawRotatedText(System.Drawing.Graphics,System.String,System.Single,System.Drawing.PointF)">
            <summary>
            Method to draw <paramref name="text"/>, rotated by <paramref name="angle"/> around <paramref name="pointCenter"/>.
            </summary>
            <param name="gr">The <see cref="P:SharpMap.Rendering.TextOnPath.Graphics"/> object to use.</param>
            <param name="text">The text string</param>
            <param name="angle">The rotation angle</param>
            <param name="pointCenter">The center point around which to rotate</param>
        </member>
        <member name="M:SharpMap.Rendering.TextOnPath.GetLinePoints(System.Drawing.PointF,System.Drawing.PointF,System.Int32)">
            <summary>
            Metod to get
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="stepWitdth"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.ColorBlend">
            <summary>
            Defines arrays of colors and positions used for interpolating color blending in a multicolor gradient.
            </summary>
            <seealso cref="T:SharpMap.Rendering.Thematics.GradientTheme"/>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.#ctor(System.Drawing.Color[],System.Single[])">
            <summary>
            Initializes a new instance of the ColorBlend class.
            </summary>
            <param name="colors">An array of Color structures that represents the colors to use at corresponding positions along a gradient.</param>
            <param name="positions">An array of values that specify percentages of distance along the gradient line.</param>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Colors">
            <summary>
            Gets or sets an array of colors that represents the colors to use at corresponding positions along a gradient.
            </summary>
            <value>An array of <see cref="T:System.Drawing.Color"/> structures that represents the colors to use at corresponding positions along a gradient.</value>
            <remarks>
            This property is an array of <see cref="T:System.Drawing.Color"/> structures that represents the colors to use at corresponding positions
            along a gradient. Along with the Positions property, this property defines a multicolor gradient.
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Positions">
            <summary>
            Gets or sets the positions along a gradient line.
            </summary>
            <value>An array of values that specify percentages of distance along the gradient line.</value>
            <remarks>
            <para>The elements of this array specify percentages of distance along the gradient line.
            For example, an element value of 0.2f specifies that this point is 20 percent of the total
            distance from the starting point. The elements in this array are represented by float
            values between 0.0f and 1.0f, and the first element of the array must be 0.0f and the
            last element must be 1.0f.</para>
            <pre>Along with the Colors property, this property defines a multicolor gradient.</pre>
            </remarks>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.GetColor(System.Single)">
            <summary>
            Gets the color from the scale at position 'pos'.
            </summary>
            <remarks>If the position is outside the scale [0..1] only the fractional part
            is used (in other words the scale restarts for each integer-part).</remarks>
            <param name="pos">Position on scale between 0.0f and 1.0f</param>
            <returns>Color on scale</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.ToBrush(System.Drawing.Rectangle,System.Single)">
            <summary>
            Converts the color blend to a gradient brush
            </summary>
            <param name="rectangle"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.RainbowMOHID">
            <summary>
            Gets a linear gradient scale with nine colours making a RAINBOW like used in MOHID.
            </summary>
            <remarks>
            Colors pass from Dark Blue over Green , Yellow to Dark Red
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.InverseRainbowMOHID">
            <summary>
            Gets a linear gradient scale with nine colours making a INVERSE RAINBOW like used in MOHID.
            </summary>
            <remarks>
            Colors pass from Dark Red, over Yellow and Green to Dark Blue
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.DigitalTerrainModelMOHID">
            <summary>
            Gets a linear gradient scale with nine colours making a DTM like used in MOHID.
            </summary>
            <remarks>
            Colors pass from Dark Blue over Green , Yellow to Dark Red
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.BathymetryMOHID">
            <summary>
            Gets a linear gradient scale with six colours making a Bathymetry like used in MOHID.
            </summary>
            <remarks>
            Colors pass from Dark Blue over Green , Yellow to Dark Red
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Rainbow7">
            <summary>
            Gets a linear gradient scale with seven colours making a rainbow from red to violet.
            </summary>
            <remarks>
            Colors span the following with an interval of 1/6:
            { Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Blue, Color.Indigo, Color.Violet }
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Rainbow5">
            <summary>
            Gets a linear gradient scale with five colours making a rainbow from red to blue.
            </summary>
            <remarks>
            Colors span the following with an interval of 0.25:
            { Color.Red, Color.Yellow, Color.Green, Color.Cyan, Color.Blue }
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.BlackToWhite">
            <summary>
            Gets a linear gradient scale from black to white
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.WhiteToBlack">
            <summary>
            Gets a linear gradient scale from white to black
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.RedToGreen">
            <summary>
            Gets a linear gradient scale from red to green
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.GreenToRed">
            <summary>
            Gets a linear gradient scale from green to red
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.BlueToGreen">
            <summary>
            Gets a linear gradient scale from blue to green
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.GreenToBlue">
            <summary>
            Gets a linear gradient scale from green to blue
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.RedToBlue">
            <summary>
            Gets a linear gradient scale from red to blue
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.BlueToRed">
            <summary>
            Gets a linear gradient scale from blue to red
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.TwoColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a linear gradient scale from two colors
            </summary>
            <param name="fromColor"></param>
            <param name="toColor"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.ThreeColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a linear gradient scale from three colors
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.CustomTheme">
            <summary>
            The CustomTheme class is used for defining your own thematic rendering by using a custom get-style-delegate.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod">
            <summary>
            Custom Style Delegate method
            </summary>
            <remarks>
            The GetStyle delegate is used for determining the style of a feature using the <see cref="P:SharpMap.Rendering.Thematics.CustomTheme.StyleDelegate"/> property.
            The method must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return an <see cref="T:SharpMap.Styles.IStyle"/>.
            If the method returns null, the default style will be used for rendering.
            <para>
            <example>
            The following example can used for highlighting all features where the attribute "NAME" starts with "S".
            <code lang="C#">
            SharpMap.Rendering.Thematics.CustomTheme iTheme = new SharpMap.Rendering.Thematics.CustomTheme(GetCustomStyle);
            SharpMap.Styles.VectorStyle defaultstyle = new SharpMap.Styles.VectorStyle(); //Create default renderstyle
            defaultstyle.Fill = Brushes.Gray;
            iTheme.DefaultStyle = defaultstyle;
            
            [...]
            
            //Set up delegate for determining fill-color.
            //Delegate will fill all objects with a yellow color where the attribute "NAME" starts with "S".
            private static SharpMap.Styles.VectorStyle GetCustomStyle(SharpMap.Data.FeatureDataRow row)
            {
            
            	if (row["NAME"].ToString().StartsWith("S"))
            	{
            		SharpMap.Styles.VectorStyle style = new SharpMap.Styles.VectorStyle();
            		style.Fill = Brushes.Yellow;
            		return style;
            	}
            	else
            		return null; //Return null which will render the default style
            }
            </code>
            </example>
            </para>
            </remarks>
            <param name="dr">Feature</param>
            <returns>Style to be applied to feature</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.CustomTheme.#ctor(SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Rendering.Thematics.CustomTheme"/> class
            </summary>
            <param name="getStyleMethod"></param>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.CustomTheme.DefaultStyle">
            <summary>
            Gets or sets the default style when an attribute isn't found in any bucket
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.CustomTheme.StyleDelegate">
            <summary>
            Gets or sets the style delegate used for determining the style of a feature
            If map zoom/scale are also required by delegate then refer to <see cref="T:SharpMap.Rendering.Thematics.IThemeEx"/> and <see cref="P:SharpMap.Rendering.Thematics.CustomTheme.GetStyleDelegateEx"/> property
            </summary>
            <remarks>
            The delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return an <see cref="T:SharpMap.Styles.IStyle"/>.
            If the method returns null, the default style will be used for rendering (note - default style may be set to null if required).
            <example>
            The example below creates a delegate that can be used for assigning the rendering of a road theme. If the road-class
            is larger than '3', it will be rendered using a thick red line.
            <code lang="C#">
            private static SharpMap.Styles.VectorStyle GetRoadStyle(SharpMap.Data.FeatureDataRow row)
            {
            	SharpMap.Styles.VectorStyle style = new SharpMap.Styles.VectorStyle();
            	if(((int)row["RoadClass"])>3)
            		style.Line = new Pen(Color.Red,5f);
            	else
            		style.Line = new Pen(Color.Black,1f);
            	return style;
            }
            </code>
            </example>
            </remarks>
            <seealso cref="T:SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod"/>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.CustomTheme.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the <see cref="T:SharpMap.Styles.Style">style</see> based on an attribute value
            </summary>
            <param name="feature">DataRow</param>
            <returns>Style generated by GetStyle-Delegate</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.CustomTheme.GetStyle(SharpMap.MapViewport,SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the <see cref="T:SharpMap.Styles.Style">style</see> based on an mapViewPort scale or zoom and/or attribute value(s)
            </summary>
            <param name="mapViewPort">MapViewport</param>
            <param name="feature">DataRow</param>
            <returns>Style generated by GetStyle-Delegate</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.CustomTheme.GetStyleDelegateEx">
            <summary>
            Custom Style Delegate method providing access to current zoom/scale via MapViewport. GetStyleDelegateEx takes priority over GetStyle
            </summary>
            <remarks>
            GetStyleDelegateEx is used for determining the style of a feature.
            Provide a lambda-style reference to public function in your implementation of CustomTheme 
            <para>
            <example>
            <code lang="C#">
            Func &lt; MapViewport, FeatureDataRow, IStyle> f = (mvp, fdr) => MyPublicFunction(mvp, fdr);
            GetStyleDelegateEx = f;
            </code>
            in which signature of MyPublicFunction is:
            <code lang="C#">
            public SharpMap.Styles.VectorStyle MyPublicFunction(MapViewport mapViewport, FeatureDataRow feature)
            </code>
            </example>
            </para>
            </remarks>
            <returns>Style to be applied to feature</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.CustomTheme.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.FontSizeTheme">
            <summary>
            A theme that calculates the font size dependant on the map's zoom
            </summary>
            <example>
            <code language="C#">
            // Create a map
            var map = new SharpMap.Map();
            // Create the label layer   
            var layer = new SharpMap.Layers.LabelLayer("Label");
            // Assign data source
            layer.DataSource = myDataSource;
            // Assign theme
            layer.Theme = new SharpMap.Rendering.Thematics.FontSizeTheme(layer, map)
            {
               // these values are both optional
               MinFontSize = 6f,
               FontSizeScale = 10f,
               //BaseTheme = SomeOtherLabelStyleTheme
            };
            // Add layer to map
            map.Layers.Add(layer);
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.FontSizeTheme.#ctor(SharpMap.Layers.LabelLayer,SharpMap.Map)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layer"></param>
            <param name="map"></param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.FontSizeTheme.HandleStyleChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <see cref="E:SharpMap.Layers.Layer.StyleChanged"/> event
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.FontSizeTheme.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the style based on a feature
            </summary>
            <param name="attribute">Set of attribute values to calculate the <see cref="T:SharpMap.Styles.IStyle"/> from</param>
            <returns>The style</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.FontSizeTheme.UpdateStyle(SharpMap.Styles.LabelStyle,System.Single)">
            <summary>
            Method to update the style according to the new size
            </summary>
            <param name="labelStyle">The label style</param>
            <param name="newSize">A new size</param>
            <returns>The updated label style</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.FontSizeTheme.BaseTheme">
            <summary>
            Gets or sets an additional theme that has to be computed before this style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.FontSizeTheme.CalculateSize">
            <summary>
            Function to calculate the size of the font in <see cref="F:System.Drawing.GraphicsUnit.Pixel"/>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.FontSizeTheme.TreatSizeAsMapUnits(SharpMap.Map,System.Single)">
            <summary>
            Default Implementation of a size conversion from map units to <see cref="F:System.Drawing.GraphicsUnit.Pixel"/>.
            </summary>
            <param name="map">The map</param>
            <param name="sizeInMapUnits">The size of the font in map units</param>
            <returns>A font size in pixel</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.FontSizeTheme.MinFontSize">
            <summary>
            Gets or sets a value indicating at which size the font is being drawn
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.FontSizeTheme.FontSizeScale">
            <summary>
            Gets or sets a value indicating the scale factor for the font size
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.FontSizeTheme.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.GradientThemeBase">
            <summary>
            Gradient theme base class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.#ctor(System.Double,System.Double,SharpMap.Styles.IStyle,SharpMap.Styles.IStyle)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
            <param name="minStyle">The <see cref="T:SharpMap.Styles.IStyle">style</see> to apply for values equal to <paramref name="minValue"/></param>
            <param name="maxStyle">The <see cref="T:SharpMap.Styles.IStyle">style</see> to apply for values equal to <paramref name="maxValue"/></param>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.Min">
            <summary>
            Gets or sets the minimum value of the gradient
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.Max">
            <summary>
            Gets or sets the maximum value of the gradient
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.MinStyle">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.IStyle">style</see> for the minimum value
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.MaxStyle">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.IStyle">style</see> for the maximum value
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.TextColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/> used on labels
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.LineColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/> used on lines
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.FillColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/> used as Fill
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.CalculateVectorStyle(SharpMap.Styles.VectorStyle,SharpMap.Styles.VectorStyle,System.Double)">
            <summary>
            Function to compute a new <see cref="T:SharpMap.Styles.VectorStyle">style</see> for the given <paramref name="value"/>
            </summary>
            <param name="min">The minimum <see cref="T:SharpMap.Styles.VectorStyle">style</see></param>
            <param name="max">The maximum <see cref="T:SharpMap.Styles.VectorStyle">style</see></param>
            <param name="value">The value</param>
            <returns>A <see cref="T:SharpMap.Styles.VectorStyle">style</see></returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.CalculateLabelStyle(SharpMap.Styles.LabelStyle,SharpMap.Styles.LabelStyle,System.Double)">
            <summary>
            Function to compute a new <see cref="T:SharpMap.Styles.LabelStyle">style</see> for the given <paramref name="value"/>
            </summary>
            <param name="min">The minimum <see cref="T:SharpMap.Styles.LabelStyle">style</see></param>
            <param name="max">The maximum <see cref="T:SharpMap.Styles.LabelStyle">style</see></param>
            <param name="value">The value</param>
            <returns>A <see cref="T:SharpMap.Styles.LabelStyle">style</see></returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.Fraction(System.Double)">
            <summary>
            Function to compute the fraction for <paramref name="attr"/> based on <see cref="P:SharpMap.Rendering.Thematics.GradientThemeBase.Min"/> and <see cref="P:SharpMap.Rendering.Thematics.GradientThemeBase.Max"/>
            </summary>
            <param name="attr">The attribute value to compute the fraction for</param>
            <returns>A value in the &#x211d;[0, 1]</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.InterpolateBool(System.Boolean,System.Boolean,System.Double)">
            <summary>
            Function to interpolate a <see cref="T:System.Boolean"/> value for <paramref name="attr"/>. 
            </summary>
            <param name="min">The value to return if <see cref="M:SharpMap.Rendering.Thematics.GradientThemeBase.Fraction(System.Double)"/>/<paramref name="attr"/>) &lt;= <value>0.5d</value></param>
            <param name="max">The value to return if <see cref="M:SharpMap.Rendering.Thematics.GradientThemeBase.Fraction(System.Double)"/>/<paramref name="attr"/>) &gt; <value>0.5d</value></param>
            <param name="attr">The value to test</param>
            <returns><paramref name="min"/>, if <see cref="M:SharpMap.Rendering.Thematics.GradientThemeBase.Fraction(System.Double)"/>/<paramref name="attr"/>) &lt;= <value>0.5d</value>, else <paramref name="max"/></returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.InterpolateFloat(System.Single,System.Single,System.Double)">
            <summary>
            Function to interpolate a <see cref="T:System.Single"/> value for <paramref name="attr"/>
            </summary>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <param name="attr">The value to test</param>
            <returns>A value in the &#x211d;[<paramref name="min"/>, <paramref name="max"/>]</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.InterpolateDouble(System.Double,System.Double,System.Double)">
            <summary>
            Function to interpolate a <see cref="T:System.Single"/> value for <paramref name="attr"/>
            </summary>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <param name="attr">The value to test</param>
            <returns>A value in the &#x211d;[<paramref name="min"/>, <paramref name="max"/>]</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.InterpolateBrush(System.Drawing.Brush,System.Drawing.Brush,System.Double)">
            <summary>
            Function to interpolate a <see cref="T:System.Drawing.Brush"/> value for <paramref name="attr"/>
            </summary>
            <remarks>Currently only <see cref="T:System.Drawing.SolidBrush"/>es are interpolated</remarks>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <param name="attr">The value to test</param>
            <returns>An interpolated <see cref="T:System.Drawing.SolidBrush"/>.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.InterpolatePen(System.Drawing.Pen,System.Drawing.Pen,System.Double)">
            <summary>
            Function to interpolate a <see cref="T:System.Drawing.Pen"/> value for <paramref name="attr"/>
            </summary>
            <remarks>Currently only <see cref="F:System.Drawing.Drawing2D.PenType.SolidColor"/> pens are interpolated</remarks>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <param name="attr">The value to test</param>
            <returns>An interpolated <see cref="T:System.Drawing.Pen"/>.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.InterpolateColor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Function to interpolate a <see cref="T:System.Drawing.Color"/> value for <paramref name="attr"/>
            </summary>
            <param name="minCol">The minimum <see cref="T:System.Drawing.Color"/></param>
            <param name="maxCol">The maximum <see cref="T:System.Drawing.Color"/></param>
            <param name="attr">The value to test</param>
            <returns>An interpolated <see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the style based on a numeric DataColumn, where style
            properties are linearly interpolated between max and min values.
            </summary>
            <param name="row">Feature</param>
            <returns><see cref="T:SharpMap.Styles.IStyle">Style</see> calculated by a linear interpolation between the min/max styles</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.GetAttributeValue(SharpMap.Data.FeatureDataRow)">
            <summary>
            Function to get a <see cref="T:System.Double"/> value from <paramref name="row"/>.
            </summary>
            <param name="row">The row</param>
            <returns>A <see cref="T:System.Double"/> value</returns>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.GradientTheme">
            <summary>
            The GradientTheme class defines a gradient color thematic rendering of features based by a numeric attribute.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientTheme.#ctor(System.String,System.Double,System.Double,SharpMap.Styles.IStyle,SharpMap.Styles.IStyle)">
            <summary>
            Initializes a new instance of the GradientTheme class
            </summary>
            <remarks>
            <para>The gradient theme interpolates linearly between two styles based on a numerical attribute in the datasource.
            This is useful for scaling symbols, line widths, line and fill colors from numerical attributes.</para>
            <para>Colors are interpolated between two colors, but if you want to interpolate through more colors (fx. a rainbow),
            set the <see cref="P:SharpMap.Rendering.Thematics.GradientThemeBase.TextColorBlend"/>, <see cref="P:SharpMap.Rendering.Thematics.GradientThemeBase.LineColorBlend"/> and <see cref="P:SharpMap.Rendering.Thematics.GradientThemeBase.FillColorBlend"/> properties
            to a custom <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/>.
            </para>
            <para>The following properties are scaled (properties not mentioned here are not interpolated):
            <list type="table">
            	<listheader><term>Property</term><description>Remarks</description></listheader>
            	<item><term><see cref="T:System.Drawing.Color"/></term><description>Red, Green, Blue and Alpha values are linearly interpolated.</description></item>
            	<item><term><see cref="T:System.Drawing.Pen"/></term><description>The color, width, color of pens are interpolated. MiterLimit,StartCap,EndCap,LineJoin,DashStyle,DashPattern,DashOffset,DashCap,CompoundArray, and Alignment are switched in the middle of the min/max values.</description></item>
            	<item><term><see cref="T:System.Drawing.SolidBrush"/></term><description>SolidBrush color are interpolated. Other brushes are not supported.</description></item>
            	<item><term><see cref="T:SharpMap.Styles.VectorStyle"/></term><description>MaxVisible, MinVisible, Line, Outline, Fill and SymbolScale are scaled linearly. Symbol, EnableOutline and Enabled switch in the middle of the min/max values.</description></item>
            	<item><term><see cref="T:SharpMap.Styles.LabelStyle"/></term><description>FontSize, BackColor, ForeColor, MaxVisible, MinVisible, Offset are scaled linearly. All other properties use min-style.</description></item>
            </list>
            </para>
            <example>
            Creating a rainbow colorblend showing colors from red, through yellow, green and blue depicting 
            the population density of a country.
            <code lang="C#">
            //Create two vector styles to interpolate between
            SharpMap.Styles.VectorStyle min = new SharpMap.Styles.VectorStyle();
            SharpMap.Styles.VectorStyle max = new SharpMap.Styles.VectorStyle();
            min.Outline.Width = 1f; //Outline width of the minimum value
            max.Outline.Width = 3f; //Outline width of the maximum value
            //Create a theme interpolating population density between 0 and 400
            SharpMap.Rendering.Thematics.GradientTheme popdens = new SharpMap.Rendering.Thematics.GradientTheme("PopDens", 0, 400, min, max);
            //Set the fill-style colors to be a rainbow blend from red to blue.
            popdens.FillColorBlend = SharpMap.Rendering.Thematics.ColorBlend.Rainbow5;
            myVectorLayer.Theme = popdens;
            </code>
            </example>
            </remarks>
            <param name="columnName">Name of column to extract the attribute</param>
            <param name="minValue">Minimum value</param>
            <param name="maxValue">Maximum value</param>
            <param name="minStyle">Color for minimum value</param>
            <param name="maxStyle">Color for maximum value</param>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.ColumnName">
            <summary>
            Gets or sets the column name from where to get the attribute value
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientTheme.GetAttributeValue(SharpMap.Data.FeatureDataRow)">
            <summary>
            Function to get a <see cref="T:System.Double"/> value for <see cref="P:SharpMap.Rendering.Thematics.GradientTheme.ColumnName"/> from <paramref name="row"/>.
            </summary>
            <param name="row">The row</param>
            <returns>A <see cref="T:System.Double"/> value</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientTheme.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.ITheme">
            <summary>
            Interface for rendering a thematic layer
            </summary>
            <remarks>
            Implementations of this interface should consider implementing <see cref="T:System.ICloneable"/> 
            when they make use of <see cref="T:System.Drawing.Pen"/>, <see cref="T:System.Drawing.Brush"/> or likewise 
            objects of the <see cref="N:System.Drawing"/> namespace. Otherwise they are prone to GDI+ rendering exceptions.
            </remarks>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ITheme.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the style based on a feature
            </summary>
            <param name="feature">Set of attribute values to calculate the <see cref="T:SharpMap.Styles.IStyle"/> from</param>
            <returns>The style</returns>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.IThemeEx">
            <summary>
            Extended interface for rendering a thematic layer based upon current scale or zoom and/or feature attributes
            </summary>
            <remarks>
            Implementations of this interface should consider implementing <see cref="T:System.ICloneable"/> 
            when they make use of <see cref="T:System.Drawing.Pen"/>, <see cref="T:System.Drawing.Brush"/> or likewise 
            objects of the <see cref="N:System.Drawing"/> namespace. Otherwise they are prone to GDI+ rendering exceptions.
            </remarks>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.IThemeEx.GetStyle(SharpMap.MapViewport,SharpMap.Data.FeatureDataRow)">
            <summary>
            Calculates a style for a given <paramref name="feature"/> based on a given <paramref name="mapViewPort"/>. 
            </summary>
            <param name="mapViewPort">The viewport</param>
            <param name="feature">The feature</param>
            <returns>A style</returns>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.UniqueValuesTheme`1">
            <summary>
            UniqueValuesTheme is a theme each rendered feature is matched against at category that have a different style
            </summary>
            <typeparam name="T">Type of the featureattribute to match</typeparam>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.UniqueValuesTheme`1.#ctor(System.String,System.Collections.Generic.Dictionary{`0,SharpMap.Styles.IStyle},SharpMap.Styles.IStyle)">
            <summary>
            CategoriesTheme is a theme each rendered feature is matched against at category that have a different style
            </summary>
            <param name="attributeName">the featureattribute to categorize by</param>
            <param name="styleMap">the map of attributevalue to style</param>
            <param name="defaultStyle">the default style to map features that does not exist in the stylemap with</param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.UniqueValuesTheme`1.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the style based on a feature
            </summary>
            <param name="attribute">Set of attribute values to calculate the <see cref="T:SharpMap.Styles.IStyle"/> from</param>
            <returns>The style</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.UniqueValuesTheme`1.AttributeName">
            <summary>
            Gets the name of the attribute column
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.UniqueValuesTheme`1.UniqueValues">
            <summary>
            Gets the unique values
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.UniqueValuesTheme`1.DefaultStyle">
            <summary>
            Gets the default style, that is applied if <see cref="T:System.Attribute"/>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.UniqueValuesTheme`1.GetStyle(System.String)">
            <summary>
            Function to retrieve the style for a given value
            </summary>
            <param name="value">The attribute value as string</param>
            <returns>The style</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.UniqueValuesTheme`1.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="T:SharpMap.Rendering.VectorRenderer">
            <summary>
            This class renders individual geometry features to a graphics object using the settings of a map object.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiLineString(System.Drawing.Graphics,GeoAPI.Geometries.IMultiLineString,System.Drawing.Pen,SharpMap.MapViewport,System.Single)">
            <summary>
            Renders a MultiLineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="lines">MultiLineString to be rendered</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
            <param name="offset">Offset by which line will be moved to right</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiLineStringEx(System.Drawing.Graphics,GeoAPI.Geometries.IMultiLineString,System.Drawing.Pen,SharpMap.MapViewport,System.Single)">
            <summary>
            Renders a MultiLineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="lines">MultiLineString to be rendered</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
            <param name="offset">Offset by which line will be moved to right</param>
            <returns>The area of the map that was affected by the drawing operation</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.OffsetRight(System.Drawing.PointF[],System.Single)">
            <summary>
            Offset drawn linestring by given pixel width
            </summary>
            <param name="points"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLineString(System.Drawing.Graphics,GeoAPI.Geometries.ILineString,System.Drawing.Pen,SharpMap.MapViewport)">
            <summary>
            Renders a LineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="line">LineString to render</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLineString(System.Drawing.Graphics,GeoAPI.Geometries.ILineString,System.Drawing.Pen,SharpMap.MapViewport,System.Single)">
            <summary>
            Renders a LineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="line">LineString to render</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
            <param name="offset">Offset by which line will be moved to right</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLineStringEx(System.Drawing.Graphics,GeoAPI.Geometries.ILineString,System.Drawing.Pen,SharpMap.MapViewport,System.Single)">
            <summary>
            Renders a LineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="line">LineString to render</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
            <param name="offset">Offset by which line will be moved to right</param>
            <returns>The area of the map that was affected by the drawing of the geometry.</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPolygon(System.Drawing.Graphics,GeoAPI.Geometries.IMultiPolygon,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,SharpMap.MapViewport)">
            <summary>
            Renders a multipolygon byt rendering each polygon in the collection by calling DrawPolygon.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="multiPolygon">MultiPolygon to render</param>
            <param name="brush">Brush used for filling (null or transparent for no filling)</param>
            <param name="pen">Outline pen style (null if no outline)</param>
            <param name="clip">Specifies whether polygon clipping should be applied</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPolygonEx(System.Drawing.Graphics,GeoAPI.Geometries.IMultiPolygon,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,SharpMap.MapViewport)">
            <summary>
            Renders a multipolygon byt rendering each polygon in the collection by calling DrawPolygon.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="multiPolygon">MultiPolygon to render</param>
            <param name="brush">Brush used for filling (null or transparent for no filling)</param>
            <param name="pen">Outline pen style (null if no outline)</param>
            <param name="clip">Specifies whether polygon clipping should be applied</param>
            <param name="map">Map reference</param>
            <returns>The area of the map that was affected by the drawing of the geometry.</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPolygon(System.Drawing.Graphics,GeoAPI.Geometries.IPolygon,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,SharpMap.MapViewport)">
            <summary>
            Renders a polygon to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="pol">Polygon to render</param>
            <param name="brush">Brush used for filling (null or transparent for no filling)</param>
            <param name="pen">Outline pen style (null if no outline)</param>
            <param name="clip">Specifies whether polygon clipping should be applied</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPolygonEx(System.Drawing.Graphics,GeoAPI.Geometries.IPolygon,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,SharpMap.MapViewport)">
            <summary>
            Renders a polygon to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="pol">Polygon to render</param>
            <param name="brush">Brush used for filling (null or transparent for no filling)</param>
            <param name="pen">Outline pen style (null if no outline)</param>
            <param name="clip">Specifies whether polygon clipping should be applied</param>
            <param name="map">Map reference</param>
            <returns>The area of the map that was affected by the drawing of the geometry.</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.LimitValues(System.Drawing.PointF[],System.Single)">
            <summary>
            Purpose of this method is to prevent the 'overflow error' exception in the FillPath method. 
            This Exception is thrown when the coordinate values become too big (values over -2E+9f always 
            throw an exception, values under 1E+8f seem to be okay). This method limits the coordinates to 
            the values given by the second parameter (plus an minus). Theoretically the lines to and from 
            these limited points are not correct but GDI+ paints incorrect even before that limit is reached. 
            </summary>
            <param name="vertices">The vertices that need to be limited</param>
            <param name="limit">The limit at which coordinate values will be cutoff</param>
            <returns>The limited vertices</returns>
        </member>
        <member name="T:SharpMap.Rendering.VectorRenderer.SizeOfStringDelegate">
            <summary>
            Signature for a function that evaluates the length of a string when rendered on a Graphics object with a given font
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object</param>
            <param name="text">the text to render</param>
            <param name="font">the font to use</param>
            <returns>the size</returns>
        </member>
        <member name="P:SharpMap.Rendering.VectorRenderer.SizeOfString">
            <summary>
            Delegate used to determine the <see cref="T:System.Drawing.SizeF"/> of a given string.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.SizeOfStringBase(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Function to get the <see cref="T:System.Drawing.SizeF"/> of a string when rendered with the given font.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object</param>
            <param name="text">the text to render</param>
            <param name="font">the font to use</param>
            <returns>the size</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.SizeOfString74(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Function to get the <see cref="T:System.Drawing.SizeF"/> of a string when rendered with the given font.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object</param>
            <param name="text">the text to render</param>
            <param name="font">the font to use</param>
            <returns>the size</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.SizeOfStringCeiling(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Function to get the <see cref="T:System.Drawing.SizeF"/> of a string when rendered with the given font.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object</param>
            <param name="text">the text to render</param>
            <param name="font">the font to use</param>
            <returns>the size</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLabel(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Font,System.Drawing.Color,System.Drawing.Brush,System.Drawing.Pen,System.Single,System.String,SharpMap.MapViewport,SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum,System.Nullable{System.Drawing.PointF})">
            <summary>
            Renders a label to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="labelPoint">Label placement</param>
            <param name="offset">Offset of label in screen coordinates</param>
            <param name="font">Font used for rendering</param>
            <param name="foreColor">Font foreground color</param>
            <param name="backColor">Background color</param>
            <param name="halo">Color of halo</param>
            <param name="rotation">Text rotation in degrees</param>
            <param name="text">Text to render</param>
            <param name="map">Map reference</param>
            <param name="alignment">Horizontal alignment for multi line labels. If not set <see cref="F:System.Drawing.StringAlignment.Near"/> is used</param>
            <param name="rotationPoint">Point where the rotation should take place</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLabelEx(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Font,System.Drawing.Color,System.Drawing.Brush,System.Drawing.Pen,System.Single,System.String,SharpMap.MapViewport,SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum,System.Nullable{System.Drawing.PointF})">
            <summary>
            Renders a label to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="labelPoint">Label placement</param>
            <param name="offset">Offset of label in screen coordinates</param>
            <param name="font">Font used for rendering</param>
            <param name="foreColor">Font foreground color</param>
            <param name="backColor">Background color</param>
            <param name="halo">Color of halo</param>
            <param name="rotation">Text rotation in degrees</param>
            <param name="text">Text to render</param>
            <param name="map">Map reference</param>
            <param name="alignment">Horizontal alignment for multi line labels. If not set <see cref="F:System.Drawing.StringAlignment.Near"/> is used</param>
            <param name="rotationPoint">Point where the rotation should take place</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.ClipPolygon(System.Drawing.PointF[],System.Int32,System.Int32)">
            <summary>
            Clips a polygon to the view.
            Based on UMN Mapserver renderer 
            </summary>
            <param name="vertices">vertices in image coordinates</param>
            <param name="width">Width of map in image coordinates</param>
            <param name="height">Height of map in image coordinates</param>
            <returns>Clipped polygon</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPoint(System.Drawing.Graphics,GeoAPI.Geometries.IPoint,System.Drawing.Brush,System.Single,System.Drawing.PointF,SharpMap.MapViewport)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="b">Brush reference</param>
            <param name="size">Size of drawn Point</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPointEx(System.Drawing.Graphics,GeoAPI.Geometries.IPoint,System.Drawing.Brush,System.Single,System.Drawing.PointF,SharpMap.MapViewport)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="b">Brush reference</param>
            <param name="size">Size of drawn Point</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPoint(SharpMap.Rendering.Symbolizer.IPointSymbolizer,System.Drawing.Graphics,GeoAPI.Geometries.IPoint,SharpMap.MapViewport)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="symbolizer">Symbolizer to decorate point</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPointEx(SharpMap.Rendering.Symbolizer.IPointSymbolizer,System.Drawing.Graphics,GeoAPI.Geometries.IPoint,SharpMap.MapViewport)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="symbolizer">Symbolizer to decorate point</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPoint(System.Drawing.Graphics,GeoAPI.Geometries.IPoint,System.Drawing.Image,System.Single,System.Drawing.PointF,System.Single,SharpMap.MapViewport)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="symbol">Symbol to place over point</param>
            <param name="symbolscale">The amount that the symbol should be scaled. A scale of '1' equals to no scaling</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="rotation">Symbol rotation in degrees</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPointEx(System.Drawing.Graphics,GeoAPI.Geometries.IPoint,System.Drawing.Image,System.Single,System.Drawing.PointF,System.Single,SharpMap.MapViewport)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="symbol">Symbol to place over point</param>
            <param name="symbolScale">The amount that the symbol should be scaled. A scale of '1' equals to no scaling</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="rotation">Symbol rotation in degrees</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPoint(System.Drawing.Graphics,GeoAPI.Geometries.IMultiPoint,System.Drawing.Image,System.Single,System.Drawing.PointF,System.Single,SharpMap.MapViewport)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="points">MultiPoint to render</param>
            <param name="symbol">Symbol to place over point</param>
            <param name="symbolScale">The amount that the symbol should be scaled. A scale of '1' equals to no scaling</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="rotation">Symbol rotation in degrees</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPointEx(System.Drawing.Graphics,GeoAPI.Geometries.IMultiPoint,System.Drawing.Image,System.Single,System.Drawing.PointF,System.Single,SharpMap.MapViewport)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="points">MultiPoint to render</param>
            <param name="symbol">Symbol to place over point</param>
            <param name="symbolScale">The amount that the symbol should be scaled. A scale of '1' equals to no scaling</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="rotation">Symbol rotation in degrees</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPoint(SharpMap.Rendering.Symbolizer.IPointSymbolizer,System.Drawing.Graphics,GeoAPI.Geometries.IMultiPoint,SharpMap.MapViewport)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="points">MultiPoint to render</param>
            <param name="symbolizer">Symbolizer to decorate point</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPointEx(SharpMap.Rendering.Symbolizer.IPointSymbolizer,System.Drawing.Graphics,GeoAPI.Geometries.IMultiPoint,SharpMap.MapViewport)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="points">MultiPoint to render</param>
            <param name="symbolizer">Symbolizer to decorate point</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPoint(System.Drawing.Graphics,GeoAPI.Geometries.IMultiPoint,System.Drawing.Brush,System.Single,System.Drawing.PointF,SharpMap.MapViewport)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="points">MultiPoint to render</param>
            <param name="brush">Brush reference</param>
            <param name="size">Size of drawn Point</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPointEx(System.Drawing.Graphics,GeoAPI.Geometries.IMultiPoint,System.Drawing.Brush,System.Single,System.Drawing.PointF,SharpMap.MapViewport)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="points">MultiPoint to render</param>
            <param name="brush">Brush reference</param>
            <param name="size">Size of drawn Point</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.ExpandToInclude(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Equivalent of Envelope.ExpandToInclude, allowing for RectangleF.Empty
            </summary>
            <param name="self">The base rectangle</param>
            <param name="other">The rectangle to include</param>
            <returns></returns>
            <remarks>
            RectangleF.Union does not take into account RectangleF.Empty. For example, 
            when A = (0, 0; 0, 0) and B = (1, 1; 2, 2) then A.Union(B) = (0, 0; 2, 2)
            </remarks>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.ExpandToInclude(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Equivalent of Envelope.ExpandToInclude, allowing for Rectangle.Empty
            </summary>
            <param name="self">The base rectangle</param>
            <param name="other">The rectangle to include</param>
            <returns></returns>
            <remarks>
            Rectangle.Union does not take into account Rectangle.Empty. For example, 
            when A = (0, 0; 0, 0) and B = (1, 1; 2, 2) then A.Union(B) = (0, 0; 2, 2)
            </remarks>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.ToRectangle(System.Drawing.RectangleF)">
            <summary>
            Utility method to return Rectangle enclosing given RectangleF.
            Top-left coordinate is rounded towards origin, while bottom-right coordinate is rounded away from origin.   
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.ToRectangle(System.Drawing.Point[])">
            <summary>
            Utility method to return Rectangle enclosing given RectangleF.
            Top-left coordinate is rounded towards origin, while bottom-right coordinate is rounded away from origin.   
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.ToRectangleF(System.Drawing.PointF[])">
            <summary>
            Utility method to return enclosing rectangle. Source array must have 4 or more points. 
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.ToPointArray(System.Drawing.RectangleF)">
            <summary>
            Utility method to return points defining rectangle, ordered clockwise from top left
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.ToPointArray(System.Drawing.Rectangle)">
            <summary>
            Utility method to return points defining rectangle, ordered clockwise from top left
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.Union(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
            Basic rectilinear union. Rectangles are assumed to be a common graphics coordinate system.
            </summary>
            <param name="self"></param>
            <param name="other"></param>
            <returns></returns>
            <remarks>Either of the arrays could be empty, so must return new array</remarks>
        </member>
        <member name="T:SharpMap.Session">
            <summary>
            A SharpMap Session class
            </summary>
        </member>
        <member name="M:SharpMap.Session.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:SharpMap.Session.Instance">
            <summary>
            Gets a value indicating the current instance
            </summary>
        </member>
        <member name="P:SharpMap.Session.GeometryServices">
            <summary>
            The geometry services instance
            </summary>
        </member>
        <member name="P:SharpMap.Session.CoordinateSystemServices">
            <summary>
            Gets the coordinate system services instance
            </summary>
        </member>
        <member name="P:SharpMap.Session.CoordinateSystemRepository">
            <summary>
            Gets the coordinate system repository
            </summary>
        </member>
        <member name="M:SharpMap.Session.SetGeometryServices(GeoAPI.IGeometryServices)">
            <summary>
            Method to set the geometry services class
            </summary>
            <param name="geometryServices">The geometry services class</param>
            <returns>A reference to this session</returns>
        </member>
        <member name="M:SharpMap.Session.SetCoordinateSystemServices(GeoAPI.ICoordinateSystemServices)">
            <summary>
            Method to set the coordinate system services class
            </summary>
            <param name="coordinateSystemServices">The coordinate system services class</param>
            <returns>A reference to this session</returns>
        </member>
        <member name="M:SharpMap.Session.SetCoordinateSystemRepository(GeoAPI.ICoordinateSystemRepository)">
            <summary>
            Method to set the coordinate system repository class
            </summary>
            <param name="coordinateSystemRepository">The coordinate system repository class</param>
            <returns>A reference to this session</returns>
        </member>
        <member name="M:SharpMap.Session.ReadConfiguration">
            <summary>
            Method to read the configuration
            </summary>
            <returns>A reference to this session</returns>
        </member>
        <member name="T:SharpMap.Styles.GroupStyle">
            <summary>
            GroupStyle is a holder where several styles can be applied in order
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GroupStyle.Item(System.Int32)">
            <summary>
            Indexer to the <see cref="T:SharpMap.Styles.VectorStyle"/>s
            </summary>
            <param name="idx">The index of the <see cref="T:SharpMap.Styles.VectorStyle"/></param>
            <returns>A <see cref="T:SharpMap.Styles.VectorStyle"/></returns>
        </member>
        <member name="P:SharpMap.Styles.GroupStyle.Count">
            <summary>
            Gets a value indicating the number of <see cref="T:SharpMap.Styles.VectorStyle"/>s contained in this instance.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.GroupStyle.AddStyle(SharpMap.Styles.VectorStyle)">
            <summary>
            Method to add a <see cref="T:SharpMap.Styles.VectorStyle"/>
            </summary>
            <param name="style"></param>
        </member>
        <member name="T:SharpMap.Styles.IStyle">
            <summary>
            Defines an interface for defining layer styles
            </summary>
            <remarks>
            Implementation should 
            <list type="Bullet">
            <item>be treated as immutable once assigned to a <see cref="T:SharpMap.Layers.Layer"/>.</item>
            <item>consider also implementing <see cref="T:System.ICloneable"/> and clone all graphic objects.</item>
            </list>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.IStyle.MinVisible">
            <summary>
            Gets or sets the minimum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.MaxVisible">
            <summary>
            Gets or sets the maximum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.VisibilityUnits">
            <summary>
            Gets or Sets what level-reference the Min/Max values are defined in
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.Enabled">
            <summary>
            Gets or sets whether objects in this style is rendered or not
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle">
            <summary>
            Defines a style used for rendering labels
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum">
            <summary>
            Label text alignment
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Left">
            <summary>
            Left oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Right">
            <summary>
            Right oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Center">
            <summary>
            Centered
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum">
            <summary>
            Label text alignment
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum.Bottom">
            <summary>
            Left oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum.Top">
            <summary>
            Right oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum.Middle">
            <summary>
            Centered
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.IsTextOnPath">
            <summary>
            get or set label on path
            </summary>
        </member>
        <member name="M:SharpMap.Styles.LabelStyle.#ctor">
            <summary>
            Initializes a new LabelStyle
            </summary>
        </member>
        <member name="M:SharpMap.Styles.LabelStyle.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Styles.LabelStyle.Clone">
            <summary>
            Method to create a deep copy of this <see cref="T:SharpMap.Styles.LabelStyle"/>
            </summary>
            <returns>A LabelStyle resembling this instance.</returns>
        </member>
        <member name="M:SharpMap.Styles.LabelStyle.GetStringFormat">
            <summary>
            Function to get a <see cref="T:System.Drawing.StringFormat"/> with <see cref="P:System.Drawing.StringFormat.Alignment"/> and <see cref="P:System.Drawing.StringFormat.LineAlignment"/> properties according to 
            <see cref="P:SharpMap.Styles.LabelStyle.HorizontalAlignment"/> and <see cref="P:SharpMap.Styles.LabelStyle.VerticalAlignment"/>
            </summary>
            <returns>A <see cref="T:System.Drawing.StringFormat"/></returns>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Font">
            <summary>
            Label Font
            </summary>
        </member>
        <member name="M:SharpMap.Styles.LabelStyle.GetFontForGraphics(System.Drawing.Graphics)">
            <summary>
            Method to create a font that ca
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.ForeColor">
            <summary>
            Font color
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.BackColor">
            <summary>
            The background color of the label. Set to transparent brush or null if background isn't needed
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Halo">
            <summary>
            Creates a halo around the text
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Offset">
            <summary>
            Specifies relative position of labels with respect to objects label point
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionDetection">
            <summary>
            Gets or sets whether Collision Detection is enabled for the labels.
            If set to true, label collision will be tested.
            </summary>
            <remarks>Just setting this property in a <see cref="M:SharpMap.Rendering.Thematics.ITheme.GetStyle(SharpMap.Data.FeatureDataRow)"/> method does not lead to the desired result. You must set it to for the whole layer using the default Style.</remarks>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionBuffer">
            <summary>
            Distance around label where collision buffer is active
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.HorizontalAlignment">
            <summary>
            The horizontal alignment of the text in relation to the labelpoint
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.VerticalAlignment">
            <summary>
            The horizontal alignment of the text in relation to the labelpoint
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Rotation">
            <summary>
            The Rotation of the text
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.IgnoreLength">
            <summary>
            Gets or sets if length of linestring should be ignored
            </summary>
        </member>
        <member name="T:SharpMap.Styles.SldConverter">
            <summary>
            A conversion class to get a <see cref="T:SharpMap.Styles.VectorStyle"/> from an Styled Layer Descriptor (v1.0) document
            </summary>
        </member>
        <member name="M:SharpMap.Styles.SldConverter.ParseFeatureStyleFromXmlText(System.String)">
            <summary>
            Method to parse the vector styles from a xml text
            </summary>
            <param name="xmlText">The xml text</param>
            <returns>A dictionary of vector styles</returns>
        </member>
        <member name="M:SharpMap.Styles.SldConverter.ParseFeatureStyleFromFile(System.String)">
            <summary>
            Method to parse the vector styles from a xml file
            </summary>
            <param name="filePath">The file path of the xml file</param>
            <returns>A dictionary of vector styles</returns>
        </member>
        <member name="M:SharpMap.Styles.SldConverter.ParseFeatureStyle(System.Xml.XmlDocument)">
            <summary>
            Method to parse the vector styles from a <see cref="T:System.Xml.XmlDocument"/>
            </summary>
            <param name="doc">The xml document</param>
            <returns>A dictionary of vector styles</returns>
        </member>
        <member name="T:SharpMap.Styles.Style">
            <summary>
            Defines a style used for for defining layer styles
            </summary>
        </member>
        <member name="M:SharpMap.Styles.Style.#ctor">
            <summary>
            Initializes a style as sets Min=0, Max=double.MaxValue and Visible=true
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.MinVisible">
            <summary>
            Gets or sets the minimum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.MaxVisible">
            <summary>
            Gets or sets the maximum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.VisibilityUnits">
            <summary>
            Gets or sets what units the min/max visible properties are defined in
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.Enabled">
            <summary>
            Specified whether style is rendered or not
            </summary>
        </member>
        <member name="T:SharpMap.Styles.VectorStyle">
            <summary>
            Defines a style used for rendering vector data
            </summary>
        </member>
        <member name="F:SharpMap.Styles.VectorStyle.DefaultSymbol">
            <summary>
            Default Symbol
            </summary>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.#ctor">
            <summary>
            Initializes a new VectorStyle and sets the default values
            </summary>
            <remarks>
            Default style values when initialized:<br/>
            *LineStyle: 1px solid black<br/>
            *FillStyle: Solid black<br/>
            *Outline: No Outline
            *Symbol: null-reference
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Line">
            <summary>
            Linestyle for line geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Outline">
            <summary>
            Outline style for line and polygon geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.EnableOutline">
            <summary>
            Specified whether the objects are rendered with or without outlining
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Fill">
            <summary>
            Fillstyle for Polygon geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.PointColor">
            <summary>
            Fillstyle for Point geometries (will be used if no Symbol is set)
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.PointSize">
            <summary>
            Size for Point geometries (if drawn with PointColor), will not have affect for Points drawn with Symbol
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Symbol">
            <summary>
            Symbol used for rendering points
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.SymbolScale">
            <summary>
            Scale of the symbol (defaults to 1)
            </summary>
            <remarks>
            Setting the symbolscale to '2.0' doubles the size of the symbol, where a scale of 0.5 makes the scale half the size of the original image
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.SymbolOffset">
            <summary>
            Gets or sets the offset in pixels of the symbol.
            </summary>
            <remarks>
            The symbol offset is scaled with the <see cref="P:SharpMap.Styles.VectorStyle.SymbolScale"/> property and refers to the offset af <see cref="P:SharpMap.Styles.VectorStyle.SymbolScale"/>=1.0.
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.SymbolRotation">
            <summary>
            Gets or sets the rotation of the symbol in degrees (clockwise is positive)
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.LineOffset">
            <summary>
            Gets or sets the offset (in pixel units) by which line will be offset from its original posision (perpendicular).
            </summary>
            <remarks>
            A positive value offsets the line to the right
            A negative value offsets to the left
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.PointSymbolizer">
            <summary>
            Gets or sets the symbolizer for puntal geometries
            </summary>
            <remarks>Setting this property will lead to ignorance towards all <see cref="T:GeoAPI.Geometries.IPuntal"/> related style settings</remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.LineSymbolizer">
            <summary>
            Gets or sets the symbolizer for lineal geometries
            </summary>
            <remarks>Setting this property will lead to ignorance towards all <see cref="T:GeoAPI.Geometries.ILineal"/> related style settings</remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.PolygonSymbolizer">
            <summary>
            Gets or sets the symbolizer for polygonal geometries
            </summary>
            <remarks>Setting this property will lead to ignorance towards all <see cref="T:GeoAPI.Geometries.IPolygonal"/> related style settings</remarks>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.ReleaseManagedResources">
            <summary>
            Releases managed resources
            </summary>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.CreateRandomStyle">
            <summary>
            Utility function to create a random style
            </summary>
            <returns>A vector style</returns>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.CreateRandomPuntalStyle">
            <summary>
            Factory method to create a random puntal style
            </summary>
            <returns>A puntal vector style</returns>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.CreateRandomLinealStyle">
            <summary>
            Factory method to create a random puntal style
            </summary>
            <returns>A puntal vector style</returns>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.CreateRandomPolygonalStyle">
            <summary>
            Factory method to create a random puntal style
            </summary>
            <returns>A puntal vector style</returns>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.ClearPuntalStyle(SharpMap.Styles.VectorStyle)">
            <summary>
            Utility function to modify <paramref name="style"/> in order to prevent drawing of any puntal components
            </summary>
            <param name="style">The style to modify</param>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.ClearLinealStyle(SharpMap.Styles.VectorStyle)">
            <summary>
            Utility function to modify <paramref name="style"/> in order to prevent drawing of any puntal components
            </summary>
            <param name="style">The style to modify</param>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.ClearPolygonalStyle(SharpMap.Styles.VectorStyle)">
            <summary>
            Utility function to modify <paramref name="style"/> in order to prevent drawing of any puntal components
            </summary>
            <param name="style">The style to modify</param>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.RandomizePuntalStyle(SharpMap.Styles.VectorStyle)">
            <summary>
            Utility function to randomize puntal settings
            </summary>
            <param name="res">The style to randomize</param>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.RandomizeLinealStyle(SharpMap.Styles.VectorStyle)">
            <summary>
            Utility function to randomize lineal settings
            </summary>
            <param name="res">The style to randomize</param>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.RandomizePolygonalStyle(SharpMap.Styles.VectorStyle)">
            <summary>
            Utility function to randomize polygonal settings
            </summary>
            <param name="res"></param>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.CreateRandomKnownColor(System.Int32)">
            <summary>
            Factory method to create a random color from the <see cref="T:SharpMap.Drawing.KnownColor"/>s enumeration
            </summary>
            <param name="alpha">An optional alpha value.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Styles.VisibilityUnits">
            <summary>
            Enumerator of available VisibilityUnits
            </summary>
        </member>
        <member name="F:SharpMap.Styles.VisibilityUnits.ZoomLevel">
            <summary>
            Map ZoomLevel - varies with aspect ratio of viewport
            </summary>
        </member>
        <member name="F:SharpMap.Styles.VisibilityUnits.Scale">
            <summary>
            Map Scale - does not vary with aspect ratio of the viewport
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.GeoSpatialMath">
            <summary>
            A
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.DegToRad">
            <summary>
            Conversion factor degrees to radians
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.MetersPerInch">
            <summary>
            Meters per inch
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.MetersPerMile">
            <summary>
            Meters per mile
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.MilesPerDegreeAtEquator">
            <summary>
            Miles per degree at equator
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.MetersPerDegreeAtEquator">
            <summary>
            Meters per degree at equator
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.WebMercatorSrid">
            <summary>
            Web Mercator SRID constant
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.WebMercatorRadius">
            <summary>
            Web Mercator SRID constant
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.WebMercatorEnv">
            <summary>
            Web Mercator Domain as Envelope
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.GeoSpatialMath.GreatCircleDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the distance between 2 points on the great circle
            </summary>
            <param name="lon1">The first longitue value</param>
            <param name="lat1">The latitude value for <paramref name="lon1"/></param>
            <param name="lon2">The second longitue value</param>
            <param name="lat2">The latitude value for <paramref name="lon2"/></param>
            <returns>The distance in meters</returns>
        </member>
        <member name="M:SharpMap.Utilities.GeoSpatialMath.GreatCircleDistance(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the great circle distance between 2 points (ie the shortest distance on the sphere)
            </summary>
            <param name="lon1">The first longitue value</param>
            <param name="lon2">The second longitue value</param>
            <param name="lat">The common latitued value for <paramref name="lon1"/> and <paramref name="lon2"/></param>
            <returns>The distance in meters</returns>
        </member>
        <member name="M:SharpMap.Utilities.GeoSpatialMath.GreatCircleDistanceReflex(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the great circle distance between 2 points without constraining longitudinal REFLEX angle 0-180deg (ie supports angles > 180 deg).
            Typically used to support scale calculations on a global projection from longitude -180 to +180 (or even greater when zoomed out), 
            this will NOT be the shortest distance on the sphere when longitudinal angle > 180 degrees.
            </summary>
            <param name="lon1">The first longitude value</param>
            <param name="lon2">The second longitude value</param>
            <param name="lat">The common latitude value for <paramref name="lon1"/> and <paramref name="lon2"/></param>
            <returns>The distance in meters from LHS to RHS of a global projection. 
            This will NOT the shortest distance on sphere for longitudinal REFLEX (> 180deg) angles</returns>
        </member>
        <member name="M:SharpMap.Utilities.GeoSpatialMath.DiffLongitude(System.Double,System.Double)">
            <summary>
            Calculate the difference between two longitudal values constrained 0 - 180 deg
            </summary>
            <param name="lon1">The first longitue value in degrees</param>
            <param name="lon2">The second longitue value in degrees</param>
            <returns>The distance in degrees</returns>
        </member>
        <member name="T:SharpMap.Utilities.Indexing.BinaryTree`2">
            <summary>
            The BinaryTree class are used for indexing values to enhance the speed of queries
            </summary>
            <typeparam name="T">Value type to be indexed</typeparam>
            <typeparam name="U">Value ID type</typeparam>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.#ctor">
            <summary>
            Initializes a new instance of the generic binary tree.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Add(SharpMap.Utilities.Indexing.BinaryTree{`0,`1}.ItemValue[])">
            <summary>
            Inserts a value into the tree
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Add(SharpMap.Utilities.Indexing.BinaryTree{`0,`1}.ItemValue)">
            <summary>
            Inserts a value into the tree
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Add(SharpMap.Utilities.Indexing.Node{`0,`1},SharpMap.Utilities.Indexing.Node{`0,`1})">
            <summary>
            Inserts a node into the tree
            </summary>
            <param name="newNode"></param>
            <param name="root"></param>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.TraceTree">
            <summary>
            This is the classic computer science binary tree iteration 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Indexing.BinaryTree`2.InOrder">
            <summary>
            Gets an enumerator for all the values in the tree in ascending order
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Between(`0,`0)">
            <summary>
            Gets and enumerator for the values between min and max in ascending order
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns>Enumerator</returns>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.StartsWith(System.String)">
            <summary>
            Enumerates the objects whose string-representation starts with 'str'
            </summary>
            <param name="str"></param>
            <returns>Enumerator</returns>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Find(`0)">
            <summary>
            Enumerates all objects with the specified value
            </summary>
            <param name="value">Value to search for</param>
            <returns>Enumerator</returns>
        </member>
        <member name="T:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue">
            <summary>
            A value in a <see cref="T:SharpMap.Utilities.Indexing.BinaryTree`2"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue.Id">
            <summary>
            Identifier for the value
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue.#ctor(`0,`1)">
            <summary>
            Creates an instance of an item in a <see cref="T:SharpMap.Utilities.Indexing.BinaryTree`2"/>.
            </summary>
            <param name="value">Value</param>
            <param name="id">Identifier for the value</param>
        </member>
        <member name="T:SharpMap.Utilities.Indexing.ISpatialIndexItem`1">
            <summary>
            Interface for items stored in a spatial index
            </summary>
            <typeparam name="TOid">The type of the object identifier</typeparam>
        </member>
        <member name="P:SharpMap.Utilities.Indexing.ISpatialIndexItem`1.ID">
            <summary>
            Gets the object's identifier
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Indexing.ISpatialIndexItem`1.Box">
            <summary>
            Gets the spatial extent of the object
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Indexing.ISpatialIndex`1">
            <summary>
            Interface for a spatial index
            </summary>
            <typeparam name="TOid">The type of the object identifier</typeparam>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.ISpatialIndex`1.Search(GeoAPI.Geometries.Envelope)">
            <summary>
            Method to search for 
            </summary>
            <param name="extent">The extent to search</param>
            <returns>A collection of items</returns>
        </member>
        <member name="P:SharpMap.Utilities.Indexing.ISpatialIndex`1.Box">
            <summary>
            Gets a value indicating the area covered by this spatial index
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.ISpatialIndex`1.SaveIndex(System.String)">
            <summary>
            Method to save the spatial index to disk
            </summary>
            <param name="filename">The filename</param>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.ISpatialIndex`1.DeleteIndex(System.String)">
            <summary>
            Method to delete the spatial index from the disk
            </summary>
            <param name="filename">The filename</param>
        </member>
        <member name="T:SharpMap.Utilities.Indexing.ISpatialIndexFactory`1">
            <summary>
            Interface for all classes that can create a spatial index
            </summary>
            <typeparam name="TOid">The type of the object identifier</typeparam>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.ISpatialIndexFactory`1.Create(`0,GeoAPI.Geometries.Envelope)">
            <summary>
            Method to create a spatial index item
            </summary>
            <param name="oid">The object's identifier</param>
            <param name="box">The extent</param>
            <returns>A new spatial index item</returns>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.ISpatialIndexFactory`1.Create(GeoAPI.Geometries.Envelope,System.Int32,System.Collections.Generic.IEnumerable{SharpMap.Utilities.Indexing.ISpatialIndexItem{`0}})">
            <summary>
            Method to create a spatial index
            </summary>
            <param name="extent">The extent covered by the spatial index</param>
            <param name="expectedNumberOfEntries"></param>
            <param name="entries">The entries</param>
            <returns>A spatial index</returns>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.ISpatialIndexFactory`1.Load(System.String)">
            <summary>
            Method to create a spatial index by loading it from file
            </summary>
            <param name="fileName">The filename of the file, the spatial index 
            is associated with. The implementation has to take care of the 
            renaming strategy, e.g. change the extension.</param>
            <returns>The loaded index</returns>
        </member>
        <member name="P:SharpMap.Utilities.Indexing.ISpatialIndexFactory`1.Extension">
            <summary>
            Gets a value indicating the file extension
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Indexing.AllFeaturesTree">
            <summary>
            A pseudo tree.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.Heuristic">
            <summary>
            Heuristics used for tree generation
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.maxdepth">
            <summary>
            Maximum tree depth
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.minerror">
            <summary>
            Minimum Error metric – the volume of a box + a unit cube.
            The unit cube in the metric prevents big boxes that happen to be flat having a zero result and muddling things up.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.mintricnt">
            <summary>
            Minimum object count at node
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.tartricnt">
            <summary>
            Target object count at node
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.QuadTree">
            <summary>
            Constructs a Quad-tree node from a object list and creates its children recursively
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.NodeCount">
            <summary>
            Gets the number of Nodes
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.IsPrunable">
            <summary>
            Gets a value indicating whether this branch is prunable
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree._depth">
            <summary>
            Nodes depth in a tree
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree._ID">
            <summary>
            Node ID
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.#ctor(System.Collections.Generic.List{SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects},System.UInt32,SharpMap.Utilities.SpatialIndexing.Heuristic)">
            <summary>
            Creates a node and either splits the objects recursively into sub-nodes, or stores them at the node depending on the heuristics.
            Tree is built top-&gt;down
            </summary>
            <param name="objList">Geometries to index</param>
            <param name="depth">Current depth of tree</param>
            <param name="heurdata">Heuristics data</param>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree.SplitRatio">
            <summary>
            This means areas overlap by 5%
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.AddNode(SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects,SharpMap.Utilities.SpatialIndexing.Heuristic)">
            <summary>
            Adds a new <see cref="T:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects"/> to this node.
            </summary>
            <param name="o">The boxed object</param>
            <param name="h">The child node creation heuristic</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.#ctor">
            <summary>
            This instantiator is used internally for loading a tree from a file
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.#ctor(GeoAPI.Geometries.Envelope,System.UInt32)">
            <summary>
            This instantiator is used internally for linear creation of quadtrees
            </summary>
            <param name="box">The initial bounding box</param>
            <param name="depth">The depth</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.FromFile(System.String)">
            <summary>
            Loads a quadtree from a file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ReadNode(System.UInt32,System.IO.BinaryReader)">
            <summary>
            Reads a node from a stream recursively
            </summary>
            <param name="depth">Current depth</param>
            <param name="br">Binary reader reference</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.SaveIndex(System.String)">
            <summary>
            Saves the Quadtree to a file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.DeleteIndex(System.String)">
            <summary>
            Method to delete the spatial index from the disk
            </summary>
            <param name="filename">The filename</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.SaveNode(SharpMap.Utilities.SpatialIndexing.QuadTree,System.IO.BinaryWriter)">
            <summary>
            Saves a node to a stream recursively
            </summary>
            <param name="node">Node to save</param>
            <param name="sw">Reference to BinaryWriter</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.CreateRootNode(GeoAPI.Geometries.Envelope)">
            <summary>
            Creates a quadtree root node.
            </summary>
            <param name="b">The root bounding box</param>
            <returns>The root node for the quadtree</returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ObsoleteFileFormatException.#ctor(System.String)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.IsLeaf">
            <summary>
            Determines whether the node is a leaf (if data is stored at the node, we assume the node is a leaf)
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Box">
            <summary>
            Gets/sets the Axis Aligned Bounding Box
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Child0">
            <summary>
            Gets/sets the left child node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Child1">
            <summary>
            Gets/sets the right child node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Depth">
            <summary>
            Gets the depth of the current node in the tree
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.Dispose">
            <summary>
            Disposes the node
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ErrorMetric(GeoAPI.Geometries.Envelope)">
            <summary>
            Calculate the floating point error metric 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.Search(GeoAPI.Geometries.Envelope)">
            <summary>
            Searches the tree and looks for intersections with the boundingbox 'bbox'
            </summary>
            <param name="box">Boundingbox to intersect with</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.IntersectTreeRecursive(GeoAPI.Geometries.Envelope,SharpMap.Utilities.SpatialIndexing.QuadTree,System.Collections.Generic.ICollection{System.UInt32})">
            <summary>
            Recursive function that traverses the tree and looks for intersections with a boundingbox
            </summary>
            <param name="box">Boundingbox to intersect with</param>
            <param name="node">Node to search from</param>
            <param name="list">List of found intersections</param>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects">
            <summary>
            BoundingBox and Feature ID structure used for storing in the quadtree 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects.Box">
            <summary>
            Boundingbox
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects.ID">
            <summary>
            Feature ID
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.QuadTreeFactory">
            <summary>
            A factory to create <see cref="T:SharpMap.Utilities.SpatialIndexing.QuadTree"/> spatial indices.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTreeFactory.SpatialIndexCreationOption">
            <summary>
            Gets or sets the default spatial index creation option
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTreeFactory.Create(System.UInt32,GeoAPI.Geometries.Envelope)">
            <summary>
            Method to create a spatial index item
            </summary>
            <param name="oid">The object's identifier</param>
            <param name="box">The extent</param>
            <returns>A new spatial index item</returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTreeFactory.Create(GeoAPI.Geometries.Envelope,System.Int32,System.Collections.Generic.IEnumerable{SharpMap.Utilities.Indexing.ISpatialIndexItem{System.UInt32}})">
            <summary>
            Method to create a spatial index
            </summary>
            <param name="extent">The extent covered by the spatial index</param>
            <param name="expectedNumberOfEntries"></param>
            <param name="entries">The entries</param>
            <returns>A spatial index</returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTreeFactory.Load(System.String)">
            <summary>
            Method to create a spatial index by loading it from file
            </summary>
            <param name="fileName">The filename of the spatial index</param>
            <returns>The loaded index</returns>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTreeFactory.Extension">
            <summary>
            Gets a value indicating the extension of the index file
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTreeFactory.CreateSpatialIndexLinear(GeoAPI.Geometries.Envelope,System.Int32,System.Collections.Generic.IEnumerable{SharpMap.Utilities.Indexing.ISpatialIndexItem{System.UInt32}})">
            <summary>
            Generates a spatial index for a specified shape file.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTreeFactory.CreateSpatialIndexRecursive(GeoAPI.Geometries.Envelope,System.Int32,System.Collections.Generic.IEnumerable{SharpMap.Utilities.Indexing.ISpatialIndexItem{System.UInt32}})">
            <summary>
            Generates a spatial index for a specified shape file.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.LeastSquaresTransform">
            <summary>
            Calculates Affine and Helmert transformation using Least-Squares Regression of input and output points
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.#ctor">
            <summary>
            Initialize Least Squares transformations
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.AddInputOutputPoint(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Adds an input and output value pair to the collection
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.RemoveInputOutputPointAt(System.Int32)">
            <summary>
            Removes input and output value pair at the specified index
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetInputPoint(System.Int32)">
            <summary>
            Gets the input point value at the specified index
            </summary>
            <param name="i">index</param>
            <returns>Input point value a index 'i'</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.SetInputPointAt(GeoAPI.Geometries.Coordinate,System.Int32)">
            <summary>
            Sets the input point value at the specified index
            </summary>
            <param name="p">Point value</param>
            <param name="i">index</param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetOutputPoint(System.Int32)">
            <summary>
            Gets the output point value at the specified index
            </summary>
            <param name="i">index</param>
            <returns>Output point value a index 'i'</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.SetOutputPointAt(GeoAPI.Geometries.Coordinate,System.Int32)">
            <summary>
            Sets the output point value at the specified index
            </summary>
            <param name="p">Point value</param>
            <param name="i">index</param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetAffineTransformation">
            <summary>
            Return an array with the six affine transformation parameters {a,b,c,d,e,f} and the sum of the squares of the residuals (s0)
            </summary>
            <remarks>
            a,b defines scale vector 1 of coordinate system, d,e scale vector 2. c,f defines offset.
            <para>
            Converting from input (X,Y) to output coordinate system (X',Y') is done by:
            X' = a*X + b*Y + c, Y' = d*X + e*Y + f
            </para>
            <para>
            Transformation based on Mikhail "Introduction to Modern Photogrammetry" p. 399-300.
            Extended to arbitrary number of measurements by M. Nielsen
            </para>
            </remarks>
            <returns>Array with the six transformation parameters and sum of squared residuals:  a,b,c,d,e,f,s0</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetHelmertTransformation">
            <summary>
            Calculates the four helmert transformation parameters {a,b,c,d} and the sum of the squares of the residuals (s0)
            </summary>
            <remarks>
            <para>
            a,b defines scale vector 1 of coordinate system, d,e scale vector 2.
            c,f defines offset.
            </para>
            <para>
            Converting from input (X,Y) to output coordinate system (X',Y') is done by:
            X' = a*X + b*Y + c, Y' = -b*X + a*Y + d
            </para>
            <para>This is a transformation initially based on the affine transformation but slightly simpler.</para>
            </remarks>
            <returns>Array with the four transformation parameters, and sum of squared residuals: a,b,c,d,s0</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates an n x m matrix of doubles
            </summary>
            <param name="n">width of matrix</param>
            <param name="m">height of matrix</param>
            <returns>n*m matrix</returns>
        </member>
        <member name="T:SharpMap.Utilities.LineOffset">
            <summary>
            Methods for calculating line offsets
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.LineOffset.OffsetPolyline(System.Drawing.PointF[],System.Single)">
             <summary>
             Offset a Linestring the given amount perpendicular to the line
             For example if a line should be drawn 10px to the right of its original position
            
             Positive offset offsets right
             Negative offset offsets left
             </summary>
             <param name="lineCoordinates">LineString</param>
             <param name="offset">offset amount</param>
             <returns>Array of coordinates for the offseted line</returns>
        </member>
        <member name="T:SharpMap.Utilities.Providers">
            <summary>
            Provider helper utilities
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Providers.GetProviders">
            <summary>
            Returns a list of available data providers in this assembly
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Providers.MyInterfaceFilter(System.Type,System.Object)">
            <summary>
            Filter method used for searching for objects in an assembly
            </summary>
            <param name="typeObj"></param>
            <param name="criteriaObj"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.ScaleCalculations">
            <summary>
            Functions for calculating Scales
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.ScaleCalculations.GetMapZoomFromScaleNonLatLong(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Calculates the Zoom-Level for a given Scale, DPI and MapWidth
            </summary>
            <param name="scale"></param>
            <param name="mapUnitFactor"></param>
            <param name="dpi"></param>
            <param name="mapSizeWidth"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.ScaleCalculations.CalculateScaleNonLatLong(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Calculate the Representative Fraction Scale for non Lat/Long map.
            </summary>
            <param name="mapWidthMeters">The current extent width of the Map</param>
            <param name="mapSizeWidth">The width of the display area</param>
            <param name="mapUnitFactor">MapUnitFactor is the factor the unit used on the map</param>
            <param name="dpi">DPI used to render the map</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.ScaleCalculations.CalculateScaleLatLong(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Calculate the Representative Fraction Scale for a Lat/Long map.
            </summary>
            <param name="lon1">LowerLeft Longitude</param>
            <param name="lon2">LowerRight Longitude</param>
            <param name="lat">LowerLeft Latitude</param>
            <param name="widthPage">The width of the display area</param>
            <param name="dpi">DPI used to render the map</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates">
            <summary>
            A class containing several serialization surrogate classes
            </summary>
            <summary>
            Helper class for serializing System.Drawing.Pen and System.Drawing.Brush
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.BrushSurrogate">
            <summary>
            A serialization surrogate for <see cref="T:System.Drawing.Brush"/> brushes.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.BrushSurrogate.System#Runtime#Serialization#ISerializationSurrogate#GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.BrushSurrogate.System#Runtime#Serialization#ISerializationSurrogate#SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
            <param name="selector">A surrogate selector</param>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.SolidBrushSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.SolidBrush
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.SolidBrushSurrogate.SolidBrushRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.SolidBrushSurrogate.System#Runtime#Serialization#ISerializationSurrogate#GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.SolidBrushSurrogate.System#Runtime#Serialization#ISerializationSurrogate#SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.TextureBrushSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.TextureBrush
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.TextureBrushSurrogate.TextureBrushRef">
            <summary>
            TextureBrush-Stub class for serialization
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.TextureBrushSurrogate.TextureBrushRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.TextureBrushSurrogate.System#Runtime#Serialization#ISerializationSurrogate#GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.TextureBrushSurrogate.System#Runtime#Serialization#ISerializationSurrogate#SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.HatchBrushSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.TextureBrush
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.HatchBrushSurrogate.HatchBrushRef">
            <summary>
            HatchBrush-Stub class for serialization
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.HatchBrushSurrogate.HatchBrushRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.HatchBrushSurrogate.System#Runtime#Serialization#ISerializationSurrogate#GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.HatchBrushSurrogate.System#Runtime#Serialization#ISerializationSurrogate#SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.LinearGradientBrushSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.TextureBrush
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.LinearGradientBrushSurrogate.LinearGradientBrushRef">
            <summary>
            TextureBrush-Stub class for serialization
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.LinearGradientBrushSurrogate.LinearGradientBrushRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.LinearGradientBrushSurrogate.System#Runtime#Serialization#ISerializationSurrogate#GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.LinearGradientBrushSurrogate.System#Runtime#Serialization#ISerializationSurrogate#SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.GetSurrogateSelectors">
            <summary>
            Gets the surrogate selecteds for System.Drawing.Pen and System.Drawing.Brush
            </summary>
            <returns>SurrogateSelector</returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.ImageFormatSurrogate">
            <summary>
            Surrogate class to serialize <see cref="T:System.Drawing.Imaging.ImageFormat"/>
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.ImageFormatSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.StringFormatSurrogate">
            <summary>
            Surrogate class to serialize <see cref="T:System.Drawing.StringFormat"/>
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.StringFormatSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.PenSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.Pen
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.PenSurrogate.PenRef">
            <summary>
            Serialization utility class
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.PenSurrogate.PenRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.PenSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.PenSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.AdjustableArrowCapSurrogate">
            <summary>
            Surrogate class used to serialize <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap"/>
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.AdjustableArrowCapSurrogate.AdjustableArrowCapRef">
            <summary>
            Object reference class for <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap"/>
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.AdjustableArrowCapSurrogate.AdjustableArrowCapRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.CustomLineCapSurrogate">
            <summary>
            Surrogate class used to serialize <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> objects
            </summary>
            <remarks>Unfortunately this does not work, since the</remarks>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.CustomLineCapSurrogate.CustomLineCapRef">
            <summary>
            Serialization utility class
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.CustomLineCapSurrogate.CustomLineCapRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.MatrixSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.Drawing2D.Matrix
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.MatrixSurrogate.MatrixRef">
            <summary>
            Matrix-Stub class
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.MatrixSurrogate.MatrixRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The streaming information</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.MatrixSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.MatrixSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.BlendSurrogate">
            <summary>
            Surrogate class for <see cref="T:System.Drawing.Drawing2D.Blend"/>
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.ColorBlendSurrogate">
            <summary>
            Surrogate class for <see cref="T:System.Drawing.Drawing2D.ColorBlend"/>
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.GraphicsPathSurrogate">
            <summary>
            Serialization surrogate class for <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.GraphicsPathSurrogate.GraphicsPathRef">
            <summary>
            Object reference class for <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.GraphicsPathSurrogate.GraphicsPathRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The streaming information</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.ColorMapSurrogate">
            <summary>
            Surrogate class for <see cref="T:System.Drawing.Imaging.ColorMap"/>
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.ColorMatrixSurrogate">
            <summary>
            Surrogate class for <see cref="T:System.Drawing.Imaging.ColorMap"/>
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Transform">
            <summary>
            Class for transforming between world and image coordinate
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Transform.WorldToMap(GeoAPI.Geometries.Coordinate[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Am abbreviated transform from world coordinate system (WCS) to image coordinates
            for use ONLY when MapTransformRotation == 0
            </summary>
            <param name="coordinates">Coordinate array in WCS</param>
            <param name="worldLeft">Minimum X value of non-rotated viewport in world coordinates</param>
            <param name="worldTop">Maximum Y value of non-rotated viewport in world coordinates</param>
            <param name="pixelWidth">Apparent width of pixel in world units</param>
            <param name="pixelHeight">Apparent height of pixel in world units</param>
            <returns>Point array in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Utilities.Transform.WorldToMap(GeoAPI.Geometries.Coordinate[],NetTopologySuite.Geometries.Utilities.AffineTransformation)">
            <summary>
            Full affine transformation from world coordinate system (WCS) to image coordinates taking into 
            account Zoom, Pixel Width/Height, and MapTransformRotation. 
            </summary>
            <param name="coordinates">Coordinate array in WCS</param>
            <param name="matrix">Appropriate affine transformation as defined by <see cref="M:SharpMap.Utilities.Transform.WorldToMapMatrix(GeoAPI.Geometries.Coordinate,System.Double,System.Double,System.Single,System.Drawing.Size,System.Boolean)"/></param>
            <returns>Point array in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Utilities.Transform.WorldToMapMatrix(GeoAPI.Geometries.Coordinate,System.Double,System.Double,System.Single,System.Drawing.Size,System.Boolean)">
            <summary>
            Affine transformation defining complete transformation from world coordinate system (WCS) to image coordinates taking into 
            account Zoom, Pixel Width/Height, and MapTransformRotation. Additionally, if <paramref name="careAboutTransform"/> = false,
            the viewport rotation will be reverted at the end of the transformation, to be re-applied by Graphics object when rendering. 
            </summary>
            <param name="worldCenter">Map center in WCS</param>
            <param name="pixelWidth">Width of pixel in world units</param>
            <param name="pixelHeight">Height of pixel in world units</param>
            <param name="mapTransformRotation">map rotation in degrees</param>
            <param name="imageSize">Map Size when rendered</param>
            <param name="careAboutTransform">True for coordinate calculations, False if Graphics object will apply MapTransform</param>
            <returns>Affine Transformation</returns>
        </member>
        <member name="M:SharpMap.Utilities.Transform.MapToWorld(System.Drawing.PointF[],SharpMap.Map)">
            <summary>
            Am abbreviated transform from image coordinates to world coordinate system (WCS) 
            for use ONLY when MapTransformRotation == 0
            </summary>
            <param name="points">Point array in image coordinates</param>
            <param name="map">Map defining current view properties</param>
        </member>
        <member name="M:SharpMap.Utilities.Transform.MapToWorld(System.Drawing.PointF[],GeoAPI.Geometries.Coordinate,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Am abbreviated transform from image coordinates to world coordinate system (WCS) 
            for use ONLY when MapTransformRotation == 0
            </summary>
            <param name="points">Point array in image coordinates</param>
            <param name="worldCenter">Map center in WCS</param>
            <param name="mapZoom">current map zoom (width) in world units</param>
            <param name="mapHeight">current map height in world units</param>
            <param name="pixelWidth">Apparent width of pixel in world units</param>
            <param name="pixelHeight">Apparent height of pixel in world units</param>
        </member>
        <member name="M:SharpMap.Utilities.Transform.WorldToMap(GeoAPI.Geometries.Coordinate,SharpMap.Map)">
            <summary>
            Transforms from world coordinate system (WCS) to image coordinates
            NOTE: This method is only applicable when MapTransformRotation = 0.
            </summary>
            <param name="p">Point in WCS</param>
            <param name="map">Map reference</param>
            <returns>Point in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Utilities.Transform.MapToWorld(System.Drawing.PointF,SharpMap.Map)">
            <summary>
            Transforms from image coordinates to world coordinate system (WCS).
            NOTE: This method is only applicable when MapTransformRotation = 0.
            </summary>
            <param name="p">Point in image coordinate system</param>
            <param name="map">Map reference</param>
            <returns>Point in WCS</returns>
        </member>
        <member name="M:SharpMap.Utilities.Transform.MapToWorld(System.Drawing.PointF,SharpMap.MapViewport)">
            <summary>
            Transforms from image coordinates to world coordinate system (WCS).
            NOTE: This method is only applicable when MapTransformRotation = 0.
            </summary>
            <param name="p">Point in image coordinate system</param>
            <param name="map">Map reference</param>
            <returns>Point in WCS</returns>
        </member>
        <member name="T:SharpMap.Utilities.Version">
            <summary>
            Version information helper class
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Version.GetCurrentVersion">
            <summary>
            Returns the current build version of SharpMap
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.GeometryTypeEnum">
            <summary>
            Web Feature Service geometry types
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.PointPropertyType">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.LineStringPropertyType">
            <summary>
            Linestring
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.CurvePropertyType">
            <summary>
            Curve
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.PolygonPropertyType">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.SurfacePropertyType">
            <summary>
            Surface
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.MultiPointPropertyType">
            <summary>
            Multipoint
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.MultiLineStringPropertyType">
            <summary>
            MultiLinestring
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.MultiCurvePropertyType">
            <summary>
            Multicurve
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.MultiPolygonPropertyType">
            <summary>
            MultiPolygon
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.MultiSurfacePropertyType">
            <summary>
            MultiSurface
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.GeometryTypeEnum.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo">
            <summary>
            Web Feature Type info class
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Elements">
            <summary>
            Gets the elements associated to the feature.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Name">
            <summary>
            Gets or sets the name of the featuretype.
            This argument is obligatory for data retrieving.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Prefix">
            <summary>
            Gets or sets the prefix of the featuretype and it's nested elements.
            This argument is obligatory for data retrieving, if the featuretype is declared with a 
            prefix in 'GetCapabilities'.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.FeatureTypeNamespace">
            <summary>
            Gets or sets the featuretype namespace.
            This argument is obligatory for data retrieving, except when using the quick geometries option.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.QualifiedName">
            <summary>
            Gets the qualified name of the featuretype (with namespace URI).
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.ServiceURI">
            <summary>
            Gets or sets the service URI for WFS 'GetFeature' request.
            This argument is obligatory for data retrieving.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Geometry">
            <summary>
            Gets or sets information about the geometry of the featuretype.
            Setting at least the geometry name is obligatory for data retrieving.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.BBox">
            <summary>
            Gets or sets the spatial extent of the featuretype - defined as minimum bounding rectangle. 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.SRID">
            <summary>
            Gets or sets the spatial reference ID
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.DecimalDel">
            <summary>
            Decimal separator (for gml:coordinates)
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Cs">
            <summary>
            Separator for coordinate values (for gml:coordinates)
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Ts">
            <summary>
            Tuple separator (for gml:coordinates)
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.#ctor(System.String,System.String,System.String,System.String,System.String,SharpMap.Utilities.Wfs.GeometryTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> class.
            </summary>
            <param name="serviceUri">
            The Web Feature Service URI
            </param>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="featureTypeNamespace">
            Use an empty string or 'null', if there is no namespace for the featuretype.
            You don't need to know the namespace of the feature type, if you use the quick geometries option.
            </param>
            <param name="featureType">
            The feature type name
            </param>
            <param name="geometryName">
            The geometry name is the property of the featuretype from which geometry information can be obtained from.
            Usually this property is called something like 'Shape' or 'geom'. It is absolutely necessary to give this parameter. 
            </param>
            <param name="geometryType">
            Specifying the geometry type helps to accelerate the rendering process.   
            </param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> class.
            </summary>
            <param name="serviceUri">
            The Web Feature Service URI
            </param>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="featureTypeNamespace">
            Use an empty string or 'null', if there is no namespace for the featuretype.
            You don't need to know the namespace of the feature type, if you use the quick geometries option.
            </param>
            <param name="featureType">
            The feature type name
            </param>
            <param name="geometryName">
            The geometry name is the property of the featuretype from which geometry information can be obtained from.
            Usually this property is called something like 'Shape' or 'geom'. It is absolutely necessary to give this parameter. 
            </param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> class.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.BoundingBox">
            <summary>
            The bounding box defines the spatial extent of a featuretype.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.BoundingBox._MaxLat">
            <summary>
            Maximum latitude
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.BoundingBox._MaxLong">
            <summary>
            Maximum longitude
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.BoundingBox._MinLat">
            <summary>
            Minimum latitude
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.BoundingBox._MinLong">
            <summary>
            Minimum longitude
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.GeometryInfo">
            <summary>
            The geometry info comprises the name of the geometry attribute (e.g. 'Shape" or 'geom')
            and the type of the featuretype's geometry.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.GeometryInfo._GeometryName">
            <summary>
            The name of the geometry, may be 'shape' or 'geom'
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.GeometryInfo._GeometryType">
            <summary>
            The type of the features's geometry
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.ElementInfo">
            <summary>
            The element info associated to the feature.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.ElementInfo.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="name">The name of the element</param>
            <param name="dataType">The data type of the element</param>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.ElementInfo.Name">
            <summary>
            Gets the name of the element
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.ElementInfo.DataType">
            <summary>
            Gets the type of the element
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.GeometryFactory">
            <summary>
            This class is the base class for geometry production.
            It provides some parsing routines for XML compliant to GML2/GML3.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Protected constructor for the abstract class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Protected constructor for the abstract class.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.GeometryFactory.AxisOrder">
            <summary>
            Gets or sets the axis order
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.createGeometries">
            <summary>
            Abstract method - overwritten by derived classes for producing instances
            derived from <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.createQuickGeometries(System.String)">
            <summary>
            This method parses quickly without paying attention to
            context validation, polygon boundaries and multi-geometries.
            This accelerates the geometry parsing process, 
            but in scarce cases can lead to errors. 
            </summary>
            <param name="geometryType">The geometry type (Point, LineString, Polygon, MultiPoint, MultiCurve, 
            MultiLineString (deprecated), MultiSurface, MultiPolygon (deprecated)</param>
            <returns>The created geometries</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.ParseCoordinates(System.Xml.XmlReader)">
            <summary>
            This method parses a coordinates or posList(from 'GetFeature' response). 
            </summary>
            <param name="reader">An XmlReader instance at the position of the coordinates to read</param>
            <returns>A point collection (the collected coordinates)</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.GetSubReaderOf(System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.String},SharpMap.Utilities.Wfs.IPathNode[])">
            <summary>
            This method retrieves an XmlReader within a specified context.
            </summary>
            <param name="reader">An XmlReader instance that is the origin of a created sub-reader</param>
            <param name="labels">A dictionary for recording label values. Pass 'null' to ignore searching for label values</param>
            <param name="pathNodes">A list of <see cref="T:SharpMap.Utilities.Wfs.IPathNode"/> instances defining the context of the retrieved reader</param>
            <returns>A sub-reader of the XmlReader given as argument</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.GetSubReaderOf(System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{SharpMap.Utilities.Wfs.IPathNode})">
            <summary>
            This method retrieves an XmlReader within a specified context.
            Moreover it collects label values before or after a geometry could be found.
            </summary>
            <param name="reader">An XmlReader instance that is the origin of a created sub-reader</param>
            <param name="labels">A dictionary for recording label values. Pass 'null' to ignore searching for label values</param>
            <param name="pathNodes">A list of <see cref="T:SharpMap.Utilities.Wfs.IPathNode"/> instances defining the context of the retrieved reader</param>
            <returns>A sub-reader of the XmlReader given as argument</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.AddLabel(System.Collections.Generic.Dictionary{System.String,System.String},GeoAPI.Geometries.IGeometry)">
            <summary>
            This method adds labels to the collection.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.createReader(SharpMap.Utilities.Wfs.HttpClientUtil)">
            <summary>
            This method initializes the XmlReader member.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.initializePathNodes">
            <summary>
            This method initializes path nodes needed by the derived classes.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.initializeSeparators">
            <summary>
            This method initializes separator variables for parsing coordinates.
            From GML specification: Coordinates can be included in a single string, but there is no 
            facility for validating string content. The value of the 'cs' attribute 
            is the separator for coordinate values, and the value of the 'ts' 
            attribute gives the tuple separator (a single space by default); the 
            default values may be changed to reflect local usage.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.Dispose">
            <summary>
            This method closes the XmlReader member and the used <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PointFactory">
            <summary>
            This class produces instances of type <see cref="T:GeoAPI.Geometries.IPoint"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PointFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PointFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PointFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PointFactory"/> class.
            This constructor shall just be called from the MultiPoint factory. The feature node therefore is deactivated.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PointFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:GeoAPI.Geometries.IPoint"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.LineStringFactory">
            <summary>
            This class produces instances of type <see cref="T:GeoAPI.Geometries.ILineString"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.LineStringFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.LineStringFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.LineStringFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.LineStringFactory"/> class.
            This constructor shall just be called from the MultiLineString factory. The feature node therefore is deactivated.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.LineStringFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:GeoAPI.Geometries.ILineString"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PolygonFactory">
            <summary>
            This class produces instances of type <see cref="T:GeoAPI.Geometries.IPolygon"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PolygonFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PolygonFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PolygonFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PolygonFactory"/> class.
            This constructor shall just be called from the MultiPolygon factory. The feature node therefore is deactivated.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PolygonFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:GeoAPI.Geometries.IPolygon"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.MultiPointFactory">
            <summary>
            This class produces instances of type <see cref="T:GeoAPI.Geometries.IMultiPoint"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPointFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiPointFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPointFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiPointFactory"/> class.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPointFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:GeoAPI.Geometries.IMultiPoint"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.MultiLineStringFactory">
            <summary>
            This class produces objects of type <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiLineStringFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiLineStringFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiLineStringFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiLineStringFactory"/> class.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiLineStringFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.MultiPolygonFactory">
            <summary>
            This class produces instances of type <see cref="T:GeoAPI.Geometries.IMultiPolygon"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPolygonFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiPolygonFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPolygonFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiPolygonFactory"/> class.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPolygonFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:GeoAPI.Geometries.IMultiPolygon"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.UnspecifiedGeometryFactory_WFS1_0_0_GML2">
            <summary>
            This class must detect the geometry type of the queried layer.
            Therefore it works a bit slower than the other factories. Specify the geometry type manually,
            if it isn't specified in 'DescribeFeatureType'.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.UnspecifiedGeometryFactory_WFS1_0_0_GML2.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,System.Boolean,System.Boolean,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.UnspecifiedGeometryFactory_WFS1_0_0_GML2"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="multiGeometries">A boolean value specifying whether multi-geometries should be created</param>
            <param name="quickGeometries">A boolean value specifying whether the factory should create geometries quickly, but without validation</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.UnspecifiedGeometryFactory_WFS1_0_0_GML2.createGeometries">
            <summary>
            This method detects the geometry type from 'GetFeature' response and uses a geometry factory to create the 
            appropriate geometries.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.HttpClientUtil">
            <summary>
            This class provides an easy to use interface for HTTP-GET and HTTP-POST requests.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.HttpClientUtil.Url">
            <summary>
            Gets ans sets the Url of the request.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.HttpClientUtil.ProxyUrl">
            <summary>
            Gets and sets the proxy Url of the request. 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.HttpClientUtil.PostData">
            <summary>
            Sets the data of a HTTP POST request as byte array.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.HttpClientUtil.Credentials">
            <summary>
            Gets or sets the network credentials used for authenticating the request with the Internet resource
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.HttpClientUtil.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.HttpClientUtil.AddHeader(System.String,System.String)">
            <summary>
            Adds a HTTP header.
            </summary>
            <param name="name">The name of the header</param>
            <param name="value">The value of the header</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.HttpClientUtil.GetDataStream">
            <summary>
            Performs a HTTP-GET or HTTP-POST request and returns a datastream for reading.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.HttpClientUtil.Reset">
            <summary>
            This method resets all configurations.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.HttpClientUtil.Close">
            <summary>
            This method closes the WebResponse object.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.IWFS_TextResources">
            <summary>
            Text resources interface
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSFEATURETYPEPREFIX">
            <summary>
            Gets a value indicating the feature type prefix
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSGML">
            <summary>
            Gets a value indicating the GML namespace URI
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSGMLPREFIX">
            <summary>
            Gets a value indicating the prefix of the GML namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSOGC">
            <summary>
            Gets a value indicating the the OGC namespace URI
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSOGCPREFIX">
            <summary>
            Gets a value indicating the prefix of the OGC namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSOWS">
            <summary>
            Gets a value indicating the OWS namespace URI
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSOWSPREFIX">
            <summary>
            Gets a value indicating the prefix of the OWS namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSSCHEMA">
            <summary>
            Gets a value indicating the XML namespace URI
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSSCHEMAPREFIX">
            <summary>
            Gets a value indicating the prefix of the XML namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSWFS">
            <summary>
            Gets a value indicating the WFS namespace URI
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSWFSPREFIX">
            <summary>
            Gets a value indicating the prefix of the WFS namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSXLINK">
            <summary>
            Gets a value indicating the XLink namespace URI
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.NSXLINKPREFIX">
            <summary>
            Gets a value indicating the prefix of the XLink namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_BBOX">
            <summary>
            Gets an XPath string addressing the bounding box of a featuretype in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_BOUNDINGBOXMAXX">
            <summary>
            Gets an XPath string addressing the upper corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'maxx'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_BOUNDINGBOXMAXY">
            <summary>
            Gets an XPath string addressing the upper corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'maxy'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_BOUNDINGBOXMINX">
            <summary>
            Gets an XPath string addressing the lower corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'minx'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_BOUNDINGBOXMINY">
            <summary>
            Gets an XPath string addressing the lower corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'miny'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_DESCRIBEFEATURETYPERESOURCE">
            <summary>
            Gets an XPath string addressing the URI of 'DescribeFeatureType'in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_GEOMETRY_ELEMREF_GEOMNAMEQUERY_ANONYMOUSTYPE">
            <summary>
            Gets an XPath string addressing the name of an element described by an anonymous complex type 
            hosting an element with a 'gml'-prefixed ref-attribute in 'DescribeFeatureType'.
            Step2Alt: Finding the name of the featuretype's element with an anonymous complex type hosting the GML geometry.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_GEOMETRY_ELEMREF_GEOMNAMEQUERY">
            <summary>
            Gets an XPath string addressing the name of an element having a type-attribute referencing 
            a complex type hosting an element with a 'gml'-prefixed ref-attribute in 'DescribeFeatureType'.
            Step2: Finding the name of the featuretype's element with a named complex type hosting the GML geometry.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_GEOMETRY_ELEMREF_GMLELEMENTQUERY">
            <summary>
            Gets an XPath string addressing the 'gml'-prefixed  ref-attribute of an element.
            This is for querying the name of the GML geometry element.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_GEOMETRYELEMENT_BYTYPEATTRIBUTEQUERY">
            <summary>
            Gets an XPath string addressing an element with a 'gml'-prefixed type-attribute in 'DescribeFeatureType'.
            This for querying the geometry element of a featuretype in the most simple manner.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_GEOMETRYELEMENTCOMPLEXTYPE_BYELEMREFQUERY">
            <summary>
            Gets an XPath string addressing a complex type hosting an element with a 'gml'-prefixed ref-attribute in 'DescribeFeatureType'.
            This for querying the geometry element of a featuretype. 
            Step1: Finding the complex type with a geometry element from GML specification. 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_GETFEATURERESOURCE">
            <summary>
            Gets an XPath string addressing the URI of 'GetFeature'in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_NAMEATTRIBUTEQUERY">
            <summary>
            Gets an XPath string addressing a name-attribute.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_SRS">
            <summary>
            Gets an XPath string addressing the SRID of a featuretype in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_TARGETNS">
            <summary>
            Gets an XPath string addressing the target namespace in 'DescribeFeatureType'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.IWFS_TextResources.XPATH_TYPEATTRIBUTEQUERY">
            <summary>
             Gets an XPath string addressing a type-attribute.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IWFS_TextResources.DescribeFeatureTypeRequest(System.String)">
            <summary>
            Method to return the query string for a 'DescribeFeatureType' request.
            </summary>
            <param name="featureTypeName">The name of the featuretype to query</param>
            <returns>An URI string for a 'DescribeFeatureType' request</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IWFS_TextResources.GetCapabilitiesRequest">
            <summary>
            Method to return the query string for a 'GetCapabilities' request.
            </summary>
            <returns>An URI string for a 'GetCapabilities' request</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IWFS_TextResources.GetFeatureGETRequest(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,GeoAPI.Geometries.Envelope,SharpMap.Utilities.Wfs.IFilter,System.Boolean)">
            <summary>
            Method to return the query string for a 'GetFeature' - <b>GET</b> request.
            </summary>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="boundingBox">The bounding box of the query</param>
            <param name="filter">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/></param>
            <param name="loadAllElements">True to get all feature elements, false to get only geometry element</param>
            <returns>An URI for a 'GetFeature' - <b>GET</b> request.</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IWFS_TextResources.GetFeaturePOSTRequest(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,System.String,GeoAPI.Geometries.Envelope,SharpMap.Utilities.Wfs.IFilter,System.Boolean)">
            <summary>
            Method to return the query string for a 'GetFeature - <b>POST</b> request'.
            </summary>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelProperty">A property necessary for label rendering</param>
            <param name="boundingBox">The bounding box of the query</param>
            <param name="filter">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/></param>
            <param name="loadAllElements">True to get all feature elements, false to get only geometry element and eventually label</param>
            <returns>An URI for a 'GetFeature' - <b>POST</b> request.</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.IXPathQueryManager">
            <summary>
            XPathQueryManager interface
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.AddNamespace(System.String,System.String)">
            <summary>
            Method to add/register an xml-namespace
            </summary>
            <param name="prefix">The prefix used to identify the namespace</param>
            <param name="ns">The full namespace qualifier</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.Compile(System.String)">
            <summary>
            Method to compile a <paramref name="xPath"/> to a <see cref="T:System.Xml.XPath.XPathExpression"/>
            </summary>
            <param name="xPath">The xpath to compile</param>
            <returns>The compiled <see cref="T:System.Xml.XPath.XPathExpression"/></returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.Clone">
            <summary>
            Function to create a deep-copy clone of this <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/>
            </summary>
            <returns>An <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance resembling this one.</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.GetIterator(System.Xml.XPath.XPathExpression)">
            <summary>
            Function to get an iterator over <paramref name="xPath"/>
            </summary>
            <param name="xPath">The xPath expression to iterate</param>
            <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"/> iterator over <paramref name="xPath"/></returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.GetIterator(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            Function to get an iterator over <paramref name="xPath"/>, narrowed by <paramref name="queryParameters"/>
            </summary>
            <param name="xPath">The xPath expression to iterate</param>
            <param name="queryParameters">The parameters to narrow the <paramref name="xPath"/></param>
            <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"/> iterator over <paramref name="xPath"/></returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.GetValueFromNode(System.Xml.XPath.XPathExpression)">
            <summary>
            Function to get a value from  <paramref name="xPath"/>
            </summary>
            <param name="xPath">The <see cref="T:System.Xml.XPath.XPathExpression"/> to get the value from</param>
            <returns>A string value</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.GetValueFromNode(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            Function to get a value from  <paramref name="xPath"/>
            </summary>
            <param name="xPath">The <see cref="T:System.Xml.XPath.XPathExpression"/> to get the value from</param>
            <param name="queryParameters">The parameters for narrowing the <paramref name="xPath"/></param>
            <returns>A string value</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.GetValuesFromNodes(System.Xml.XPath.XPathExpression)">
            <summary>
            Function to get a list of value from  <paramref name="xPath"/>
            </summary>
            <param name="xPath">The <see cref="T:System.Xml.XPath.XPathExpression"/> to get the values from</param>
            <returns>A  list of string value</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.GetValuesFromNodes(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            Function to get a list of value from  <paramref name="xPath"/>
            </summary>
            <param name="xPath">The <see cref="T:System.Xml.XPath.XPathExpression"/> to get the values from</param>
            <param name="queryParameters">The parameters for narrowing the <paramref name="xPath"/></param>
            <returns>A  list of string value</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression)">
            <summary>
            Function to return an instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            in the context of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <returns>A <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/></returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            Function to return an instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            in the context of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
            <returns>A <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/></returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.GetContextOfNextNode">
            <summary>
            This method moves the current instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            to the context of the next node a previously handed over XPath expression addresses.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.GetContextOfNode(System.UInt32)">
            <summary>
            This method moves the current instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            to the context of node[index] of current position.
            </summary>
            <param name="index">The index of the node to search</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.ResetNamespaces">
            <summary>
            Method to reset/delete the current namespace context
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.ResetNavigator">
            <summary>
            Method to reset the inherent <see cref="T:System.Xml.XPath.XPathNavigator"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.SetDocumentToParse(System.IO.Stream)">
            <summary>
            Method to set the document to parse to <paramref name="documentStream"/>
            </summary>
            <param name="documentStream">The document stream</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.SetDocumentToParse(System.Byte[])">
            <summary>
            Method to set the document to parse to <paramref name="document"/>
            </summary>
            <param name="document">The document stream</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.SetDocumentToParse(SharpMap.Utilities.Wfs.HttpClientUtil)">
            <summary>
            Method to set the document to sth defined by <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/>
            </summary>
            <param name="httpClientUtil">The name of the file to parse</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IXPathQueryManager.SetDocumentToParse(System.String)">
            <summary>
            Method to set the document to parse to a file named <paramref name="documentFilename"/>
            </summary>
            <param name="documentFilename">The name of the file to parse</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.IFilter">
            <summary>
            Filter interface
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.IFilter.Encode">
            <summary>
            Method to encode the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.OGCFilterCollection">
            <summary>
            This class hosts a collection of instances implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/>.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.OGCFilterCollection.JunctorEnum">
            <summary>
            This enumeration consists of expressions denoting FE logical operators.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.OGCFilterCollection.JunctorEnum.And">
            <summary>
            And junctor
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.OGCFilterCollection.JunctorEnum.Or">
            <summary>
            Or junctor
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.OGCFilterCollection.Filters">
            <summary>
            Gets and sets a collection of instances implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.OGCFilterCollection.Junctor">
            <summary>
            Gets and sets the operator for combining the filters.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.OGCFilterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.OGCFilterCollection"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.OGCFilterCollection.AddFilter(SharpMap.Utilities.Wfs.IFilter)">
            <summary>
            This method adds an instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/>.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.OGCFilterCollection.AddFilterCollection(SharpMap.Utilities.Wfs.OGCFilterCollection)">
            <summary>
            This method adds an instance of <see cref="T:SharpMap.Utilities.Wfs.OGCFilterCollection"/>.
            </summary>
            <param name="filterCollection"></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.OGCFilterCollection.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.OGCFilterBase">
            <summary>
            This class is the base class of all filters.
            It stores the filter arguments.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.OGCFilterBase.Args">
            <summary>
            The arguments for the filter
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.OGCFilterBase.#ctor(System.String[])">
            <summary>
            Protected constructor for the abstract class.
            </summary>
            <param name="args">An array of arguments for the filter</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsEqualToFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsEqualToFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsEqualToFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsEqualToFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsEqualToFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsNotEqualToFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsNotEqualToFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsNotEqualToFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsNotEqualToFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsNotEqualToFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsLessThanFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsLessThanFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLessThanFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsLessThanFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLessThanFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsGreaterThanFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsGreaterThanFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsGreaterThanFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsGreaterThanFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsGreaterThanFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsLessThanOrEqualToFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsLessThanOrEqualToFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLessThanOrEqualToFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsLessThanOrEqualToFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLessThanOrEqualToFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsGreaterThanOrEqualToFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsGreaterThanOrEqualToFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsGreaterThanOrEqualToFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsGreaterThanOrEqualToFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsGreaterThanOrEqualToFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsBetweenFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsBetweenFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsBetweenFilter_FE1_1_0.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsBetweenFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsBetweenFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsLikeFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsLikeFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLikeFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsLikeFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLikeFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.FeatureIdFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC FeatureIdFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.FeatureIdFilter_FE1_1_0.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.FeatureIdFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.FeatureIdFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsNullFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsNullFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsNullFilter_FE1_1_0.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsNullFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsNullFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PathNode">
            <summary>
            This class represents an element-node in an XML document 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.PathNode.XmlElementNsUri">
            <summary>
            Gets the namespace URI of the element-node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.PathNode.XmlElementNodeName">
            <summary>
            Gets the local name of the element-node
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PathNode.#ctor(System.String,System.String,System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PathNode"/> class.
            </summary>
            <param name="elementNsUri">The namespace URI of the element-node</param>
            <param name="elementNodeName">The local name of the element-node</param>
            <param name="nameTable">A NameTable for storing namespace URI and local name</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PathNode.Matches(System.Xml.XmlReader)">
            <summary>
            This method evaluates, if the position of an XmlReader is at the element-node represented by the instance of this class.
            It compares pointers instead of literal values due to performance reasons.
            Therefore the name table of the XmlReader given as argument must be the one handed over to the constructor.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.PathNode.IsActive">
            <summary>
            Determines whether this PathNode shall be active.
            If it is not active, all match operations return true.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.AlternativePathNodesCollection">
            <summary>
            This class represents a collection of path nodes that can be used alternatively.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.AlternativePathNodesCollection.#ctor(SharpMap.Utilities.Wfs.IPathNode[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.AlternativePathNodesCollection"/> class.
            </summary>
            <param name="pathNodes">A collection of instances implementing <see cref="T:SharpMap.Utilities.Wfs.IPathNode"/></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.AlternativePathNodesCollection.Matches(System.Xml.XmlReader)">
            <summary>
            This method evaluates all inherent instances of <see cref="T:SharpMap.Utilities.Wfs.IPathNode"/>.
            </summary>
            <param name="reader">An XmlReader instance</param>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.AlternativePathNodesCollection.IsActive">
            <summary>
            Determines whether the inherent PathNodes shall be active.
            If a PathNode is not active, all match operations return true.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources">
            <summary>
            This class provides text resources specific for WFS 1.0.0 XML schema (for precompiling).
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_SRS">
            <summary>
            Gets an XPath string addressing the SRID of a featuretype in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_BBOX">
            <summary>
            Gets an XPath string addressing the bounding box of a featuretype in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_GETFEATURERESOURCE">
            <summary>
            Gets an XPath string addressing the URI of 'GetFeature'in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_DESCRIBEFEATURETYPERESOURCE">
            <summary>
            Gets an XPath string addressing the URI of 'DescribeFeatureType'in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_BOUNDINGBOXMINX">
            <summary>
            Gets an XPath string addressing the 'minx'-attribute of a featuretype's bounding box in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_BOUNDINGBOXMAXX">
            <summary>
            Gets an XPath string addressing the 'maxx'-attribute of a featuretype's bounding box in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_BOUNDINGBOXMINY">
            <summary>
            Gets an XPath string addressing the 'miny'-attribute of a featuretype's bounding box in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_BOUNDINGBOXMAXY">
            <summary>
            Gets an XPath string addressing the 'maxy'-attribute of a featuretype's bounding box in 'GetCapabilities'.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources">
            <summary>
            This class provides text resources specific for WFS 1.1.0.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_SRS">
            <summary>
            Gets an XPath string addressing the SRID of a featuretype in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_BBOX">
            <summary>
            Gets an XPath string addressing the bounding box of a featuretype in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_GETFEATURERESOURCE">
            <summary>
            Gets an XPath string addressing the URI of 'GetFeature'in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_DESCRIBEFEATURETYPERESOURCE">
            <summary>
            Gets an XPath string addressing the URI of 'DescribeFeatureType'in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_BOUNDINGBOXMINX">
            <summary>
            Gets an XPath string addressing the lower corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'minx'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_BOUNDINGBOXMINY">
            <summary>
            Gets an XPath string addressing the lower corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'miny'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_BOUNDINGBOXMAXX">
            <summary>
            Gets an XPath string addressing the upper corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'maxx'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_BOUNDINGBOXMAXY">
            <summary>
            Gets an XPath string addressing the upper corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'maxy'.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WFS_1_0_0_TextResources">
            <summary>
            Text resources class for WebFeatureService v1.0.0
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_0_0_TextResources.GetCapabilitiesRequest">
            <summary>
            This method returns the query string for 'GetCapabilities'.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_0_0_TextResources.DescribeFeatureTypeRequest(System.String)">
            <summary>
            This method returns the query string for 'DescribeFeatureType'.
            </summary>
            <param name="featureTypeName">The name of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_0_0_TextResources.GetFeatureGETRequest(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,GeoAPI.Geometries.Envelope,SharpMap.Utilities.Wfs.IFilter,System.Boolean)">
            <summary>
            This method returns the query string for 'GetFeature'.
            </summary>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="boundingBox">The bounding box of the query</param>
            <param name="filter">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/></param>
            <param name="loadAllElements">True to get all feature elements, false to get only geometry element</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_0_0_TextResources.GetFeaturePOSTRequest(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,System.String,GeoAPI.Geometries.Envelope,SharpMap.Utilities.Wfs.IFilter,System.Boolean)">
            <summary>
            This method returns the POST request for 'GetFeature'.
            </summary>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelProperty">A property necessary for label rendering</param>
            <param name="boundingBox">The bounding box of the query</param>
            <param name="filter">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/></param>
            <param name="loadAllElements">True to get all feature elements, false to get only geometry element</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WFS_1_1_0_TextResources">
            <summary>
            Text resources class for WebFeatureService v1.0.0
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_1_0_TextResources.GetCapabilitiesRequest">
            <summary>
            This method returns the query string for 'GetCapabilities'.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_1_0_TextResources.DescribeFeatureTypeRequest(System.String)">
            <summary>
            This method returns the query string for 'DescribeFeatureType'.
            </summary>
            <param name="featureTypeName">The name of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_1_0_TextResources.GetFeatureGETRequest(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,GeoAPI.Geometries.Envelope,SharpMap.Utilities.Wfs.IFilter,System.Boolean)">
            <summary>
            This method returns the query string for 'GetFeature'.
            </summary>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="boundingBox">The bounding box of the query</param>
            <param name="filter">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/></param>
            <param name="loadAllElements">True to get all feature elements, false to get only geometry element</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_1_0_TextResources.GetFeaturePOSTRequest(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,System.String,GeoAPI.Geometries.Envelope,SharpMap.Utilities.Wfs.IFilter,System.Boolean)">
            <summary>
            This method returns the POST request for 'GetFeature'.
            </summary>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelProperty">A property necessary for label rendering</param>
            <param name="boundingBox">The bounding box of the query</param>
            <param name="filter">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/></param>
            <param name="loadAllElements">True to get all feature elements, false to get only geometry element</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase">
            <summary>
            Base class for <see cref="T:SharpMap.Utilities.Wfs.IWFS_TextResources"/> implementations
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSOGCPREFIX">
            <summary>
            Prefix used for OGC namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSOGC">
            <summary>
            OGC namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSXLINKPREFIX">
            <summary>
            Prefix used for XLink namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSXLINK">
            <summary>
            XLink namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSFEATURETYPEPREFIX">
            <summary>
            Prefix used for feature namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSWFSPREFIX">
            <summary>
            Prefix used for WFS namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSWFS">
            <summary>
            WFS namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSGMLPREFIX">
            <summary>
            Prefix used for GML namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSGML">
            <summary>
            GML namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSOWSPREFIX">
            <summary>
            Prefix used for OWS namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSOWS">
            <summary>
            OWS namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSSCHEMAPREFIX">
            <summary>
            Prefix used for XML schema namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSSCHEMA">
            <summary>
            XML schema namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_TARGETNS">
            <summary>
            Gets an XPath string addressing the target namespace in 'DescribeFeatureType'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_GEOMETRYELEMENT_BYTYPEATTRIBUTEQUERY">
            <summary>
            Gets an XPath string addressing an element with a 'gml'-prefixed type-attribute in 'DescribeFeatureType'.
            This for querying the geometry element of a featuretype in the most simple manner.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_NAMEATTRIBUTEQUERY">
            <summary>
            Gets an XPath string addressing a name-attribute.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_TYPEATTRIBUTEQUERY">
            <summary>
             Gets an XPath string addressing a type-attribute.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_GEOMETRYELEMENTCOMPLEXTYPE_BYELEMREFQUERY">
            <summary>
            Gets an XPath string addressing a complex type hosting an element with a 'gml'-prefixed ref-attribute in 'DescribeFeatureType'.
            This for querying the geometry element of a featuretype. 
            Step1: Finding the complex type with a geometry element from GML specification. 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_GEOMETRY_ELEMREF_GEOMNAMEQUERY">
            <summary>
            Gets an XPath string addressing the name of an element having a type-attribute referencing 
            a complex type hosting an element with a 'gml'-prefixed ref-attribute in 'DescribeFeatureType'.
            Step2: Finding the name of the featuretype's element with a named complex type hosting the GML geometry.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_GEOMETRY_ELEMREF_GEOMNAMEQUERY_ANONYMOUSTYPE">
            <summary>
            Gets an XPath string addressing the name of an element described by an anonymous complex type 
            hosting an element with a 'gml'-prefixed ref-attribute in 'DescribeFeatureType'.
            Step2Alt: Finding the name of the featuretype's element with an anonymous complex type hosting the GML geometry.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_GEOMETRY_ELEMREF_GMLELEMENTQUERY">
            <summary>
            Gets an XPath string addressing the 'gml'-prefixed  ref-attribute of an element.
            This is for querying the name of the GML geometry element.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager">
            <summary>
            This class provides an easy-to-use interface for complex (parameterized) XPath queries.  
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
            <param name="documentStream">A Stream with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
            <param name="document">A byte array with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.Xml.XPath.XPathDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
            <param name="xPathDoc">An XmlDocument instance</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class. 
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class. 
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.Xml.XPath.XPathDocument,System.Xml.XPath.XPathNavigator,SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
            <param name="xPathDoc">An XmlDocument instance</param>
            <param name="xNav">An <see cref="T:System.Xml.XPath.XPathNavigator"/> instance</param>
            <param name="paramContext">A <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext"/> instance for parameterized XPath expressions</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.Xml.XPath.XPathDocument,System.Xml.XPath.XPathNodeIterator,SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
            <param name="xPathDoc">An XmlDocument instance</param>
            <param name="xIter">An XPathNodeIterator instance</param>
            <param name="paramContext">A <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext"/> instance for parameterized XPath expressions</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.AddNamespace(System.String,System.String)">
            <summary>
            This method adds a namespace for XPath queries.
            </summary>
            <param name="prefix">The namespace prefix</param>
            <param name="ns">The namespace URI</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.Compile(System.String)">
            <summary>
            This method compiles an XPath string.
            </summary>
            <param name="xPath">The XPath string</param>
            <returns>A compiled XPath expression</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.Clone">
            <summary>
            This method returns a clone of the current instance.
            The cloned instance operates on the same (read-only) XmlDocument instance.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetIterator(System.Xml.XPath.XPathExpression)">
            <summary>
            This method returns an XPathNodeIterator instance positioned at the nodes 
            the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetIterator(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method returns an XPathNodeIterator instance positioned at the nodes 
            the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetValueFromNode(System.Xml.XPath.XPathExpression)">
            <summary>
            This method returns the value of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetValueFromNode(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method returns the value of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetValuesFromNodes(System.Xml.XPath.XPathExpression)">
            <summary>
            This method returns a collection of the values of all nodes the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetValuesFromNodes(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method returns a collection of the values of all nodes the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression)">
            <summary>
            This method returns an instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            in the context of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method returns an instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            in the context of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetContextOfNextNode">
            <summary>
            This method moves the current instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            to the context of the next node a previously handed over XPath expression addresses.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetContextOfNode(System.UInt32)">
            <summary>
            This method moves the current instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            to the context of node[index] of current position.
            </summary>
            <param name="index">The index of the node to search</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ResetNamespaces">
            <summary>
            This method deletes the current namespace context.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ResetNavigator">
            <summary>
            This method resets the inherent XPathNavigator instance.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.SetDocumentToParse(System.IO.Stream)">
            <summary>
            Sets a new XML document. 
            </summary>
            <param name="documentStream">A Stream with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.SetDocumentToParse(System.Byte[])">
            <summary>
            Sets a new XML document. 
            </summary>
            <param name="document">A byte array with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.SetDocumentToParse(SharpMap.Utilities.Wfs.HttpClientUtil)">
            <summary>
            Sets a new XML document. 
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.SetDocumentToParse(System.String)">
            <summary>
            Sets a new XmlDocument
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.SetDocumentToParse(System.Xml.XPath.XPathDocument)">
            <summary>
            Sets a new XML document.
            </summary>
            <param name="xPathDoc">An XPathDocument instance</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.initializeXPathObjects(System.IO.Stream)">
            <summary>
            This method does some XPath specific initializations.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.findXPath(System.Xml.XPath.XPathExpression)">
            <summary>
            This method sets the inherent XPathNodeIterator instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext">
            <summary>
            This class represents a custom context for XPath queries.
            It is derived from XsltContext.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.#ctor(System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext"/> class.
            </summary>
            <param name="table">A NameTable instance</param>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.Whitespace">
            <summary>
            Method from XsltContext.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.AddNamespace(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This method adds a list of namespaces to use in the custom context.
            </summary>
            <param name="namespaces">A list of namespaces</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.CompareDocument(System.String,System.String)">
            <summary>
            Method from XsltContext.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            Method from XsltContext.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            This method resolves a function appearing in an XPath expression.
            </summary>
            <param name="prefix">The prefix of the function</param>
            <param name="name">The name of the function</param>
            <param name="ArgTypes">A list of argument types of the function</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.ResolveVariable(System.String,System.String)">
            <summary>
            This method resolves a variable appearing in an XPath expression.
            </summary>
            <param name="prefix">The prefix of the variable</param>
            <param name="name">The name of the variable</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.AddParam(System.String,System.Object)">
            <summary>
            This method adds a parameter to the custom context.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="parameter">The value of the parameter</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.AddParam(System.Collections.DictionaryEntry[])">
            <summary>
            This method adds a list of parameters to the custom context.
            </summary>
            <param name="parameters">A list of parameters</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.GetParam(System.String)">
            <summary>
            This method gets a parameter by name.
            </summary>
            <param name="name">The name of the parameter</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.RemoveParam(System.String)">
            <summary>
            This method removes a parameter from the inherent parameter list.
            </summary>
            <param name="name">The name of the parameter</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.ResetParams">
            <summary>
            This methods clears the inherent parameter list.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase">
            <summary>
            This class is the base class of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare"/> and <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase.ArgTypes">
            <summary>
            Gets the argument types.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase.ReturnType">
            <summary>
            Gets the return type.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase.Minargs">
            <summary>
            Gets the minimum number of arguments allowed.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase.Maxargs">
            <summary>
            Gets the maximum number of arguments allowed.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase.#ctor(System.Xml.XPath.XPathResultType[],System.Xml.XPath.XPathResultType,System.Int32,System.Int32)">
            <summary>
            Protected constructor for the abstract class.
            </summary>
            <param name="argTypes">The argument types of the function</param>
            <param name="returnType">The return type of the function</param>
            <param name="minArgs">The minimum number of arguments allowed</param>
            <param name="maxArgs">The maximum number of arguments allowed</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare">
            <summary>
            This class performs a string comparison in an XPath expression.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare.FunctionName">
            <summary>
            The name to use when embedding the function in an XPath expression.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare.#ctor(System.Xml.XPath.XPathResultType[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare"/> class.
            </summary>
            <param name="argTypes">The argument types of the function</param>
            <param name="minArgs">The minimum number of arguments allowed</param>
            <param name="maxArgs">The maximum number of arguments allowed</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
            <summary>
            This method performs a string comparison.
            </summary>
            <param name="xsltContext">The Xslt context</param>
            <param name="args">The arguments of the function</param>
            <param name="docContext">The document context</param>
            <returns>A boolean value indicating whether the argument strings are identical</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare.ResolveArgument(System.Object)">
            <summary>
            This method creates a string from an object argument.
            In many cases the argument is an XPathNodeIterator that must be resolved.
            </summary>
            <param name="arg">An argument of the function to be resolved</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare.resolveNsPrefix(System.String,System.Xml.Xsl.XsltContext)">
            <summary>
            This method resolves the prefix of an argument.
            If a prefix is found, the corresponding namespace URI is looked up 
            and substituted.
            </summary>
            <param name="args">An argument of the function to be resolved</param>
            <param name="xsltContext">The Xslt context for namespace resolving</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs">
            <summary>
            This class performs a string comparison in an XPath expression.
            It is specifically created for using in XML schema documents.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs.FunctionName">
            <summary>
            The name to use when embedding the function in an XPath expression.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs.#ctor(System.Xml.XPath.XPathResultType[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs"/> class.
            </summary>
            <param name="argTypes">The argument types of the function</param>
            <param name="minArgs">The minimum number of arguments allowed</param>
            <param name="maxArgs">The maximum number of arguments allowed</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
            <summary>
            This method performs a string comparison.
            </summary>
            <param name="xsltContext">The Xslt context</param>
            <param name="args">The arguments of the function</param>
            <param name="docContext">The document context</param>
            <returns>A boolean value indicating whether the argument strings are identical</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs.ResolveNsPrefix(System.String,System.String,System.Xml.XPath.XPathNavigator)">
            <summary>
            This method resolves the prefix of an argument.
            If a prefix is found, the corresponding namespace URI (if existing) is looked up 
            and substituted. Otherwise the target namespace is placed first.
            </summary>
            <param name="args">An argument of the function to be resolved</param>
            <param name="targetNs">The target namespace</param>
            <param name="docContext">The document context</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar">
            <summary>
            This class represents a variable in an XPath expression.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar"/> class.
            </summary>
            <param name="name">The name of the variable</param>
            <param name="param">The parameter</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar.Evaluate(System.Xml.Xsl.XsltContext)">
            <summary>
            Method implementing IXsltContextVariable
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar.IsLocal">
            <summary>
            Method implementing IXsltContextVariable
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar.IsParam">
            <summary>
            Method implementing IXsltContextVariable
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar.VariableType">
            <summary>
            Method implementing IXsltContextVariable
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator">
            <summary>
            This class is a decorator for classes implementing <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/>.
            It stores compiled XPath expressions for re-use.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.#ctor(SharpMap.Utilities.Wfs.IXPathQueryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator"/> class.
            </summary>
            <param name="xPathQueryManager">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> to operate on</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.Compile(System.String)">
            <summary>
            This method compiles an XPath string, if not already saved.  
            Otherwise it returns the available XPath compilation. 
            </summary>
            <param name="xPath">The XPath string</param>
            <returns>A compiled XPath expression</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.Clone">
            <summary>
            This method returns a clone of the current instance.
            The cloned instance operates on the same (read-only) XPathDocument instance.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression)">
            <summary>
            This method returns an instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator"/> 
            in the context of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method returns an instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator"/> 
            in the context of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.GetContextOfNextNode">
            <summary>
            This method moves the current instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator"/> 
            to the context of the next node a previously handed over XPath expression addresses.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.GetContextOfNode(System.UInt32)">
            <summary>
            This method moves the current instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator"/> 
            to the context of node[index] of current position.
            </summary>
            <param name="index">The index of the node to search</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator">
            <summary>
            This class should be the base class of all decorators for classes
            implementing <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator._XPathQueryManager">
            <summary>
            The <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> that is decorated
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.#ctor(SharpMap.Utilities.Wfs.IXPathQueryManager)">
            <summary>
            Protected constructor for the abstract class.
            </summary>
            <param name="xPathQueryManager">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> to operate on</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.AddNamespace(System.String,System.String)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="prefix">A namespace prefix</param>
            <param name="ns">A namespace URI</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.Compile(System.String)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">An XPath string</param>
            <returns>A compiled XPath expression</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.Clone">
            <summary>
            This method must be implemented specifically in each decorator.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetIterator(System.Xml.XPath.XPathExpression)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetIterator(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetValueFromNode(System.Xml.XPath.XPathExpression)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetValueFromNode(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetValuesFromNodes(System.Xml.XPath.XPathExpression)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetValuesFromNodes(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression)">
            <summary>
            This method must be implemented specifically in each decorator.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method must be implemented specifically in each decorator.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetContextOfNextNode">
            <summary>
            This method must be implemented specifically in each decorator.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetContextOfNode(System.UInt32)">
            <summary>
            This method must be implemented specifically in each decorator.
            </summary>
            <param name="index">The index of the node to search</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.ResetNamespaces">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.ResetNavigator">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.SetDocumentToParse(System.IO.Stream)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="documentStream">A Stream with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.SetDocumentToParse(System.Byte[])">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="document">A byte array with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.SetDocumentToParse(SharpMap.Utilities.Wfs.HttpClientUtil)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.SetDocumentToParse(System.String)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:SharpMap.Web.IClient">
            <summary>
            Interface for client classes accessing OGC Web services
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.VendorSpecificCapabilities">
            <summary>
            An <see cref="T:System.Xml.XmlNode"/> specifying specific capabilities, limitations of the server
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.TimeOut">
            <summary>
            Gets or sets a value indicating the timeout (in milliseconds) for the connection
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.Proxy">
            <summary>
            Gets or sets a value indicating the proxy to use.
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.Credentials">
            <summary>
            Gets or set a value indicating the <see cref="T:System.Net.ICredentials"/> to use for accessing the <see cref="P:SharpMap.Web.IClient.Proxy"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.BaseUrl">
            <summary>
            Gets or sets a value indicating the base uniform resource locator of the web service.
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.CapabilitiesUrl">
            <summary>
            Gets a value indicating the uniform resource locator for the GetCapabilities request.
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.GetXmlAsText">
            <summary>
            Gets  the web server's response as a text string.
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.GetXmlAsByteArray">
            <summary>
            Gets the web servers's response as an array of bytes
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.Version">
            <summary>
            Gets or sets the version of the web service to use.
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.ExceptionFormats">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpMap.Web.IClient.XmlDoc">
            <summary>
            Gets a value indicating the web-servers result as an <see cref="T:System.Xml.XmlDocument"/>
            </summary>
        </member>
        <member name="M:SharpMap.Web.IClient.CreateCapabilitiesUrl(System.String)">
            <summary>
            Method to create a complete capabilities uniform resource locator
            </summary>
            <param name="url">The base url</param>
            <returns>
            The uniform resource locator for the capabilities request.
            </returns>
        </member>
        <member name="M:SharpMap.Web.IClient.ValidateXml">
            <summary>
            Method to validate the web server's response
            </summary>
        </member>
        <member name="M:SharpMap.Web.IClient.ParseVersion">
            <summary>
            Method to parse the web-server's version
            </summary>
        </member>
        <member name="M:SharpMap.Web.IClient.ParseCapabilities">
            <summary>
            Method to parse the web-server's capabilities
            </summary>
        </member>
        <member name="M:SharpMap.Web.IClient.GetRemoteXml">
            <summary>
            Method to get the web server's response as a <see cref="T:System.Xml.XmlDocument"/>
            </summary>
            <returns>The web server's response as a<see cref="T:System.Xml.XmlDocument"/></returns>
        </member>
        <member name="T:SharpMap.Web.ServiceExceptionReport">
            <summary>
            The ServiceExceptionReport element contains one
            or more ServiceException elements that describe
            a service exception.
            </summary>
        </member>
        <member name="M:SharpMap.Web.ServiceExceptionReport.#ctor(System.String)">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Web.ServiceExceptionReport.ServiceException">
            <summary>
            The Service exception element is used to describe 
            a service exception.
            </summary>
        </member>
        <member name="P:SharpMap.Web.ServiceExceptionReport.Version">
            <summary>
            Gets the version number
            </summary>
        </member>
        <member name="T:SharpMap.Web.ServiceExceptionType">
            <summary>
            The ServiceExceptionType type defines the ServiceException
            element.  The content of the element is an exception message
            that the service wished to convey to the client application.
            </summary>
        </member>
        <member name="P:SharpMap.Web.ServiceExceptionType.Code">
            <summary>
            A service may associate a code with an exception
            by using the code attribute.
            </summary>
        </member>
        <member name="P:SharpMap.Web.ServiceExceptionType.Locator">
            <summary>                     
            The locator attribute may be used by a service to
            indicate to a client where in the client's request
            an exception was encountered.  If the request included
            a 'handle' attribute, this may be used to identify the
            offending component of the request.  Otherwise the 
            service may try to use other means to locate the 
            exception such as line numbers or byte offset from the
            begining of the request, etc ...
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wcs.Client">
            <summary>
            Web Coverage Service Client class
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.VendorSpecificCapabilities">
            <summary>
            Exposes the capabilities' VendorSpecificCapabilities as XmlNode object. External modules 
            could use this to parse the vendor specific capabilities for their specific purpose.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.TimeOut">
            <summary>
            Timeout of <see cref="T:System.Net.WebRequest"/> in milliseconds. Defaults to 10 seconds
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.Credentials">
            <summary>
             Gets or sets the credentials used to access the Web coverage service
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.Proxy">
            <summary>
            Gets or sets the proxy used to establish the connection to the web coverage service
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.BaseUrl">
            <summary>
            Gets or sets the base URL for the server without any OGC specific name=value pairs
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.CapabilitiesUrl">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.GetXmlAsText">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.GetXmlAsByteArray">
            <summary>
            Gets the entire XML document as byte[]
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.Version">
            <summary>
            Gets the version of the WCS server (ex. "1.0.0")
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.ExceptionFormats">
            <summary>
            Gets a list of available exception mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.XmlDoc">
            <summary>
            Gets the full capabilities xml document
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor">
            <summary>
            Just instantiate, no parameters
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String)">
            <summary>
            Initializes client to WCS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wcs server</param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            Initializes client to WCS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wcs server</param>
            <param name="proxy">Proxy to use</param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32)">
            <summary>
            Initializes client to WCS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wcs server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut"></param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy,System.Net.ICredentials)">
            <summary>
            Initializes client to WCS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wcs server</param>
            <param name="proxy">Proxy to use</param>
            <param name="credentials">Credentials for authenticating against remote WCS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials)">
            <summary>
            Initializes client to WCS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wcs server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="credentials">Credentials for authenticating against remote WCS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.String)">
            <summary>
            Initializes client to WCS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wcs server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials,System.String)">
            <summary>
            Initializes client to WCS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wcs server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
            <param name="credentials"></param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.Byte[])">
            <summary>
            Hydrates Client object based on byte array version of XML document
            </summary>
            <param name="byteXml">byte array version of capabilities document</param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.CreateCapabilitiesUrl(System.String)">
            <summary>
            Function to create a Capabilities Url
            </summary>
            <param name="url">The base url</param>
            <returns>A capabilities url</returns>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.ParseCapabilities">
            <summary>
            Parses a GetCapabilities request from an XMLDoc
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.GetRemoteXml">
            <summary>
            Downloads servicedescription from WCS service  
            </summary>
            <returns>XmlDocument from Url. Null if Url is empty or inproper XmlDocument</returns>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.ParseVersion">
            <summary>
            Parse the version number from the capabilities document
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.ParseExceptions(System.Xml.XmlNode)">
            <summary>
            Parses valid exceptions
            </summary>
            <param name="xnlExceptionNode"></param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.ValidateXml">
            <summary>
            Method to validate the web server's response
            </summary>
        </member>
        <member name="P:SharpMap.Web.HttpCacheUtility.IsWebContext">
            <summary>
            Gets a value indicating that the code is being run in a web context
            </summary>
        </member>
        <member name="M:SharpMap.Web.HttpCacheUtility.TryAddValue``1(System.String,``0)">
            <summary>
            Function that tries to get an object from the WebCache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Web.Wfs.Capabilities">
            <summary>
            Class for generating the WmsCapabilities Xml
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wfs.Capabilities.WfsServiceIdentification">
            <summary>
            Web Feature Service identification object
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceIdentification.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceIdentification.Abstract">
            <summary>
            Abstract
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceIdentification.Keywords">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceIdentification.ServiceType">
            <summary>
            Service type
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceIdentification.ServiceTypeVersion">
            <summary>
            Service type version
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceIdentification.Fees">
            <summary>
            Fees
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceIdentification.AccessConstraints">
            <summary>
            Access constraints
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wfs.Capabilities.WfsServiceIdentification.WfsServiceIdentifiication(System.String)">
            <summary>
            Initializer
            </summary>
            <param name="title">The title of the Web Feature Service</param>
        </member>
        <member name="T:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider">
            <summary>
            Web Feature Service Service provider object
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ProviderName">
            <summary>
            Provider name
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ProviderSite">
            <summary>
            Provider site
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContactDetail">
            <summary>
            Service contact detail
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact">
            <summary>
            Service contact object
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.IndividualName">
            <summary>
            Individual name
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.PositionName">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInformation">
            <summary>
            Contact information
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo">
            <summary>
            Contact info structure
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Telephone">
            <summary>
            Telephone
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.AddressDetails">
            <summary>
            Address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.OnlineResource">
            <summary>
            Online resource
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.HoursOfService">
            <summary>
            Hours of service
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.ContactInstructions">
            <summary>
            Contact instructions
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Phone">
            <summary>
            Phone structure
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Phone.Voice">
            <summary>
            Voice number
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Phone.Facsimile">
            <summary>
            Facsimile number
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Address">
            <summary>
            Address structure
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Address.DeliveryPoint">
            <summary>
            Delivery point
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Address.City">
            <summary>
            City
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Address.AdministrativeArea">
            <summary>
            Administrative area
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Address.PostalCode">
            <summary>
            Postal code
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Address.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Address.ElectronicMailAddress">
            <summary>
            Email address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Address.Voice">
            <summary>
            Voice number
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Capabilities.WfsServiceProvider.ServiceContact.ContactInfo.Address.Facsimile">
            <summary>
            Facsimile number
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wfs.Client">
            <summary>
            Class for requesting and parsing a WFS servers capabilities
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.VendorSpecificCapabilities">
            <summary>
            Exposes the capabilities VendorSpecificCapabilities as XmlNode object. External modules 
            could use this to parse the vendor specific capabilities for their specific purpose.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds. Defaults to 10 seconds
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.Credentials">
            <summary>
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.Proxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.BaseUrl">
            <summary>
            Gets or sets the base URL for the server without any OGC specific name=value pairs
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.CapabilitiesUrl">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.GetXmlAsText">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.GetXmlAsByteArray">
            <summary>
            Gets the entire XML document as byte[]
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.ServiceIdentification">
            <summary>
            Gets the service description
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.ServiceProvider">
            <summary>
            Gets the service provider
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.Version">
            <summary>
            Gets the version of the WFS server (ex. "1.1.0")
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.ExceptionFormats">
            <summary>
            Gets a list of available exception mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.XmlDoc">
            <summary>
            Gets the capabilities information as <see cref="T:System.Xml.XmlDocument"/>
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor">
            <summary>
            Just instantiate, no parameters
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String)">
            <summary>
            Initializes WFS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wfs server</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            This Initializes WFS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wfs server</param>
            <param name="proxy">Proxy to use</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32)">
            <summary>
            This Initializes WFS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wfs server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy,System.Net.ICredentials)">
            <summary>
            Initializes WFS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wfs server</param>
            <param name="proxy">Proxy to use</param>
            <param name="credentials">Credentials for authenticating against remote WFS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials)">
            <summary>
            Initializes WFS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wfs server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="credentials">Credentials for authenticating against remote WFS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.String)">
            <summary>
            Initializes WFS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wfs server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials,System.String)">
            <summary>
            Initializes WFS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wfs server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
            <param name="credentials">Credentials for authenticating against remote WFS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.Byte[])">
            <summary>
            Hydrates Client object based on byte array version of XML document
            </summary>
            <param name="byteXml">byte array version of capabilities document</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.CreateCapabilitiesUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.GetRemoteXml">
            <summary>
            Downloads servicedescription from WFS service  
            </summary>
            <returns>XmlDocument from Url. Null if Url is empty or inproper XmlDocument</returns>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.ParseVersion">
            <summary>
            Method to parse the web-server's version
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.ParseCapabilities">
            <summary>
            Parses a servicedescription and stores the data in the ServiceIdentification property
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.ParseService(System.Xml.XmlNode)">
            <summary>
            Parses service description node
            </summary>
            <param name="xnlService"></param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.ParseServiceIdentification(System.Xml.XmlNode)">
            <summary>
            Parses service description node
            </summary>
            <param name="xnlServiceId"></param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.ValidateXml">
            <summary>
            Method to validate the web server's response
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities">
            <summary>
            Class for generating the WmsCapabilities Xml
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsServiceDescription">
            <summary>
            The Wms Service Description stores metadata parameters for a WMS service
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Abstract">
            <summary>
            Optional narrative description providing additional information
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.AccessConstraints">
            <summary>
            <para>The optional element "AccessConstraints" may be omitted if it do not apply to the server. If
            the element is present, the reserved word "none" (case-insensitive) shall be used if there are no
            access constraints, as follows: "none".</para>
            <para>When constraints are imposed, no precise syntax has been defined for the text content of these elements, but
            client applications may display the content for user information and action.</para>
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.ContactInformation">
            <summary>
            Optional WMS contact information
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Fees">
            <summary>
            The optional element "Fees" may be omitted if it do not apply to the server. If
            the element is present, the reserved word "none" (case-insensitive) shall be used if there are no
            fees, as follows: "none".
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Keywords">
            <summary>
            Optional list of keywords or keyword phrases describing the server as a whole to help catalog searching
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.LayerLimit">
            <summary>
            Maximum number of layers allowed (0=no restrictions)
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.MaxHeight">
            <summary>
            Maximum height allowed in pixels (0=no restrictions)
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.MaxWidth">
            <summary>
            Maximum width allowed in pixels (0=no restrictions)
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.OnlineResource">
            <summary>
            Mandatory Top-level web address of service or service provider.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Title">
            <summary>
            Mandatory Human-readable title for pick lists
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.PublicAccessURL">
            <summary>
            Public url to access the service in case service is hosted behind firewall
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a WmsServiceDescription object
            </summary>
            <param name="title">Mandatory Human-readable title for pick lists</param>
            <param name="onlineResource">Top-level web address of service or service provider.</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a WmsServiceDescription object
            </summary>
            <param name="title">Mandatory Human-readable title for pick lists</param>
            <param name="onlineResource">Top-level web address of service or service provider.</param>
            <param name="publicWMSAccessUrl">Public URL to use when accessing the service in case it is hosted behind a firewall</param>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsContactInformation">
            <summary>
            Stores contact metadata about WMS service
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ElectronicMailAddress">
            <summary>
            Email address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.FacsimileTelephone">
            <summary>
            Fax number
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.PersonPrimary">
            <summary>
            Primary contact person
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.Position">
            <summary>
            Position of contact person
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.VoiceTelephone">
            <summary>
            Telephone
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress">
            <summary>
            Information about a contact address for the service.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.Address">
            <summary>
            Contact address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.AddressType">
            <summary>
            Type of address (usually "postal").
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.City">
            <summary>
            Contact City
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.Country">
            <summary>
            Country of contact address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.PostCode">
            <summary>
            Zipcode of contact
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.StateOrProvince">
            <summary>
            State or province of contact
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactPerson">
            <summary>
            Information about a contact person for the service.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactPerson.Organisation">
            <summary>
            Organisation of primary person
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactPerson.Person">
            <summary>
            Primary contact person
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client">
            <summary>
            Class for requesting and parsing a WMS servers capabilities
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsLayerStyle">
            <summary>
            Structure for storing information about a WMS Layer Style
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.Abstract">
            <summary>
            Abstract
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.LegendUrl">
            <summary>
            Legend
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.StyleSheetUrl">
            <summary>
            Style Sheet Url
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsOnlineResource">
            <summary>
            Structure for storing info on an Online Resource
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsOnlineResource.OnlineResource">
            <summary>
            URI of online resource
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsOnlineResource.Type">
            <summary>
            Type of online resource (Ex. request method 'Get' or 'Post')
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsServerLayer">
            <summary>
            Structure for holding information about a WMS Layer 
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Abstract">
            <summary>
            Abstract
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.ChildLayers">
            <summary>
            Collection of child layers
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.CRS">
            <summary>
            Coordinate Reference Systems supported by layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Keywords">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.LatLonBoundingBox">
            <summary>
            Latitudal/longitudal extent of this layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.SRIDBoundingBoxes">
            <summary>
            Extent of this layer in spatial reference system
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Name">
            <summary>
            Unique name of this layer used for requesting layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Queryable">
            <summary>
            Specifies whether this layer is queryable using GetFeatureInfo requests
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Style">
            <summary>
            List of styles supported by layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Title">
            <summary>
            Layer title
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsStyleLegend">
            <summary>
            Structure for storing WMS Legend information
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsStyleLegend.OnlineResource">
            <summary>
            Online resource for legend style 
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsStyleLegend.Size">
            <summary>
            Size of legend
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.Credentials">
            <summary>
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.ServiceDescription">
            <summary>
            Gets the service description
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.Version">
            <summary>
            Gets the version of the WMS server (ex. "1.3.0")
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.WmsVersion">
            <summary>
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetCapabilitiesRequests">
            <summary>
            Gets the available GetMap request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetCapabilitiesOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetFeatureInfoRequests">
            <summary>
            Gets the available GetFeatureInfo request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetFeatureInfoOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.DescribeLayerRequests">
            <summary>
            Gets the available DescribeLayer request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.DescribeLayerOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetLegendGraphicRequests">
            <summary>
            Gets the available GetLegendGraphic request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetLegendGraphicOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetStylesRequests">
            <summary>
            Gets the available GetLegendGraphic request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetStylesOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.PutStylesRequests">
            <summary>
            Gets the available GetLegendGraphic request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.PutStylesOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetMapOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.ExceptionFormats">
            <summary>
            Gets a list of available exception mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.VendorSpecificCapabilities">
            <summary>
            Exposes the capabilitie's VendorSpecificCapabilities as XmlNode object. External modules 
            could use this to parse the vendor specific capabilities for their specific purpose.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetMapRequests">
            <summary>
            Gets the available GetMap request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.Layer">
            <summary>
            Gets the hierarchical layer structure
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.Proxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.BaseUrl">
            <summary>
            Gets or sets the base URL for the server without any OGC specific name=value pairs
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.CapabilitiesUrl">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetXmlAsText">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetXmlAsByteArray">
            <summary>
            Gets the entire XML document as byte[]
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.XmlDoc">
            <summary>
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor">
            <summary>
            Just instantiate, no parameters
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String)">
            <summary>
            Initializes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            This Initializes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32)">
            <summary>
            This Initializes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy,System.Net.ICredentials)">
            <summary>
            Initializes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="credentials">Credentials for authenticating against remote WMS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials)">
            <summary>
            Initializes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="credentials">Credentials for authenticating against remote WMS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.String)">
            <summary>
            Initializes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials,System.String)">
            <summary>
            Initializes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
            <param name="credentials"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.Byte[])">
            <summary>
            Hydrates Client object based on byte array version of XML document
            </summary>
            <param name="byteXml">byte array version of capabilities document</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.GetRemoteXml">
            <summary>
            Downloads the service description from WMS service  
            </summary>
            <returns><c>XmlDocument</c> from <see cref="P:SharpMap.Web.Wms.Client.CapabilitiesUrl"/>.</returns>
            <exception cref="T:System.ApplicationException">Thrown if the result is not interpretable.</exception>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseCapabilities">
            <summary>
            Parses a servicedescription and stores the data in the ServiceDescription property
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseServiceDescription(System.Xml.XmlNode)">
            <summary>
            Parses service description node
            </summary>
            <param name="xnlServiceDescription"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseCapability(System.Xml.XmlNode)">
            <summary>
            Parses capability node
            </summary>
            <param name="xnCapability"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseExceptions(System.Xml.XmlNode)">
            <summary>
            Parses valid exceptions
            </summary>
            <param name="xnlExceptionNode"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseRequest(System.Xml.XmlNode)">
            <summary>
            Parses request node
            </summary>
            <param name="xmlRequestNode"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseRequestTypeBlock(System.Xml.XmlNode,SharpMap.Web.Wms.Client.WmsOnlineResource[]@,System.Collections.ObjectModel.Collection{System.String}@)">
            <summary>
            Parses GetMap request nodes
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseLayer(System.Xml.XmlNode)">
            <summary>
            Iterates through the layer nodes recursively
            </summary>
            <param name="xmlLayer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ValidateXml">
            <summary>
            </summary>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.CreateCapabilitiesUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseVersion">
            <summary>
            Just parse the version number and add to the version property
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.SpatialReferencedBoundingBox">
            <summary>
            Spatial referenced boundingbox
            </summary>
            <remarks>
            The spatial referenced boundingbox is used to communicate boundingboxes of WMS layers together 
            with their spatial reference system in which they are specified
            </remarks>
        </member>
        <member name="M:SharpMap.Web.Wms.SpatialReferencedBoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new SpatialReferencedBoundingBox which stores a boundingbox together with the SRID
            </summary>
            <remarks>This class is used to communicate all the boundingboxes of a WMS server between client.cs and wmslayer.cs</remarks>
            <param name="minX">The minimum x-ordinate value</param>
            <param name="maxX">The maximum x-ordinate value</param>
            <param name="minY">The minimum y-ordinate value</param>
            <param name="maxY">The maximum y-ordinate value</param>
            <param name="srid">Spatial Reference ID</param>
        </member>
        <member name="M:SharpMap.Web.Wms.SpatialReferencedBoundingBox.#ctor(GeoAPI.Geometries.Envelope,System.Int32)">
            <summary>
            Initializes a new SpatialReferencedBoundingBox which stores a boundingbox together with the SRID
            </summary>
            <remarks>This class is used to communicate all the boundingboxes of a WMS server between client.cs and wmslayer.cs</remarks>
            <param name="boundingBox">BoundingBox</param>
            <param name="srid">Spatial Reference ID</param>
        </member>
        <member name="P:SharpMap.Web.Wms.SpatialReferencedBoundingBox.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Tiling.ITileCache">
            <summary>
            Basic interface for a <see cref="T:SharpMap.Web.Wms.Tiling.ITileCache"/>
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.ITileCache.AddTile(GeoAPI.Geometries.Envelope,System.Drawing.Bitmap)">
            <summary>
            Method to add a tile to the cache.
            </summary>
            <param name="box">The bounding <paramref name="box"/> of the area covered by the <paramref name="tile"/>.</param>
            <param name="tile">The tile image</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.ITileCache.GetTile(GeoAPI.Geometries.Envelope)">
            <summary>
            Function to retrieve a tile from the cache that covers the provided <paramref name="box"/>.
            </summary>
            <param name="box">The area that is to be covered by the tile</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.ITileCache.ContainsTile(GeoAPI.Geometries.Envelope)">
            <summary>
            Function to evaluate if the cache contains a tile that covers the provided <paramref name="box"/>.
            </summary>
            <param name="box">The area that is to be covered by the tile</param>
            <returns><value>true</value> if such a tile image is in the cache.</returns>
        </member>
        <member name="T:SharpMap.Web.Wms.Tiling.TileCacheFileStorage">
            <summary>
            Very simple implementation of ITileCache to demonstrate its functionality. It dumps all tiles as png's in a single directory.
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileCacheFileStorage.#ctor(System.String)">
            <summary>
            This constructor creates the storage directory if it does not exist.
            </summary>
            <param name="directory">Directory where the tiles will be stored</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileCacheFileStorage.AddTile(GeoAPI.Geometries.Envelope,System.Drawing.Bitmap)">
            <summary>
            Method to add a tile to the cache.
            </summary>
            <param name="box">The bounding <paramref name="box"/> of the area covered by the <paramref name="tile"/>.</param>
            <param name="tile">The tile image</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileCacheFileStorage.GetTile(GeoAPI.Geometries.Envelope)">
            <summary>
            Function to retrieve a tile from the cache that covers the provided <paramref name="box"/>.
            </summary>
            <param name="box">The area that is to be covered by the tile</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileCacheFileStorage.ContainsTile(GeoAPI.Geometries.Envelope)">
            <summary>
            Function to evaluate if the cache contains a tile that covers the provided <paramref name="box"/>.
            </summary>
            <param name="box">The area that is to be covered by the tile</param>
            <returns><value>true</value> if such a tile image is in the cache.</returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileCacheFileStorage.GenerateDirectoryPath(System.String,System.String)">
            <summary>
            Helper for convenience. Generates a directory path the Application Data directory 
            which could be used to store tiles.
            </summary>
            <param name="layerName">Name of the SharpMap layer</param>
            <param name="tileSetName">Name of the TileSet</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileExtents.GetTileExtents(SharpMap.Web.Wms.Tiling.TileSet,GeoAPI.Geometries.Envelope,System.Double)">
            <summary>
            Returns a List of the tile BoundingBoxes which cover the complete area of the map BoundingBox 
            </summary>
            <param name="tileSet">The TileSet that provides the tiles</param>
            <param name="extent">The BoundingBox of the map</param>
            <param name="mapResolution">The resolution of the map</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileExtents.CheckForBounds(GeoAPI.Geometries.Envelope,GeoAPI.Geometries.Envelope)">
            <summary>
            Checks if the tile with given extent is within the bounds given by
            the TileSet BoundingBox. It is not a normal Within operation however
            because the extent can be partially outside to the top right but not 
            outside of the bottom left. That is how it is defined in WMS-C.
            </summary>
            <returns>Returns true if the tile with this extent is part of the tile collection on the server</returns>
        </member>
        <member name="T:SharpMap.Web.Wms.Tiling.TileSet">
            <summary>
            Class for handling a set of tiles
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileSet.Verify">
            <summary>
            Checks if the TileSet is initialized and throws an exception if not
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileSet.CreateDefaultName(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a default name from a list of <paramref name="layers"/> names
            </summary>
            <param name="layers">A series of layer names</param>
            <returns>A string</returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileSet.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileSet.ParseVendorSpecificCapabilitiesNode(System.Xml.XmlNode)">
            <summary>
            Parses the TileSets from the VendorSpecificCapabilities node of the WMS Capabilities 
            and adds them to the TileSets member
            </summary>
            <param name="xnlVendorSpecificCapabilities">The VendorSpecificCapabilities node of the Capabilities</param>
            <returns>A sorted list of <see cref="T:SharpMap.Web.Wms.Tiling.TileSet"/>s</returns>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.TileCache">
            <summary>
            Gets or sets the local tile cache. Use a local tile cache if you also want to store the tiles on 
            the local machine. 
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.Name">
            <summary>
            Gets or sets a value indicating the name of the tile set
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.Srs">
            <summary>
            Gets or sets a string describing the spatial reference system of the tile set
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.BoundingBox">
            <summary>
            Gets or sets a value indicating the extent of the tile set
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.Resolutions">
            <summary>
            Gets or sets a value indicating the resolutions covered by this tile set.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.Width">
            <summary>
            Gets or sets a value indicating the width (in pixel) of each tile.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.Height">
            <summary>
            Gets or sets a value indicating the height (in pixel) of each tile.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.Format">
            <summary>
            Gets or sets a value indicating the tile image format in this tile set.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.Layers">
            <summary>
            Gets or sets a value indicating the layers contained in this tile set.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.Styles">
            <summary>
            Gets or sets a value indicating the styles covered in this tile set.
            </summary>
        </member>
        <member name="T:GeoAPI.ICoordinateSystemRepository">
            <summary>
            An interface for classes that offer access to coordinate system creating facillities.
            </summary>
        </member>
        <member name="P:GeoAPI.ICoordinateSystemRepository.Count">
            <summary>
            Gets a value indicating the number of unique coordinate systems in the repository
            </summary>
        </member>
        <member name="P:GeoAPI.ICoordinateSystemRepository.IsReadOnly">
            <summary>
            Gets a value indicating that this coordinate system repository is readonly
            </summary>
        </member>
        <member name="M:GeoAPI.ICoordinateSystemRepository.AddCoordinateSystem(System.Int32,GeoAPI.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Method to add <paramref name="coordinateSystem"/> to the service and register it with the <paramref name="srid"/> value.
            </summary>
            <param name="srid">The identifier for the <paramref name="coordinateSystem"/> in the store.</param>
            <param name="coordinateSystem">The coordinate system.</param>
        </member>
        <member name="M:GeoAPI.ICoordinateSystemRepository.Clear">
            <summary>
            Method to remove all coordinate systems from the service
            </summary>
        </member>
        <member name="M:GeoAPI.ICoordinateSystemRepository.RemoveCoordinateSystem(System.Int32)">
            <summary>
            Method to remove a coordinate system form the service by its <paramref name="srid"/> identifier
            </summary>
            <param name="srid">The identifier of the coordinate system to remove</param>
            <returns><value>true</value> if the coordinate system was removed successfully, otherwise <value>false</value></returns>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Transformations.GeometryTransform">
            <summary>
            Helper class for transforming <see cref="T:GeoAPI.Geometries.IGeometry"/>
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformBox(GeoAPI.Geometries.Envelope,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.Envelope"/>.
            </summary>
            <param name="box">BoundingBox to transform</param>
            <param name="transform">Math Transform</param>
            <returns>Transformed object</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformGeometry(GeoAPI.Geometries.IGeometry,GeoAPI.CoordinateSystems.Transformations.IMathTransform,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="g">Geometry to transform</param>
            <param name="transform">MathTransform</param>
            <param name="targetFactory">The factory to create the target geometry</param>
            <returns>Transformed Geometry</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformCoordinate(GeoAPI.Geometries.Coordinate,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Function to transform a <paramref name="c"/> using <paramref name="transform"/>
            </summary>
            <param name="c">The coordinate</param>
            <param name="transform">The transformation</param>
            <returns>A transformed coordinate</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformCoordinates(GeoAPI.Geometries.Coordinate[],GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Function to transform <paramref name="c"/> using <paramref name="transform"/>
            </summary>
            <param name="c">The array of coordinates</param>
            <param name="transform">The transformation</param>
            <returns>An array of transformed coordinates</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformPoint(GeoAPI.Geometries.IPoint,GeoAPI.CoordinateSystems.Transformations.IMathTransform,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IPoint"/>.
            </summary>
            <param name="p">Point to transform</param>
            <param name="transform">MathTransform</param>
            <param name="targetFactory">The factory to create the target geometry</param>
            <returns>Transformed Point</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformLineString(GeoAPI.Geometries.ILineString,GeoAPI.CoordinateSystems.Transformations.IMathTransform,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.ILineString"/>.
            </summary>
            <param name="l">LineString to transform</param>
            <param name="transform">MathTransform</param>
            <param name="targetFactory">The factory to create the target geometry</param>
            <returns>Transformed LineString</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformLinearRing(GeoAPI.Geometries.ILinearRing,GeoAPI.CoordinateSystems.Transformations.IMathTransform,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.ILinearRing"/>.
            </summary>
            <param name="r">LinearRing to transform</param>
            <param name="transform">MathTransform</param>
            <param name="targetFactory">The factory to create the target geometry</param>
            <returns>Transformed LinearRing</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformPolygon(GeoAPI.Geometries.IPolygon,GeoAPI.CoordinateSystems.Transformations.IMathTransform,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IPolygon"/>.
            </summary>
            <param name="p">Polygon to transform</param>
            <param name="transform">MathTransform</param>
            <param name="targetFactory">The factory to create the target geometry</param>
            <returns>Transformed Polygon</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformMultiPoint(GeoAPI.Geometries.IMultiPoint,GeoAPI.CoordinateSystems.Transformations.IMathTransform,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IMultiPoint"/>.
            </summary>
            <param name="points">MultiPoint to transform</param>
            <param name="transform">MathTransform</param>
            <param name="targetFactory">The factory to create the target geometry</param>
            <returns>Transformed MultiPoint</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformMultiLineString(GeoAPI.Geometries.IMultiLineString,GeoAPI.CoordinateSystems.Transformations.IMathTransform,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.
            </summary>
            <param name="lines">MultiLineString to transform</param>
            <param name="transform">MathTransform</param>
            <param name="targetFactory">The factory to create the target geometry</param>
            <returns>Transformed MultiLineString</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformMultiPolygon(GeoAPI.Geometries.IMultiPolygon,GeoAPI.CoordinateSystems.Transformations.IMathTransform,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IMultiPolygon"/>.
            </summary>
            <param name="polys">MultiPolygon to transform</param>
            <param name="transform">MathTransform</param>
            <param name="targetFactory">The factory to create the target geometry</param>
            <returns>Transformed MultiPolygon</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.GeometryTransform.TransformGeometryCollection(GeoAPI.Geometries.IGeometryCollection,GeoAPI.CoordinateSystems.Transformations.IMathTransform,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>.
            </summary>
            <param name="geoms">GeometryCollection to transform</param>
            <param name="transform">MathTransform</param>
            <param name="targetFactory">The factory to create the target geometry</param>
            <returns>Transformed GeometryCollection</returns>
        </member>
        <member name="T:GeoAPI.Geometries.GeoAPIEx">
            <summary>
            Set of extension methods for use of GeoAPI within SharpMap
            </summary>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Min(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the minimum coordinate of the <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="self">The envelope</param>
            <returns>The minimum coordinate</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.EnsureValidRing(GeoAPI.Geometries.ICoordinateSequenceFactory,GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Ensures that a CoordinateSequence forms a valid ring, 
            returning a new closed sequence of the correct length if required.
            If the input sequence is already a valid ring, it is returned 
            without modification.
            If the input sequence is too short or is not closed, 
            it is extended with one or more copies of the start point.
            </summary>
            <param name="fact">The CoordinateSequenceFactory to use to create the new sequence</param>
            <param name="seq">The sequence to test</param>
            <returns>The original sequence, if it was a valid ring, or a new sequence which is valid.</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Copy(GeoAPI.Geometries.ICoordinateSequence,System.Int32,GeoAPI.Geometries.ICoordinateSequence,System.Int32,System.Int32)">
            <summary>
             Copies a section of a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> to another <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
             The sequences may have different dimensions;
             in this case only the common dimensions are copied.
            </summary>
             <param name="src">The sequence to copy coordinates from</param>
             <param name="srcPos">The starting index of the coordinates to copy</param>
             <param name="dest">The sequence to which the coordinates should be copied to</param>
             <param name="destPos">The starting index of the coordinates in <see paramref="dest"/></param>
             <param name="length">The number of coordinates to copy</param>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.CopyCoord(GeoAPI.Geometries.ICoordinateSequence,System.Int32,GeoAPI.Geometries.ICoordinateSequence,System.Int32)">
            <summary>
             Copies a coordinate of a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> to another <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
             The sequences may have different dimensions;
             in this case only the common dimensions are copied.
            </summary>
             <param name="src">The sequence to copy coordinate from</param>
             <param name="srcPos">The index of the coordinate to copy</param>
             <param name="dest">The sequence to which the coordinate should be copied to</param>
             <param name="destPos">The index of the coordinate in <see paramref="dest"/></param>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.EnsureValidRing(System.Collections.Generic.List{GeoAPI.Geometries.Coordinate})">
            <summary>
            Ensures that a CoordinateSequence forms a valid ring, 
            returning a new closed sequence of the correct length if required.
            If the input sequence is already a valid ring, it is returned 
            without modification.
            If the input sequence is too short or is not closed, 
            it is extended with one or more copies of the start point.
            </summary>
            <param name="coordinates">List of coordinates</param>
            <returns>The original sequence, if it was a valid ring, or a new sequence which is valid.</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Max(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the maximum coordinate of the <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="self">The envelope</param>
            <returns>The maximum coordinate</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Add(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Adds to coordinate's
            </summary>
            <param name="self">the first coordinate</param>
            <param name="summand">The second coordinate</param>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Subtract(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Subtracts two coordinates from one another
            </summary>
            <param name="self">The first coordinate</param>
            <param name="summand">The second coordinate</param>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.LongestAxis(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the axis of the longest axis
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.BottomLeft(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the bottom-left coordinate of the <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="self">The envelope</param>
            <returns>The bottom-left coordinate</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.BottomRight(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the bottom-right coordinate of the <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="self">The envelope</param>
            <returns>The bottom-right coordinate</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.TopLeft(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the top-left coordinate of the <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="self">The envelope</param>
            <returns>The top-left coordinate</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.TopRight(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the top-right coordinate of the <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="self">The envelope</param>
            <returns>The top-right coordinate</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Bottom(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the minimum y-value of the <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="self">The envelope</param>
            <returns>The minimum y-value</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Top(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the maximum y-value of the <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="self">The envelope</param>
            <returns>The maximum y-value</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Left(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the minimum x-value of the <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="self">The envelope</param>
            <returns>The minimum x-value</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Right(GeoAPI.Geometries.Envelope)">
            <summary>
            Gets the maximum x-value of the <see cref="T:GeoAPI.Geometries.Envelope"/>
            </summary>
            <param name="self">The envelope</param>
            <returns>The maximum x-value</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.TransformToImage(GeoAPI.Geometries.ILineString,SharpMap.MapViewport)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.ILineString"/> to an array of <see cref="T:System.Drawing.PointF"/>s.
            </summary>
            <param name="self">The linestring</param>
            <param name="map">The mapviewport defining transformation parameters</param>
            <returns>The array of <see cref="T:System.Drawing.PointF"/>s</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.ToDoubleArray(GeoAPI.Geometries.Coordinate)">
            <summary>
            Converts a <see cref="T:GeoAPI.Geometries.Coordinate"/> to an array of <see cref="T:System.Double"/>s.
            </summary>
            <param name="self">The coordinate</param>
            <returns>An array of doubles</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.IsCCW(GeoAPI.Geometries.ILinearRing)">
            <summary>
            Abbreviation to counter clockwise function
            </summary>
            <param name="self">The ring</param>
            <returns><c>true</c> if the ring is oriented counter clockwise</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Grow(GeoAPI.Geometries.Envelope,System.Double)">
            <summary>
            Increases the size of the boundingbox by the given amount in all directions
            </summary>
            <param name="self">The envelope to grow</param>
            <param name="amount">Amount to grow in all directions</param>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.Grow(GeoAPI.Geometries.Envelope,System.Double,System.Double)">
            <summary>
            Increases the size of the boundingbox by the given amount in horizontal and vertical directions
            </summary>
            <param name="self">The envelope</param>
            <param name="amountInX">Amount to grow in horizontal direction</param>
            <param name="amountInY">Amount to grow in vertical direction</param>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.TransformToImage(GeoAPI.Geometries.IPolygon,SharpMap.MapViewport,System.Boolean)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IPolygon"/> to an array of <see cref="T:System.Drawing.PointF"/>s
            </summary>
            <param name="self">The polygon</param>
            <param name="map">The map that defines the affine coordinate transformation.</param>
            <param name="useClipping">Use clipping for the polygon</param>
            <returns>An array of PointFs</returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.IsEmpty(GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests if a coordinate is empty
            </summary>
            <param name="c">The coordinate</param>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.GeomFromText(GeoAPI.Geometries.IGeometry,System.String)">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="wkt"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.Geometries.GeoAPIEx.SetExtent(NetTopologySuite.Geometries.Geometry,GeoAPI.Geometries.Envelope)">
            <summary>
            Utility function to set the <see cref="P:NetTopologySuite.Geometries.Geometry.EnvelopeInternal"/> when it is known.
            </summary>
            <param name="geom">The geometry</param>
            <param name="envelope">The envelope of <paramref name="geom"/></param>.
        </member>
    </members>
</doc>
